//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const WARNINGS = 57505
const VARIABLES = 57506
const EVENTS = 57507
const BINLOG = 57508
const GTID = 57509
const STATUS = 57510
const COLUMNS = 57511
const FIELDS = 57512
const CURRENT_TIMESTAMP = 57513
const DATABASE = 57514
const CURRENT_DATE = 57515
const CURRENT_TIME = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const UTC_DATE = 57519
const UTC_TIME = 57520
const UTC_TIMESTAMP = 57521
const REPLACE = 57522
const CONVERT = 57523
const CAST = 57524
const GROUP_CONCAT = 57525
const SEPARATOR = 57526
const MATCH = 57527
const AGAINST = 57528
const BOOLEAN = 57529
const LANGUAGE = 57530
const WITH = 57531
const QUERY = 57532
const EXPANSION = 57533
const UNUSED = 57534
const PARTITION = 57535
const PARTITIONS = 57536
const HASH = 57537
const LIST = 57538
const XA = 57539
const DISTRIBUTED = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556
const RADON = 57557
const ATTACH = 57558
const ATTACHLIST = 57559
const DETACH = 57560
const RESHARD = 57561

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 178,
	83, 672,
	-2, 40,
	-1, 183,
	83, 549,
	-2, 497,
	-1, 409,
	111, 533,
	-2, 529,
	-1, 410,
	111, 534,
	-2, 530,
	-1, 437,
	158, 56,
	161, 56,
	-2, 69,
	-1, 476,
	1, 50,
	237, 50,
	-2, 56,
	-1, 591,
	5, 27,
	-2, 473,
	-1, 614,
	158, 56,
	161, 56,
	-2, 70,
	-1, 681,
	1, 51,
	237, 51,
	-2, 56,
	-1, 766,
	111, 536,
	-2, 532,
	-1, 896,
	5, 28,
	-2, 352,
	-1, 920,
	5, 28,
	-2, 474,
	-1, 1008,
	5, 27,
	-2, 476,
	-1, 1111,
	5, 28,
	-2, 477,
}

const yyPrivate = 57344

const yyLast = 6892

var yyAct = [...]int{

	410, 957, 497, 1148, 1114, 1067, 1053, 999, 387, 795,
	363, 594, 385, 998, 677, 940, 959, 56, 1064, 664,
	933, 750, 889, 604, 365, 757, 551, 3, 796, 978,
	760, 74, 66, 813, 182, 765, 157, 308, 139, 608,
	881, 309, 595, 72, 792, 727, 707, 776, 816, 759,
	500, 623, 682, 639, 633, 352, 615, 412, 418, 673,
	176, 166, 490, 55, 139, 145, 74, 361, 311, 148,
	150, 149, 151, 1162, 305, 610, 611, 156, 181, 306,
	1115, 1147, 179, 1161, 1136, 762, 1159, 1077, 95, 142,
	88, 627, 1146, 991, 1047, 1135, 328, 890, 116, 117,
	324, 944, 82, 330, 331, 388, 50, 335, 658, 92,
	704, 323, 98, 93, 838, 657, 828, 829, 830, 174,
	139, 139, 818, 963, 831, 817, 665, 621, 1084, 852,
	73, 1042, 892, 1040, 864, 863, 862, 139, 318, 78,
	24, 51, 26, 27, 506, 505, 313, 115, 1106, 1108,
	861, 1128, 139, 502, 1127, 1126, 50, 345, 347, 314,
	636, 507, 859, 46, 162, 502, 118, 28, 325, 60,
	36, 139, 350, 316, 139, 136, 74, 120, 414, 818,
	317, 74, 817, 899, 698, 636, 119, 37, 181, 415,
	53, 1074, 179, 431, 107, 62, 63, 64, 65, 506,
	505, 1032, 697, 923, 79, 895, 97, 893, 105, 76,
	541, 542, 805, 550, 425, 609, 507, 948, 81, 87,
	1107, 823, 103, 104, 80, 108, 562, 665, 77, 700,
	529, 94, 626, 102, 143, 1029, 519, 1152, 696, 529,
	504, 90, 83, 832, 355, 413, 99, 1134, 30, 31,
	32, 501, 34, 900, 346, 346, 101, 505, 86, 635,
	814, 858, 1027, 501, 35, 47, 39, 949, 50, 48,
	49, 33, 507, 507, 75, 860, 91, 804, 96, 85,
	106, 622, 625, 429, 635, 693, 691, 687, 624, 690,
	692, 653, 652, 84, 100, 428, 709, 506, 505, 320,
	89, 649, 993, 109, 110, 112, 111, 113, 777, 777,
	906, 477, 1028, 139, 507, 827, 139, 139, 139, 53,
	734, 139, 312, 979, 655, 139, 139, 420, 695, 730,
	1022, 52, 1021, 416, 732, 733, 731, 654, 647, 506,
	505, 577, 578, 694, 648, 938, 995, 981, 38, 522,
	523, 524, 525, 526, 519, 40, 507, 529, 41, 42,
	850, 44, 43, 983, 114, 987, 45, 982, 689, 980,
	874, 875, 876, 934, 985, 935, 708, 509, 751, 699,
	752, 1131, 849, 839, 984, 539, 506, 505, 343, 986,
	988, 1087, 688, 315, 720, 722, 723, 651, 493, 901,
	721, 1020, 932, 507, 1118, 518, 517, 527, 528, 520,
	521, 522, 523, 524, 525, 526, 519, 508, 74, 529,
	868, 1081, 867, 139, 848, 835, 139, 170, 74, 965,
	583, 962, 498, 506, 505, 596, 943, 597, 942, 311,
	181, 1025, 650, 510, 179, 824, 506, 505, 591, 808,
	507, 579, 520, 521, 522, 523, 524, 525, 526, 519,
	601, 599, 529, 507, 753, 538, 540, 478, 1024, 319,
	666, 667, 668, 351, 498, 1080, 628, 22, 581, 1155,
	351, 560, 1129, 351, 1079, 139, 1051, 351, 606, 945,
	679, 549, 139, 139, 552, 553, 554, 555, 556, 557,
	558, 139, 561, 563, 563, 563, 563, 563, 563, 563,
	563, 571, 572, 573, 574, 607, 713, 1119, 1018, 1017,
	803, 728, 57, 703, 887, 351, 915, 592, 683, 135,
	954, 953, 675, 676, 951, 950, 161, 729, 922, 351,
	1122, 918, 612, 377, 376, 378, 379, 380, 381, 74,
	713, 351, 382, 134, 660, 661, 662, 663, 438, 437,
	605, 756, 74, 181, 793, 887, 803, 764, 1051, 670,
	671, 672, 952, 887, 778, 887, 701, 427, 575, 768,
	1055, 1058, 1059, 1060, 1056, 766, 1057, 1061, 580, 24,
	1123, 717, 718, 74, 724, 725, 53, 24, 781, 797,
	596, 794, 597, 769, 770, 801, 803, 773, 122, 754,
	755, 659, 678, 311, 67, 129, 589, 774, 802, 799,
	590, 780, 806, 782, 783, 564, 565, 566, 567, 568,
	569, 570, 163, 784, 820, 785, 791, 674, 498, 53,
	669, 771, 772, 793, 685, 24, 50, 53, 484, 587,
	1099, 1125, 1097, 1124, 811, 1100, 815, 1098, 552, 1096,
	819, 413, 1055, 1058, 1059, 1060, 1056, 1095, 1057, 1061,
	714, 812, 123, 1153, 133, 131, 1007, 121, 1145, 128,
	840, 841, 53, 167, 168, 873, 139, 822, 1144, 825,
	716, 807, 826, 790, 789, 53, 798, 1101, 50, 1059,
	1060, 419, 139, 353, 842, 1030, 844, 845, 846, 627,
	124, 132, 126, 127, 130, 417, 809, 810, 684, 354,
	937, 843, 434, 424, 767, 916, 483, 1063, 164, 165,
	419, 1005, 853, 683, 851, 834, 779, 833, 856, 821,
	728, 518, 517, 527, 528, 520, 521, 522, 523, 524,
	525, 526, 519, 1132, 358, 529, 729, 1116, 870, 158,
	1090, 436, 435, 74, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 788, 891, 529, 877, 159, 57,
	1089, 882, 787, 1050, 605, 491, 492, 139, 487, 173,
	1071, 836, 503, 59, 61, 869, 54, 1, 1113, 871,
	681, 680, 638, 637, 939, 630, 614, 613, 886, 307,
	311, 311, 629, 847, 596, 644, 597, 643, 181, 642,
	924, 74, 927, 905, 903, 640, 837, 656, 1026, 1023,
	620, 619, 618, 941, 617, 616, 645, 646, 641, 917,
	766, 441, 442, 928, 440, 444, 925, 443, 439, 175,
	936, 929, 930, 1062, 1066, 74, 888, 139, 69, 857,
	686, 537, 786, 907, 180, 311, 430, 181, 800, 576,
	894, 411, 1088, 386, 1049, 904, 559, 775, 364, 719,
	946, 947, 375, 372, 498, 374, 955, 956, 373, 582,
	926, 74, 588, 511, 362, 964, 74, 356, 1105, 1001,
	481, 329, 966, 891, 125, 421, 181, 1054, 181, 1052,
	764, 137, 977, 973, 1000, 914, 139, 486, 972, 967,
	976, 992, 989, 74, 74, 1046, 884, 797, 766, 975,
	885, 990, 74, 1015, 997, 1010, 1011, 172, 996, 1117,
	1002, 896, 897, 898, 181, 586, 902, 1006, 1008, 25,
	58, 908, 169, 909, 910, 911, 912, 1016, 14, 21,
	958, 1012, 15, 13, 12, 29, 10, 9, 8, 7,
	6, 919, 920, 921, 5, 4, 160, 23, 2, 20,
	19, 18, 17, 16, 931, 11, 0, 0, 0, 0,
	0, 0, 994, 172, 172, 0, 0, 0, 1038, 0,
	0, 0, 0, 0, 139, 139, 0, 0, 0, 0,
	172, 0, 0, 0, 74, 1075, 797, 1072, 0, 74,
	0, 1003, 0, 0, 798, 172, 181, 1009, 1002, 0,
	0, 941, 0, 74, 1078, 0, 1073, 958, 0, 0,
	0, 0, 0, 0, 172, 181, 0, 172, 0, 977,
	1019, 0, 139, 139, 139, 139, 1083, 0, 0, 971,
	1092, 0, 1094, 139, 0, 1091, 139, 1093, 1102, 139,
	0, 0, 0, 0, 1109, 74, 1002, 1002, 1002, 1002,
	0, 1048, 596, 1110, 597, 0, 1004, 1112, 1035, 1036,
	1002, 1037, 768, 1121, 1039, 0, 1041, 1045, 0, 0,
	0, 0, 1013, 1014, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 798, 0, 50, 0, 0, 0, 958,
	1076, 543, 544, 545, 546, 547, 548, 0, 0, 0,
	0, 74, 1143, 0, 1142, 0, 0, 0, 0, 0,
	74, 74, 74, 181, 1150, 1151, 0, 0, 0, 1033,
	171, 1034, 1149, 1149, 1149, 0, 74, 1003, 1003, 1003,
	1003, 1158, 1043, 1044, 0, 0, 0, 0, 1160, 0,
	0, 1065, 0, 0, 0, 1120, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 476, 0, 0, 172,
	172, 172, 0, 0, 485, 0, 0, 0, 172, 172,
	0, 0, 0, 140, 0, 0, 321, 322, 1137, 1138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 341, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 1140, 1141, 0, 958, 1104, 349, 0,
	0, 0, 0, 141, 0, 144, 1111, 146, 147, 0,
	152, 153, 154, 155, 0, 0, 0, 423, 346, 0,
	426, 0, 0, 0, 0, 0, 726, 0, 0, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 968, 0, 1130, 0, 0, 0,
	1133, 0, 0, 0, 0, 0, 172, 0, 598, 600,
	0, 0, 0, 0, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 0, 0, 529, 0,
	0, 1154, 0, 1156, 1157, 0, 0, 326, 327, 0,
	332, 333, 334, 0, 336, 337, 338, 339, 340, 0,
	0, 0, 0, 0, 0, 0, 342, 0, 0, 344,
	0, 0, 0, 0, 348, 0, 0, 0, 172, 513,
	0, 516, 0, 0, 0, 172, 172, 530, 531, 532,
	533, 534, 535, 536, 172, 514, 515, 512, 518, 517,
	527, 528, 520, 521, 522, 523, 524, 525, 526, 519,
	0, 0, 529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 479, 480, 482, 0, 0, 0, 0, 0,
	0, 488, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 600, 0, 0, 763, 763, 0,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 763, 763, 763, 763, 517,
	527, 528, 520, 521, 522, 523, 524, 525, 526, 519,
	763, 447, 529, 598, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 0, 0, 529, 0,
	0, 0, 0, 0, 0, 459, 0, 878, 879, 880,
	464, 465, 466, 467, 468, 469, 470, 0, 471, 472,
	473, 474, 475, 460, 461, 462, 463, 445, 446, 593,
	0, 448, 0, 0, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 0, 0, 529, 0,
	0, 0, 0, 0, 0, 494, 0, 495, 0, 496,
	0, 499, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 0, 0, 0, 172, 0, 0, 710, 711,
	0, 0, 0, 0, 0, 0, 0, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 969, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 0, 600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 705, 706, 0, 0, 95, 712, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	98, 93, 0, 1031, 0, 0, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 763, 0, 0, 0, 0, 0, 600, 763, 0,
	0, 0, 854, 518, 517, 527, 528, 520, 521, 522,
	523, 524, 525, 526, 519, 0, 0, 529, 865, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 0, 77, 0, 0, 94,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 86, 0, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 172, 1069, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	855, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 866, 89, 0,
	0, 109, 110, 112, 111, 113, 0, 0, 0, 872,
	0, 0, 0, 0, 0, 172, 172, 172, 172, 0,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 172,
	0, 0, 1069, 960, 0, 598, 288, 273, 233, 291,
	209, 224, 303, 226, 227, 263, 194, 243, 95, 222,
	88, 0, 0, 289, 240, 0, 212, 187, 219, 188,
	210, 237, 82, 208, 275, 246, 225, 0, 297, 92,
	255, 0, 98, 93, 0, 0, 239, 278, 241, 272,
	232, 264, 201, 254, 292, 223, 260, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	257, 286, 221, 259, 262, 186, 256, 0, 190, 195,
	302, 284, 215, 216, 0, 0, 0, 0, 0, 0,
	0, 238, 242, 269, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 253, 0, 0, 0, 197,
	192, 236, 0, 0, 0, 200, 0, 214, 270, 0,
	0, 961, 279, 231, 107, 285, 229, 228, 293, 266,
	0, 276, 211, 220, 79, 218, 97, 261, 105, 76,
	282, 277, 251, 234, 235, 191, 0, 268, 81, 87,
	207, 258, 103, 104, 80, 108, 196, 299, 77, 184,
	298, 94, 183, 102, 283, 252, 248, 193, 281, 250,
	247, 90, 83, 0, 189, 0, 99, 290, 304, 206,
	280, 0, 0, 0, 0, 0, 101, 198, 86, 204,
	205, 202, 203, 244, 245, 294, 295, 296, 271, 199,
	0, 0, 274, 249, 75, 0, 91, 301, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 217, 300, 267,
	265, 287, 0, 84, 100, 0, 0, 0, 0, 0,
	178, 177, 185, 109, 110, 112, 111, 113, 288, 273,
	233, 291, 209, 224, 303, 226, 227, 263, 194, 243,
	95, 222, 88, 0, 0, 289, 240, 0, 212, 187,
	219, 188, 210, 237, 82, 208, 275, 246, 225, 0,
	297, 92, 255, 0, 98, 93, 0, 0, 239, 278,
	241, 272, 232, 264, 201, 254, 292, 223, 260, 53,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 257, 286, 221, 259, 262, 186, 256, 0,
	190, 195, 302, 284, 215, 216, 0, 0, 0, 0,
	0, 0, 0, 238, 242, 269, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 253, 0, 0,
	0, 197, 192, 236, 0, 0, 0, 200, 0, 214,
	270, 0, 0, 0, 279, 231, 107, 285, 229, 228,
	293, 266, 0, 276, 211, 220, 79, 218, 97, 261,
	105, 76, 282, 277, 251, 234, 235, 191, 0, 268,
	81, 87, 207, 258, 103, 104, 80, 108, 196, 299,
	77, 602, 298, 94, 603, 102, 283, 252, 248, 193,
	281, 250, 247, 90, 83, 0, 189, 0, 99, 290,
	304, 206, 280, 0, 0, 0, 0, 0, 101, 198,
	86, 204, 205, 202, 203, 244, 245, 294, 295, 296,
	271, 199, 0, 0, 274, 249, 75, 0, 91, 301,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 217,
	300, 267, 265, 287, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 0, 109, 110, 112, 111, 113,
	288, 273, 233, 291, 209, 224, 303, 226, 227, 263,
	194, 243, 95, 222, 88, 0, 0, 289, 240, 0,
	212, 187, 219, 188, 210, 237, 82, 208, 275, 246,
	225, 0, 297, 92, 255, 0, 98, 93, 0, 0,
	239, 278, 241, 272, 232, 264, 201, 254, 292, 223,
	260, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 257, 286, 221, 259, 262, 186,
	256, 0, 190, 195, 302, 284, 215, 216, 0, 0,
	0, 0, 0, 0, 0, 238, 242, 269, 230, 0,
	0, 0, 0, 0, 0, 1082, 0, 213, 0, 253,
	0, 0, 0, 197, 192, 236, 0, 0, 0, 200,
	0, 214, 270, 0, 0, 0, 279, 231, 107, 285,
	229, 228, 293, 266, 0, 276, 211, 220, 79, 218,
	97, 261, 105, 76, 282, 277, 251, 234, 235, 191,
	0, 268, 81, 87, 207, 258, 103, 104, 80, 108,
	196, 299, 77, 602, 298, 94, 603, 102, 283, 252,
	248, 193, 281, 250, 247, 90, 83, 0, 189, 0,
	99, 290, 304, 206, 280, 0, 0, 0, 0, 0,
	101, 198, 86, 204, 205, 202, 203, 244, 245, 294,
	295, 296, 271, 199, 0, 0, 274, 249, 75, 0,
	91, 301, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 217, 300, 267, 265, 287, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 288, 273, 233, 291, 209, 224, 303, 226,
	227, 263, 194, 243, 95, 222, 88, 0, 0, 289,
	240, 0, 212, 187, 219, 188, 210, 237, 82, 208,
	275, 246, 225, 0, 297, 92, 255, 0, 98, 93,
	0, 0, 239, 278, 241, 272, 232, 264, 201, 254,
	292, 223, 260, 0, 0, 0, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 257, 286, 221, 259,
	262, 186, 256, 0, 190, 195, 302, 284, 215, 216,
	0, 0, 0, 0, 0, 0, 0, 238, 242, 269,
	230, 0, 0, 0, 0, 0, 0, 974, 0, 213,
	0, 253, 0, 0, 0, 197, 192, 236, 0, 0,
	0, 200, 0, 214, 270, 0, 0, 0, 279, 231,
	107, 285, 229, 228, 293, 266, 0, 276, 211, 220,
	79, 218, 97, 261, 105, 76, 282, 277, 251, 234,
	235, 191, 0, 268, 81, 87, 207, 258, 103, 104,
	80, 108, 196, 299, 77, 602, 298, 94, 603, 102,
	283, 252, 248, 193, 281, 250, 247, 90, 83, 0,
	189, 0, 99, 290, 304, 206, 280, 0, 0, 0,
	0, 0, 101, 198, 86, 204, 205, 202, 203, 244,
	245, 294, 295, 296, 271, 199, 0, 0, 274, 249,
	75, 0, 91, 301, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 217, 300, 267, 265, 287, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 288, 273, 233, 291, 209, 224,
	303, 226, 227, 263, 194, 243, 95, 222, 88, 0,
	0, 289, 240, 0, 212, 187, 219, 188, 210, 237,
	82, 208, 275, 246, 225, 0, 297, 92, 255, 0,
	98, 93, 0, 0, 239, 278, 241, 272, 232, 264,
	201, 254, 292, 223, 260, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 257, 286,
	221, 259, 262, 186, 256, 0, 190, 195, 302, 284,
	215, 216, 0, 0, 0, 0, 0, 0, 0, 238,
	242, 269, 230, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 0, 253, 0, 0, 0, 197, 192, 236,
	0, 0, 0, 200, 0, 214, 270, 0, 0, 0,
	279, 231, 107, 285, 229, 228, 293, 266, 0, 276,
	211, 220, 79, 218, 97, 261, 105, 76, 282, 277,
	251, 234, 235, 191, 0, 268, 81, 87, 207, 258,
	103, 104, 80, 108, 196, 299, 77, 184, 298, 94,
	183, 102, 283, 252, 248, 193, 281, 250, 247, 90,
	83, 0, 189, 0, 99, 290, 304, 206, 280, 0,
	0, 0, 0, 0, 101, 198, 86, 204, 205, 202,
	203, 244, 245, 294, 295, 296, 271, 199, 0, 0,
	274, 249, 75, 0, 91, 301, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 217, 300, 267, 265, 287,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	185, 109, 110, 112, 111, 113, 288, 273, 233, 291,
	209, 224, 303, 226, 227, 263, 194, 243, 95, 222,
	88, 0, 0, 289, 240, 0, 212, 187, 219, 188,
	210, 237, 82, 208, 275, 246, 225, 0, 297, 92,
	255, 0, 98, 93, 0, 0, 239, 278, 241, 272,
	232, 264, 201, 254, 292, 223, 260, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	257, 286, 221, 259, 262, 186, 256, 0, 190, 195,
	302, 284, 215, 216, 0, 0, 0, 0, 0, 0,
	0, 238, 242, 269, 230, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 0, 253, 0, 0, 0, 197,
	192, 236, 0, 0, 0, 200, 0, 214, 270, 0,
	0, 0, 279, 231, 107, 285, 229, 228, 293, 266,
	0, 276, 211, 220, 79, 218, 97, 261, 105, 76,
	282, 277, 251, 234, 235, 191, 0, 268, 81, 87,
	207, 258, 103, 104, 80, 108, 196, 299, 77, 602,
	298, 94, 603, 102, 283, 252, 248, 193, 281, 250,
	247, 90, 83, 0, 189, 0, 99, 290, 304, 206,
	280, 0, 0, 0, 0, 0, 101, 198, 86, 204,
	205, 202, 203, 244, 245, 294, 295, 296, 271, 199,
	0, 0, 274, 249, 75, 0, 91, 301, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 217, 300, 267,
	265, 287, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 288, 273,
	233, 291, 209, 224, 303, 226, 227, 263, 194, 243,
	95, 222, 88, 0, 0, 289, 240, 0, 212, 187,
	219, 188, 210, 237, 82, 208, 275, 246, 225, 0,
	297, 92, 255, 0, 98, 93, 0, 0, 239, 278,
	241, 272, 232, 264, 201, 254, 292, 223, 260, 0,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 257, 286, 221, 259, 262, 186, 256, 0,
	190, 195, 302, 284, 215, 216, 0, 0, 0, 0,
	0, 0, 0, 238, 242, 269, 230, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 253, 0, 0,
	0, 197, 192, 236, 0, 0, 0, 200, 0, 214,
	270, 0, 0, 0, 279, 231, 107, 285, 229, 228,
	293, 266, 0, 276, 211, 220, 79, 218, 97, 261,
	105, 76, 282, 277, 251, 234, 235, 191, 0, 268,
	81, 87, 207, 258, 103, 104, 80, 108, 196, 299,
	77, 602, 298, 94, 603, 102, 283, 252, 248, 193,
	281, 250, 247, 90, 83, 0, 189, 0, 99, 290,
	304, 206, 280, 0, 0, 0, 0, 0, 101, 198,
	86, 204, 205, 202, 203, 244, 245, 294, 295, 296,
	271, 199, 0, 0, 274, 249, 75, 0, 91, 301,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 217,
	300, 267, 265, 287, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 0, 109, 110, 112, 111, 113,
	288, 273, 233, 291, 209, 224, 303, 226, 227, 263,
	194, 243, 95, 222, 88, 0, 0, 289, 240, 0,
	212, 187, 219, 188, 210, 237, 82, 208, 275, 246,
	225, 0, 297, 92, 255, 0, 98, 93, 0, 0,
	239, 278, 241, 272, 232, 264, 201, 254, 292, 223,
	260, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 257, 286, 221, 259, 262, 186,
	256, 0, 190, 195, 302, 284, 215, 216, 0, 0,
	0, 0, 0, 0, 0, 238, 242, 269, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 253,
	0, 0, 0, 197, 192, 236, 0, 0, 0, 200,
	0, 214, 270, 0, 0, 0, 279, 231, 107, 285,
	229, 228, 293, 266, 0, 276, 211, 220, 79, 218,
	97, 261, 105, 76, 282, 277, 251, 234, 235, 191,
	0, 268, 81, 87, 207, 258, 103, 104, 80, 108,
	196, 299, 77, 602, 298, 94, 603, 102, 283, 252,
	248, 193, 281, 250, 247, 90, 83, 0, 189, 0,
	99, 290, 304, 206, 280, 0, 0, 0, 0, 0,
	101, 198, 86, 204, 205, 202, 203, 244, 245, 294,
	295, 296, 271, 199, 0, 0, 274, 249, 75, 0,
	91, 301, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 217, 300, 267, 265, 287, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 95, 0, 88, 0, 0, 0, 0, 0,
	758, 0, 360, 0, 0, 0, 82, 359, 0, 0,
	0, 0, 396, 92, 0, 0, 98, 93, 0, 0,
	0, 0, 389, 390, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 409, 377, 376, 378, 379, 380,
	381, 0, 0, 78, 382, 383, 384, 0, 0, 0,
	357, 370, 0, 395, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 367, 368, 761, 0, 0, 0, 407,
	0, 369, 0, 0, 366, 371, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 405, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 397, 406, 403, 404, 401, 402, 400,
	399, 398, 408, 391, 392, 394, 0, 393, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 95, 89, 88, 0, 109, 110, 112,
	111, 113, 0, 360, 0, 0, 0, 82, 359, 0,
	0, 0, 0, 396, 92, 0, 0, 98, 93, 0,
	0, 0, 0, 389, 390, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 409, 377, 376, 378, 379,
	380, 381, 0, 0, 78, 382, 383, 384, 0, 0,
	0, 357, 370, 0, 395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 761, 0, 0, 0,
	407, 0, 369, 0, 0, 366, 371, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 405, 0, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 397, 406, 403, 404, 401, 402,
	400, 399, 398, 408, 391, 392, 394, 0, 393, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 95, 89, 88, 0, 109, 110,
	112, 111, 113, 0, 360, 0, 0, 0, 82, 359,
	0, 0, 0, 0, 396, 92, 0, 0, 98, 93,
	0, 0, 0, 0, 389, 390, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 351, 409, 377, 376, 378,
	379, 380, 381, 0, 0, 78, 382, 383, 384, 0,
	0, 0, 357, 370, 0, 395, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 367, 368, 0, 0, 0,
	0, 407, 0, 369, 0, 0, 366, 371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 405, 0, 0, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 87, 0, 0, 103, 104,
	80, 108, 0, 0, 77, 0, 0, 94, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 90, 83, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 86, 397, 406, 403, 404, 401,
	402, 400, 399, 398, 408, 391, 392, 394, 0, 393,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 95, 89, 88, 0, 109,
	110, 112, 111, 113, 0, 360, 0, 0, 0, 82,
	359, 0, 0, 0, 0, 396, 92, 0, 0, 98,
	93, 0, 0, 0, 0, 389, 390, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 409, 377, 376,
	378, 379, 380, 381, 0, 0, 78, 382, 383, 384,
	0, 0, 0, 357, 370, 0, 395, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 0, 0,
	0, 0, 407, 0, 369, 0, 0, 366, 371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 405, 0, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 87, 0, 0, 103,
	104, 80, 108, 0, 0, 77, 0, 0, 94, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 90, 83,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 86, 397, 406, 403, 404,
	401, 402, 400, 399, 398, 408, 391, 392, 394, 0,
	393, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 95, 89, 88, 0,
	109, 110, 112, 111, 113, 0, 360, 0, 0, 0,
	82, 359, 0, 0, 0, 0, 396, 92, 0, 0,
	98, 93, 0, 0, 0, 0, 389, 390, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 409, 377,
	376, 378, 379, 380, 381, 0, 0, 78, 382, 383,
	384, 0, 0, 0, 357, 370, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 407, 0, 369, 0, 0, 366, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 405, 0, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 0, 77, 0, 0, 94,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 86, 397, 406, 403,
	404, 401, 402, 400, 399, 398, 408, 391, 392, 394,
	0, 393, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 88, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	82, 109, 110, 112, 111, 113, 396, 92, 0, 0,
	98, 93, 0, 0, 0, 0, 389, 390, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 409, 377,
	376, 378, 379, 380, 381, 0, 0, 78, 382, 383,
	384, 0, 0, 0, 0, 370, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 367, 368, 0,
	0, 0, 0, 407, 0, 369, 0, 0, 366, 371,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 405, 0, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 0, 77, 0, 95, 94,
	634, 102, 0, 632, 636, 0, 0, 0, 0, 90,
	83, 0, 82, 0, 99, 0, 0, 0, 0, 92,
	0, 0, 98, 93, 101, 0, 86, 397, 406, 403,
	404, 401, 402, 400, 399, 398, 408, 391, 392, 394,
	310, 393, 75, 0, 91, 0, 96, 85, 106, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 635, 107, 0, 0, 0, 0, 631,
	0, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 0, 0, 95, 0, 88, 81, 87,
	71, 0, 103, 104, 80, 108, 0, 0, 77, 82,
	0, 94, 0, 102, 0, 0, 92, 0, 0, 98,
	93, 90, 83, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 73, 86, 0,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 0, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 70,
	0, 107, 0, 95, 0, 88, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 82, 0, 0,
	0, 0, 0, 0, 92, 81, 87, 98, 93, 103,
	104, 80, 108, 0, 0, 77, 0, 0, 94, 0,
	102, 0, 53, 0, 0, 138, 0, 0, 90, 83,
	0, 0, 0, 99, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 86, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 107,
	109, 110, 112, 111, 113, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 90, 83, 0, 0,
	95, 99, 88, 0, 0, 0, 0, 0, 0, 1068,
	0, 101, 0, 86, 82, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 98, 93, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 138, 0, 1070, 0, 0, 0, 84, 100,
	0, 78, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 95, 0,
	88, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 82, 0, 0, 0, 0, 0, 0, 92,
	81, 87, 98, 93, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 53, 0, 0,
	73, 0, 0, 90, 83, 0, 0, 0, 99, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 107, 109, 110, 112, 111, 113,
	0, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 0, 0, 95, 0, 88, 81, 87,
	0, 0, 103, 104, 80, 108, 0, 0, 77, 82,
	0, 94, 0, 102, 0, 0, 92, 0, 0, 98,
	93, 90, 83, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 73, 86, 0,
	584, 0, 0, 585, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 95, 0, 88, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 82, 433, 0,
	0, 0, 0, 0, 92, 81, 87, 98, 93, 103,
	104, 80, 108, 0, 0, 77, 0, 0, 94, 0,
	102, 0, 0, 0, 0, 73, 0, 432, 90, 83,
	0, 0, 0, 99, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 107,
	109, 110, 112, 111, 113, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 95, 0,
	88, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 82, 77, 0, 0, 94, 0, 102, 92,
	0, 0, 98, 93, 0, 0, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 101, 1070, 86, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 95, 0, 88, 0,
	0, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	82, 0, 0, 0, 0, 0, 0, 92, 81, 87,
	98, 93, 103, 104, 80, 108, 0, 0, 77, 0,
	0, 94, 0, 102, 0, 53, 0, 0, 138, 0,
	0, 90, 83, 0, 0, 0, 99, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 107, 109, 110, 112, 111, 113, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 95, 0, 88, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 82, 77, 0, 0, 94,
	0, 102, 92, 0, 0, 98, 93, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 101, 892, 86, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 95, 0, 88, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 422,
	82, 77, 0, 0, 94, 0, 102, 92, 0, 0,
	98, 93, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 101,
	0, 86, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 95, 0, 88, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 82, 0,
	0, 0, 0, 0, 0, 92, 81, 87, 98, 93,
	103, 104, 80, 108, 0, 0, 77, 0, 0, 94,
	0, 102, 0, 0, 0, 0, 73, 0, 0, 90,
	83, 0, 0, 0, 99, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	107, 109, 110, 112, 111, 113, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 0, 0, 0, 95,
	0, 88, 0, 0, 81, 87, 0, 0, 103, 104,
	80, 108, 0, 82, 77, 0, 0, 94, 0, 102,
	92, 0, 0, 98, 93, 0, 0, 90, 83, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 409, 101, 0, 86, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 95, 0, 88,
	0, 0, 0, 0, 0, 79, 0, 97, 0, 105,
	76, 82, 0, 0, 0, 0, 0, 0, 92, 81,
	87, 98, 93, 103, 104, 80, 108, 0, 0, 77,
	0, 0, 94, 0, 102, 0, 0, 0, 0, 138,
	0, 0, 90, 83, 0, 0, 0, 99, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 91, 0, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 107, 109, 110, 112, 111, 113, 0,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 0,
	0, 0, 95, 0, 88, 0, 0, 81, 87, 0,
	0, 103, 104, 80, 108, 0, 82, 77, 0, 0,
	94, 0, 102, 92, 0, 0, 98, 93, 0, 0,
	90, 83, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 101, 0, 86, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 91, 0, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113,
}
var yyPact = [...]int{

	134, -1000, -174, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 765, 788, -1000, -1000, -1000, -1000, -1000, 558,
	5098, 22, -23, 65, 56, 494, 54, 6530, -1000, -1000,
	27, -1000, -161, -1000, -1000, -164, -1000, -1000, -1000, -1000,
	591, -1000, -1000, -1000, -1000, -1000, 743, 763, 626, 704,
	640, -1000, 22, 6530, 779, 1941, -136, 6655, 20, 37,
	20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 52, -1000, 12, 410, 12, 6530,
	6530, -71, -21, -1000, -1000, -83, -1000, -1000, -1000, -78,
	-1000, -1000, -1000, -1000, -1000, -1000, 6530, -1000, -1000, -1000,
	-1000, -1000, -1000, 326, -1000, -1000, -1000, -1000, 540, 540,
	-1000, 6530, -1000, -1000, -1000, -1000, 415, 685, 4629, 4629,
	765, -1000, 591, -1000, -1000, -1000, 676, -1000, -1000, 260,
	6189, 690, 103, 6530, 520, 2869, -1000, -1000, -1000, 200,
	5706, -1000, -1000, -1000, 689, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 747, 746, 501, -1000, 1352,
	-1000, -1000, 6530, 236, 408, 6530, 6530, 6530, 699, 593,
	6530, -1000, -1000, 778, 6530, 6530, -1000, -1000, 775, 776,
	-1000, -1000, -1000, -1000, -1000, 775, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4629, -1000, -1000, 127,
	-1000, -1000, -1000, 784, 147, 360, -1000, 4629, 1284, 540,
	540, -1000, -1000, 98, -1000, -1000, 4829, 4829, 4829, 4829,
	4829, 4829, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 540, 102, -1000, 4418, 540,
	540, 540, 540, 540, 540, 4629, 540, 540, 540, 540,
	540, 540, 540, 540, 540, 540, 540, 540, 540, -1000,
	-1000, 521, -1000, 313, 743, 415, 640, 5598, 603, -1000,
	-1000, 583, 6530, -1000, 6422, 3565, 773, 2869, 520, 4629,
	107, -1000, -1000, -1000, -1000, -137, 540, 59, 4971, 269,
	-61, -1000, -1000, 555, -1000, 555, 555, 555, 555, -32,
	-32, -32, -32, -1000, -1000, -1000, -1000, -1000, 584, -1000,
	555, 555, 555, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 581, 581, 581, 556, 556, 677, 691, 589, -1000,
	170, 519, -1000, -1000, 6530, -1000, 743, -74, -1000, -1000,
	285, 6530, 6530, -1000, -1000, -1000, -1000, 493, 224, -1000,
	6530, -1000, -1000, -1000, 649, 4629, 4629, 325, 4629, 4629,
	182, 4829, 263, 243, 4829, 4829, 4829, 4829, 4829, 4829,
	4829, 4829, 4829, 4829, 4829, 4829, 4829, 4829, 4829, 319,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 405, -1000,
	591, 483, 483, 122, 122, 122, 122, 122, 1679, 3785,
	3333, 415, 4418, 3996, 3996, 4629, 4629, 3996, 705, 230,
	224, 6297, -1000, 415, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3996, 3996, 3996, 3996, 4629, -1000, -1000, -1000, 685,
	-1000, 705, 764, -1000, 657, 656, 3996, -1000, 588, 6422,
	540, -1000, 5471, -1000, 549, -1000, 194, -1000, 101, -1000,
	-1000, -1000, -1000, -1000, 765, 4629, -1000, 224, -1000, 390,
	540, 540, 6655, -1000, 59, -1000, -1000, -1000, -1000, -1000,
	-1000, 177, 177, -36, -1000, -1000, 177, -1000, -1000, -1000,
	578, 716, 162, 386, 137, -1000, -1000, -1000, 269, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 246, 55,
	-1000, 714, -1000, 712, 364, 783, -63, -1000, -1000, 321,
	-32, -32, -1000, -1000, 107, 688, 107, 107, 107, 363,
	-1000, -1000, -1000, -1000, 320, -1000, -1000, -1000, 298, -1000,
	-1000, 677, -1000, 21, -1000, 6530, -1000, 139, 192, 26,
	7, 6, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6530, -1000, -1000, 361, -1000, -1000, -1000, 359, 4629,
	-1000, 285, -1000, 4629, -1000, -1000, 643, 182, 183, -1000,
	-1000, 301, -1000, -1000, 224, 224, 1430, -1000, -1000, -1000,
	-1000, 263, 4829, 4829, 4829, 647, 1430, 1370, 668, 1354,
	122, 249, 249, 131, 131, 131, 131, 131, 354, 354,
	-1000, -1000, -1000, 415, -1000, -1000, -1000, 415, 3996, 518,
	-1000, -1000, 71, 96, 540, 94, -1000, -1000, 415, 467,
	467, 126, 373, 467, 3996, 229, -1000, 4629, 415, -1000,
	467, 415, 467, 467, -1000, -1000, 6530, -1000, -1000, -1000,
	-1000, 516, -1000, 694, 509, 484, -1000, -1000, 4207, 415,
	481, 92, 765, 6422, 4629, 3333, 743, 224, -1000, 6655,
	6655, 415, -1000, 341, -1000, 314, 177, -1000, 687, 283,
	6297, -1000, 379, -1000, -1000, 377, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -87, -1000, -1000, 431,
	107, 107, -1000, 158, -1000, -1000, -1000, 477, -1000, 515,
	473, -1000, 177, 177, 2173, -1000, 6530, -1000, -1000, -1000,
	372, -35, 558, 370, 6655, -1000, -1000, -1000, -1000, 224,
	-1000, 224, -1000, -1000, -1000, -1000, -1000, -1000, 647, 1430,
	1210, -1000, 4829, 4829, -1000, -1000, 467, 3996, -1000, -1000,
	6064, -1000, -1000, 2637, 3996, 3101, -1000, -1000, -1000, 214,
	319, 214, -110, 508, 220, -1000, 4629, 266, -1000, -1000,
	-1000, -1000, -1000, -1000, 773, 5939, 708, -1000, 540, -1000,
	-1000, 639, 6297, 6297, 743, -1000, 224, -1000, -1000, 415,
	415, 2173, -1000, -1000, -1000, -1000, 314, -1000, -1000, 461,
	-1000, 555, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 340, 270, -1000, 268, 409, 203, -1000, -1000, -1000,
	-1000, -1000, -1000, 672, -1000, -1000, -1000, -1000, 4829, 1430,
	1430, -1000, -1000, -1000, -1000, 90, 415, -1000, 415, 555,
	555, -1000, 555, 556, -1000, 555, -10, 555, -12, 415,
	415, 540, -107, -1000, 224, 4629, 771, 511, 617, -1000,
	-1000, -1000, 701, 5206, 5363, 782, -1000, 540, -1000, 591,
	80, -1000, -1000, 2173, 540, -1000, -1000, -119, 6297, -1000,
	-1000, 426, 417, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	362, 1430, 2405, -1000, -1000, -1000, 69, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4829, 415, 330, 224, 767,
	745, 5939, 5939, 5939, 5939, -1000, 622, 614, -1000, 607,
	605, 652, 6530, -1000, 429, 5206, 95, -1000, 5831, -1000,
	-1000, 6422, 484, 415, 6297, -1000, -130, 737, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 311, -1000, -1000, -1000, 4629,
	4629, 617, 485, 535, -1000, -1000, -1000, -1000, 608, -1000,
	606, -1000, -1000, -1000, -1000, -1000, 33, 32, 29, -1000,
	463, -1000, -1000, 425, -1000, 322, 732, 415, 43, -123,
	224, 459, 4629, 4629, -1000, -1000, 540, 540, 540, -130,
	2173, 651, -1000, -1000, 636, -113, -127, 224, 224, 6297,
	6297, 6297, -1000, -1000, 144, -1000, 631, -1000, 422, -1000,
	422, 422, 540, -120, -1000, 6297, -1000, -1000, -1000, -124,
	-1000, -135, -1000,
}
var yyPgo = [...]int{

	0, 985, 983, 982, 981, 980, 979, 978, 26, 477,
	977, 976, 975, 974, 970, 969, 968, 967, 966, 965,
	964, 963, 962, 959, 958, 169, 952, 950, 949, 58,
	945, 61, 939, 925, 917, 40, 49, 25, 30, 85,
	915, 18, 13, 7, 914, 909, 6, 907, 1086, 905,
	62, 904, 901, 46, 900, 899, 898, 3, 23, 897,
	894, 893, 892, 67, 754, 889, 888, 885, 883, 882,
	879, 45, 2, 9, 8, 28, 878, 24, 10, 877,
	47, 876, 875, 874, 872, 17, 871, 57, 869, 36,
	55, 868, 44, 11, 42, 119, 60, 866, 864, 862,
	364, 861, 180, 322, 860, 50, 859, 858, 34, 0,
	12, 16, 22, 856, 41, 873, 35, 5, 854, 853,
	1203, 1, 21, 849, 29, 848, 847, 845, 844, 842,
	841, 108, 838, 837, 836, 835, 834, 832, 831, 830,
	19, 39, 20, 829, 48, 33, 51, 828, 827, 826,
	59, 14, 825, 819, 817, 815, 813, 37, 812, 54,
	32, 809, 807, 806, 56, 805, 15, 804, 803, 802,
	53, 801, 800, 52, 4, 798, 797, 796, 105, 172,
	794, 226,
}
var yyR1 = [...]int{

	0, 176, 177, 177, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 123,
	123, 175, 175, 174, 16, 16, 16, 16, 16, 16,
	171, 171, 172, 172, 173, 173, 146, 146, 145, 145,
	144, 144, 143, 143, 147, 147, 147, 19, 160, 162,
	162, 163, 163, 164, 164, 164, 164, 164, 139, 142,
	142, 135, 136, 137, 138, 138, 161, 161, 161, 157,
	114, 114, 125, 125, 125, 168, 168, 169, 169, 170,
	170, 170, 170, 170, 170, 170, 128, 128, 126, 126,
	126, 126, 126, 126, 126, 127, 127, 127, 127, 127,
	129, 129, 129, 129, 129, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 156,
	156, 131, 131, 150, 150, 151, 151, 151, 148, 148,
	149, 149, 152, 152, 132, 132, 132, 132, 132, 133,
	153, 140, 140, 140, 141, 141, 154, 154, 155, 155,
	134, 158, 158, 165, 165, 165, 165, 165, 159, 159,
	167, 167, 166, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 54, 54, 1, 20, 2, 3,
	4, 4, 5, 5, 5, 5, 6, 6, 6, 6,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 34, 34, 50, 50,
	51, 51, 52, 52, 53, 53, 53, 24, 22, 23,
	23, 23, 23, 180, 25, 26, 26, 27, 27, 27,
	31, 31, 31, 29, 29, 30, 30, 37, 37, 36,
	36, 38, 38, 38, 38, 113, 113, 113, 112, 112,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 55,
	44, 44, 44, 44, 119, 119, 118, 118, 118, 117,
	117, 45, 45, 45, 45, 46, 46, 46, 46, 47,
	47, 49, 49, 48, 48, 56, 56, 56, 56, 57,
	57, 58, 58, 39, 39, 39, 39, 39, 39, 39,
	101, 101, 60, 60, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 70, 70, 70, 70, 70, 70,
	61, 61, 61, 61, 61, 61, 61, 35, 35, 71,
	71, 71, 77, 72, 72, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 68, 68, 68, 66, 66,
	66, 66, 66, 66, 66, 66, 66, 67, 67, 67,
	67, 67, 67, 67, 67, 181, 181, 69, 69, 69,
	69, 32, 32, 32, 32, 32, 122, 122, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 81, 81, 33, 33, 79, 79, 80, 82, 82,
	78, 78, 78, 63, 63, 63, 63, 63, 63, 63,
	65, 65, 65, 83, 83, 84, 84, 85, 85, 86,
	86, 87, 88, 88, 88, 89, 89, 89, 89, 90,
	90, 90, 62, 62, 62, 62, 62, 62, 91, 91,
	91, 91, 92, 92, 73, 73, 75, 75, 74, 76,
	93, 93, 94, 95, 95, 96, 96, 98, 98, 98,
	97, 97, 97, 99, 99, 102, 102, 103, 103, 100,
	100, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 105, 105, 105, 106, 106, 107, 107, 107, 110,
	110, 111, 111, 115, 115, 116, 116, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 178, 179, 120,
	121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 2, 9, 12, 8, 5, 7,
	0, 1, 1, 2, 4, 4, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 1,
	1, 3, 3, 4, 1, 1, 1, 3, 3, 3,
	1, 1, 3, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 1, 2, 1,
	2, 4, 7, 2, 3, 2, 2, 3, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 5, 4, 1, 3, 3, 3, 2, 2,
	3, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	6, 5, 5, 3, 3, 5, 6, 3, 3, 3,
	5, 3, 3, 3, 3, 3, 0, 3, 0, 2,
	0, 1, 1, 1, 0, 2, 2, 4, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -176, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 214, 132,
	221, 224, 225, 228, 227, 232, 29, 131, 135, 136,
	-178, 7, 197, 56, -177, 237, -85, 14, -27, 5,
	-25, -180, -25, -25, -25, -25, -160, 56, 189, -107,
	121, 22, -110, 59, -109, 203, 138, 157, 68, 133,
	153, 147, 31, 171, 222, 208, 187, 148, 19, 229,
	170, 205, 38, 42, 160, 17, 207, 135, 41, 175,
	223, 185, 162, 151, 152, 137, 209, 123, 154, 232,
	233, 235, 234, 236, -100, 125, 121, 122, 189, 121,
	121, 183, 114, 178, 216, -51, 218, 219, 185, 121,
	220, 181, 217, 180, 59, 35, 121, -115, 59, -109,
	-120, -120, 62, 207, -120, 226, -120, -120, 233, 235,
	234, 236, -120, -120, -120, -120, -8, -89, 16, 15,
	-11, -9, -178, 6, 24, 25, -31, 43, 44, -26,
	-100, -48, -115, 10, -95, -123, -96, 230, 229, -111,
	-98, -110, -108, 161, 158, 231, 74, 26, 28, 173,
	77, 144, 109, 166, 15, 78, 155, 108, 186, 198,
	114, 51, 190, 191, 188, 189, 178, 149, 32, 9,
	29, 131, 25, 102, 116, 81, 82, 216, 134, 27,
	132, 71, 18, 54, 10, 35, 12, 13, 126, 125,
	93, 122, 49, 7, 142, 143, 110, 30, 90, 45,
	23, 47, 91, 16, 192, 193, 34, 169, 165, 202,
	168, 141, 164, 104, 52, 39, 75, 69, 150, 72,
	55, 136, 73, 14, 50, 219, 128, 218, 146, 92,
	117, 197, 48, 6, 201, 33, 130, 140, 46, 121,
	179, 167, 139, 163, 80, 124, 70, 220, 5, 22,
	176, 8, 53, 127, 194, 195, 196, 37, 159, 156,
	217, 206, 79, 11, 177, 210, 215, -161, -157, -114,
	59, -109, -103, 126, 122, -103, 121, -102, 126, 59,
	-102, -48, -48, 182, 121, 189, -120, -120, 179, -52,
	186, 187, -120, -120, -120, 185, -120, -120, -120, -120,
	-120, -48, -120, 62, -120, -74, -178, -74, -120, -48,
	-179, 58, -90, 18, 34, -39, -59, 75, -64, 32,
	27, -63, -60, -78, -76, -77, 109, 98, 99, 106,
	76, 110, -68, -66, -67, -69, 61, 60, 62, 63,
	64, 65, 69, 70, 71, -110, -115, -74, -178, 47,
	48, 198, 199, 202, 200, 78, 37, 188, 196, 195,
	194, 192, 193, 190, 191, 126, 189, 104, 197, 59,
	-109, -86, -87, -39, -85, -8, -25, 39, -29, 25,
	67, -49, 30, -48, 33, 111, -48, 57, -95, 83,
	-97, -110, 61, 32, 33, 15, 15, 58, 57, -125,
	-128, -130, -129, -126, -127, 155, 156, 109, 159, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 133,
	151, 152, 153, 154, 138, 139, 140, 141, 142, 143,
	144, 146, 147, 148, 149, 150, -115, 75, 59, -48,
	-48, -54, -48, 27, 55, -115, -34, 10, -48, -48,
	-50, 10, 10, -50, -120, -120, -120, -72, -39, -120,
	-105, 124, 26, 8, 93, 74, 73, 90, 57, 17,
	-39, -61, 93, 75, 91, 92, 77, 95, 94, 105,
	98, 99, 100, 101, 102, 103, 104, 96, 97, 108,
	83, 84, 85, 86, 87, 88, 89, -101, -178, -77,
	-178, 112, 113, -64, -64, -64, -64, -64, -64, -178,
	111, -8, -178, -178, -178, -178, -178, -178, -178, -81,
	-39, -178, -181, -178, -181, -181, -181, -181, -181, -181,
	-181, -178, -178, -178, -178, 57, -88, 28, 29, -89,
	-179, -31, -65, -110, 62, 65, -30, 46, -62, 33,
	37, -8, -178, -48, -93, -94, -78, -110, -115, -116,
	-115, -108, 158, 161, -58, 11, -96, -39, -141, 108,
	212, 213, -178, -162, -163, -164, -135, -136, -137, -138,
	-139, 68, 222, -146, 229, 223, 173, 32, -157, -158,
	-165, 128, 22, -159, 19, 122, 23, -168, -169, -170,
	-152, -132, -153, -154, -155, -134, -133, 69, 75, 32,
	173, 128, 23, 22, 68, 55, -148, 176, -131, 56,
	-131, -131, -131, -131, -140, 158, -140, -140, -140, 56,
	-131, -131, -131, -150, 56, -150, -150, -151, 56, -151,
	-171, -172, -173, -146, 27, 55, -104, 117, 222, 198,
	119, 116, 120, 115, 173, 158, 68, 32, 14, 209,
	59, 57, -48, -89, 184, -120, -120, -53, 91, 11,
	-48, -48, -120, 57, -179, -48, 41, -39, -39, -70,
	69, 75, 70, 71, -39, -39, -64, -71, -74, -77,
	66, 93, 91, 92, 77, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-122, 59, 61, 59, -63, -63, -110, -37, 25, -36,
	-38, 100, -39, -115, -111, -116, -108, -179, -8, -36,
	-36, -39, -39, -36, -29, -79, -80, 79, -110, -179,
	-36, -37, -36, -36, -87, -90, -99, 18, 10, 37,
	37, -36, -92, 55, -93, -73, -75, -74, -178, -8,
	-91, -110, -58, 57, 83, 111, -85, -39, 59, -178,
	-178, -114, -164, -145, 83, -145, -144, 161, 158, -145,
	56, 23, -159, 59, 59, -159, -170, 69, 61, 62,
	63, 69, 188, 23, 23, 61, 8, -149, 177, 62,
	-140, -140, -141, 33, -141, -141, -141, -156, 61, 62,
	62, -173, 108, -144, -48, -120, -105, -106, 122, 23,
	83, 124, 129, 129, 129, -48, -120, 61, 61, -39,
	-53, -39, -120, 42, 69, 70, 71, -71, -64, -64,
	-64, -35, 134, 74, -179, -179, -36, 57, -113, -112,
	26, -110, 61, 111, -178, 111, -179, -179, -179, 57,
	127, 26, -179, -36, -82, -80, 81, -39, -179, -179,
	-179, -179, -179, -48, -40, 10, 31, -92, 57, -179,
	-179, -179, 57, 111, -85, -94, -39, -111, -89, -114,
	-114, -179, 61, -142, 59, 61, -145, 33, 62, -167,
	-166, -110, 59, 59, 188, 58, -141, -141, 59, 109,
	58, 57, 57, 58, 57, -145, -145, -121, -178, -111,
	-48, -120, 59, 158, -160, 59, -157, -35, 74, -64,
	-64, -179, -38, -112, 100, -116, -37, -111, -124, 109,
	155, 133, 153, 149, 170, 160, 175, 151, 176, -122,
	-124, 203, -85, 82, -39, 80, -58, -41, -42, -43,
	-44, -55, -77, -178, -48, 23, -75, 37, -8, -178,
	-110, -110, -89, -179, -179, -121, -142, 58, 57, -131,
	61, 62, 62, -143, 59, 32, -147, 59, 109, 32,
	33, -64, 111, -179, -179, -131, -131, -131, -151, -131,
	143, -131, 143, -179, -179, -178, -33, 201, -39, -83,
	12, 57, -45, -46, -47, 45, 49, 51, 46, 47,
	48, 52, -119, 26, -41, -178, -118, -117, 26, -115,
	61, 8, -73, -8, 111, -121, -178, 206, -166, 58,
	58, 59, 100, -140, 59, -64, -179, 61, -84, 13,
	15, -42, -43, -42, -43, 45, 45, 45, 50, 45,
	50, 45, -46, -115, -179, -56, 53, 125, 54, -117,
	-93, -179, -110, -175, -174, 210, 20, -32, 93, 206,
	-39, -72, 55, 55, 45, 45, 122, 122, 122, 57,
	-179, 59, 21, -179, 204, 52, 207, -39, -39, -178,
	-178, -178, -174, -121, 37, 42, 205, 208, -57, -110,
	-57, -57, 93, 42, -179, 57, -179, -179, -74, 206,
	-110, 207, 208,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 457, 0, 243, 243, 243, 243, 243, 0,
	526, 509, 0, 0, 0, 230, 0, 0, 699, 699,
	0, 699, 0, 699, 699, 0, 699, 699, 699, 699,
	0, 33, 34, 697, 1, 3, 465, 0, 0, 247,
	250, 245, 509, 0, 0, 0, 44, 0, 507, 0,
	507, 527, 528, 529, 530, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 0, 510, 505, 0, 505, 0,
	0, 0, 0, 699, 699, 0, 699, 699, 699, 0,
	699, 699, 699, 699, 699, 231, 0, 238, 533, 534,
	198, 199, 699, 0, 202, 699, 204, 205, 0, 0,
	699, 0, 239, 240, 241, 242, 27, 469, 0, 0,
	457, 29, 0, 243, 248, 249, 253, 251, 252, 244,
	0, 0, 303, 0, 37, 0, 493, 39, -2, 0,
	0, 531, 532, -2, 548, 499, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 550, 551, 552,
	553, 554, 555, 556, 557, 558, 559, 560, 561, 562,
	563, 564, 565, 566, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 0, 0, 0, 86, 0,
	90, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 226, 0, 0, 213, 214, 228, 0,
	232, 233, 217, 218, 219, 228, 221, 222, 223, 224,
	225, 699, 200, 699, 203, 699, 0, 699, 208, 521,
	28, 698, 23, 0, 0, 466, 313, 0, 318, 320,
	0, 355, 356, 357, 358, 359, 0, 0, 0, 0,
	0, 0, 381, 382, 383, 384, 443, 444, 445, 446,
	447, 448, 449, 322, 323, 440, 0, 489, 0, 0,
	0, 0, 0, 0, 0, 431, 0, 405, 405, 405,
	405, 405, 405, 405, 405, 0, 0, 0, 0, -2,
	-2, 458, 459, 462, 465, 27, 250, 0, 255, 254,
	246, 0, 0, 302, 0, 0, 311, 0, 38, 0,
	164, 500, 501, 502, 498, 0, 0, -2, 0, 95,
	148, 93, 94, 141, 107, 141, 141, 141, 141, 161,
	161, 161, 161, 133, 134, 135, 136, 137, 0, 120,
	141, 141, 141, 124, 108, 109, 110, 111, 112, 113,
	114, 143, 143, 143, 145, 145, -2, 0, 0, 67,
	0, 191, 194, 506, 0, 193, 465, 0, 699, 699,
	234, 0, 0, 699, 237, 201, 206, 0, 353, 207,
	0, 522, 523, 470, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 342, 343, 344, 345, 346, 319, 0, 333,
	0, 0, 0, 375, 376, 377, 378, 379, 0, 257,
	0, 27, 0, 0, 0, 0, 0, 0, 253, 0,
	432, 0, 397, 0, 398, 399, 400, 401, 402, 403,
	404, 0, 257, 0, 0, 0, 461, 463, 464, 469,
	30, 253, 0, 450, 0, 0, 0, 256, 482, 0,
	0, -2, 0, 301, 311, 490, 0, 440, 0, 304,
	535, 536, 548, 549, 457, 0, 494, 495, 496, 0,
	0, 0, 0, 68, -2, 71, 73, 74, 75, 76,
	77, 58, 58, 0, 84, 85, 58, 57, 87, 88,
	0, 0, 0, 0, 671, 178, 179, 89, 96, 97,
	99, 100, 101, 102, 103, 104, 105, 152, 0, 0,
	160, 0, 167, 169, 0, 0, 150, 149, 106, 0,
	161, 161, 127, 128, 164, 0, 164, 164, 164, 0,
	121, 122, 123, 115, 0, 116, 117, 118, 0, 119,
	48, -2, 52, 0, 508, 0, 699, 521, 0, 518,
	0, 516, 0, 511, 512, 513, 514, 515, 517, 519,
	520, 0, 192, 699, 0, 211, 212, 215, 0, 0,
	229, 234, 220, 0, 488, 699, 0, 314, 315, 317,
	334, 0, 336, 338, 467, 468, 324, 325, 349, 350,
	351, 0, 0, 0, 0, 347, 329, 0, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 370, 371,
	374, 416, 417, 0, 372, 373, 380, 0, 0, 258,
	259, 261, 265, 0, 441, 0, -2, 352, 27, 0,
	0, 0, 0, 0, 0, 438, 435, 0, 0, 406,
	0, 0, 0, 0, 460, 24, 0, 503, 504, 451,
	452, 270, 31, 0, 482, 472, 484, 486, 0, 27,
	0, 478, 457, 0, 0, 0, 465, 312, 165, 0,
	0, 0, 72, 0, 59, 0, 58, 60, 0, 0,
	0, 173, 0, 175, 176, 0, 98, 153, 154, 155,
	156, 157, 158, 166, 168, 170, 0, 92, 151, 0,
	164, 164, 129, 0, 130, 131, 132, 0, 139, 0,
	0, 53, 58, 58, 700, 183, 0, 699, 524, 525,
	0, 0, 0, 0, 0, 195, 210, 227, 235, 236,
	216, 354, 209, 471, 335, 337, 339, 326, 347, 330,
	0, 327, 0, 0, 321, 385, 0, 0, 262, 266,
	0, 268, 269, 0, 257, 0, -2, 388, 389, 0,
	0, 0, 0, 457, 0, 436, 0, 0, 396, 407,
	408, 409, 410, 25, 311, 0, 0, 32, 0, 487,
	-2, 0, 0, 0, 465, 491, 492, 441, 36, 0,
	0, 700, 81, 82, 79, 80, 0, 61, 78, 0,
	180, 141, 174, 177, 159, 142, 125, 126, 162, 163,
	138, 0, 0, 146, 0, 0, 0, 49, 701, 702,
	184, 185, 186, 0, 188, 189, 190, 328, 0, 348,
	331, 386, 260, 267, 263, 0, 0, 442, 0, 141,
	141, 421, 141, 145, 424, 141, 426, 141, 429, 0,
	0, 0, 433, 395, 439, 0, 453, 271, 272, 274,
	275, 276, 284, 0, 286, 0, 485, 0, -2, 0,
	480, 479, 35, 700, 0, 47, 83, 171, 0, 182,
	140, 0, 0, 54, 62, 63, 55, 64, 65, 66,
	0, 332, 0, 387, 390, 418, 161, 422, 423, 425,
	427, 428, 430, 392, 391, 0, 0, 0, 437, 455,
	0, 0, 0, 0, 0, 291, 0, 0, 294, 0,
	0, 0, 0, 285, 0, 0, 305, 287, 0, 289,
	290, 0, 475, 27, 0, 45, 0, 0, 181, 144,
	147, 187, 264, 419, 420, 411, 394, 434, 26, 0,
	0, 273, 280, 0, 283, 292, 293, 295, 0, 297,
	0, 299, 300, 277, 278, 279, 0, 0, 0, 288,
	483, -2, 481, 0, 41, 0, 0, 0, 0, 0,
	456, 454, 0, 0, 296, 298, 0, 0, 0, 0,
	700, 0, 172, 393, 0, 0, 0, 281, 282, 0,
	0, 0, 42, 46, 0, 412, 0, 415, 0, 309,
	0, 0, 0, 413, 306, 0, 307, 308, 43, 0,
	310, 0, 414,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 237,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:314
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:319
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:320
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:324
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:348
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:356
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:377
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:394
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:405
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:417
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:433
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:439
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:443
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:449
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:453
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:459
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:463
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:469
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:475
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:481
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:494
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:503
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:516
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:524
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:530
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:544
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:550
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:557
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:565
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:567
		{
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:570
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:572
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:580
		{
			yyVAL.str = "character set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:586
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:590
		{
			yyVAL.str = "default"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:604
		{
			yyVAL.str = "default"
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:610
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:621
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:648
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:658
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:662
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:696
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:705
		{
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:710
		{
			// Normal str as a identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:715
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:728
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:734
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:744
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:750
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:755
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:759
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:765
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:807
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:873
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1248
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1253
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1281
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1289
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &Xa{}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &Explain{}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.str = ""
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.tableName = TableName{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.str = ""
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.str = "full "
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.showFilter = nil
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.statement = &OtherRead{}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.statement = &OtherRead{}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1531
		{
			setAllowComments(yylex, true)
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.bytes2 = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.str = UnionStr
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.str = UnionAllStr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.str = UnionDistinctStr
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.str = ""
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.str = SQLCacheStr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.str = DistinctStr
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = ""
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = StraightJoinHint
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.selectExprs = nil
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.empty = struct{}{}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.empty = struct{}{}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.str = JoinStr
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.str = JoinStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.str = JoinStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.str = StraightJoinStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.str = LeftJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.str = LeftJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.str = RightJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.str = RightJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.str = NaturalJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.indexHints = nil
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = nil
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1892
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1896
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1902
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1906
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.str = IsNullStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.str = IsNotNullStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.str = IsTrueStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.str = IsNotTrueStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.str = IsFalseStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.str = IsNotFalseStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.str = EqualStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.str = LessThanStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.str = GreaterThanStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.str = LessEqualStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.str = GreaterEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.str = NotEqualStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = nil
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2055
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2059
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2063
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2095
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2123
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 393:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.str = BooleanModeStr
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.str = QueryExpansionStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2347
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.str = string("")
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2395
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.expr = nil
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2440
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.expr = &NullVal{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2470
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.exprs = nil
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.expr = nil
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.orderBy = nil
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.str = AscScr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.str = AscScr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.str = DescScr
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.limit = nil
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.str = ForUpdateStr
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.str = ShareModeStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2590
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2603
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.updateExprs = nil
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2631
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2647
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2651
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2663
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2689
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.bytes = []byte("charset")
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.expr = &Default{}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.byt = 0
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2737
		{
			yyVAL.byt = 1
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.byt = 0
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.byt = 1
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.str = ""
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.str = IgnoreStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2759
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2769
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2772
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2782
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2787
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2789
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2793
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2797
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2804
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2810
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2814
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2821
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3007
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3016
		{
			decNesting(yylex)
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3021
		{
			forceEOF(yylex)
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3026
		{
			forceEOF(yylex)
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3030
		{
			forceEOF(yylex)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3034
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
