//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                 int
	empty               struct{}
	statement           Statement
	selStmt             SelectStatement
	ddl                 *DDL
	ins                 *Insert
	byt                 byte
	bytes               []byte
	bytes2              [][]byte
	str                 string
	strs                []string
	selectExprs         SelectExprs
	selectExpr          SelectExpr
	columns             Columns
	colName             *ColName
	tableExprs          TableExprs
	tableExpr           TableExpr
	tableName           TableName
	tableNames          TableNames
	indexHints          *IndexHints
	expr                Expr
	exprs               Exprs
	boolVal             BoolVal
	colTuple            ColTuple
	values              Values
	valTuple            ValTuple
	subquery            *Subquery
	whens               []*When
	when                *When
	orderBy             OrderBy
	order               *Order
	limit               *Limit
	updateExprs         UpdateExprs
	updateExpr          *UpdateExpr
	setExprs            SetExprs
	setExpr             *SetExpr
	colIdent            ColIdent
	colIdents           []ColIdent
	tableIdent          TableIdent
	convertType         *ConvertType
	aliasedTableName    *AliasedTableExpr
	TableSpec           *TableSpec
	TableOptions        TableOptions
	columnType          ColumnType
	colPrimaryKeyOpt    ColumnPrimaryKeyOption
	colUniqueKeyOpt     ColumnUniqueKeyOption
	optVal              *SQLVal
	LengthScaleOption   LengthScaleOption
	columnDefinition    *ColumnDefinition
	indexDefinition     *IndexDefinition
	indexInfo           *IndexInfo
	indexColumn         *IndexColumn
	indexColumns        []*IndexColumn
	columnOptionListOpt ColumnOptionListOpt
	columnOptionList    ColumnOptionList
	columnOption        *ColumnOption
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const STATUS = 57513
const COLUMNS = 57514
const CURRENT_TIMESTAMP = 57515
const DATABASE = 57516
const CURRENT_DATE = 57517
const CURRENT_TIME = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const UTC_DATE = 57521
const UTC_TIME = 57522
const UTC_TIMESTAMP = 57523
const REPLACE = 57524
const CONVERT = 57525
const CAST = 57526
const GROUP_CONCAT = 57527
const SEPARATOR = 57528
const MATCH = 57529
const AGAINST = 57530
const BOOLEAN = 57531
const LANGUAGE = 57532
const WITH = 57533
const QUERY = 57534
const EXPANSION = 57535
const UNUSED = 57536
const PARTITION = 57537
const PARTITIONS = 57538
const HASH = 57539
const XA = 57540
const DISTRIBUTED = 57541
const ENGINES = 57542
const VERSIONS = 57543
const PROCESSLIST = 57544
const QUERYZ = 57545
const TXNZ = 57546
const KILL = 57547
const ENGINE = 57548
const SINGLE = 57549
const BEGIN = 57550
const START = 57551
const TRANSACTION = 57552
const COMMIT = 57553
const ROLLBACK = 57554
const GLOBAL = 57555
const SESSION = 57556
const NAMES = 57557
const RADON = 57558
const ATTACH = 57559
const ATTACHLIST = 57560
const DETACH = 57561
const RESHARD = 57562

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 293,
	83, 612,
	-2, 40,
	-1, 298,
	83, 507,
	-2, 458,
	-1, 401,
	111, 494,
	-2, 490,
	-1, 402,
	111, 495,
	-2, 491,
	-1, 584,
	5, 27,
	-2, 434,
	-1, 739,
	111, 497,
	-2, 493,
	-1, 858,
	5, 28,
	-2, 313,
	-1, 882,
	5, 28,
	-2, 435,
	-1, 964,
	5, 27,
	-2, 437,
	-1, 1063,
	5, 28,
	-2, 438,
}

const yyPrivate = 57344

const yyLast = 7770

var yyAct = [...]int{

	402, 587, 490, 1092, 355, 1019, 954, 735, 1005, 955,
	350, 898, 768, 913, 655, 769, 1016, 377, 934, 851,
	723, 56, 595, 297, 730, 544, 3, 733, 738, 588,
	379, 74, 66, 843, 749, 765, 158, 700, 254, 599,
	642, 493, 617, 344, 611, 410, 404, 651, 72, 479,
	289, 55, 973, 272, 291, 605, 353, 260, 972, 157,
	60, 732, 601, 1104, 254, 1091, 74, 281, 257, 309,
	306, 1103, 380, 50, 307, 1083, 271, 1101, 294, 357,
	1029, 1090, 1082, 296, 947, 999, 62, 63, 64, 65,
	263, 265, 264, 266, 141, 142, 555, 326, 902, 332,
	684, 330, 672, 1068, 511, 510, 520, 521, 513, 514,
	515, 516, 517, 518, 519, 512, 324, 805, 522, 635,
	671, 785, 974, 50, 795, 796, 797, 1036, 919, 643,
	316, 277, 798, 935, 994, 992, 828, 827, 826, 24,
	51, 26, 27, 317, 312, 254, 254, 674, 140, 631,
	630, 612, 1058, 1060, 610, 614, 670, 937, 823, 627,
	495, 495, 46, 825, 143, 1078, 28, 327, 1077, 36,
	1076, 313, 315, 939, 342, 943, 614, 938, 614, 936,
	251, 145, 633, 144, 941, 1026, 37, 534, 535, 53,
	984, 310, 885, 636, 940, 632, 625, 857, 855, 942,
	944, 778, 626, 667, 665, 661, 861, 664, 666, 543,
	512, 417, 790, 522, 600, 258, 906, 522, 1069, 497,
	500, 1028, 499, 498, 1059, 498, 643, 513, 514, 515,
	516, 517, 518, 519, 512, 895, 1081, 522, 949, 500,
	469, 500, 824, 786, 777, 502, 669, 30, 31, 32,
	421, 34, 254, 799, 613, 629, 750, 822, 494, 494,
	609, 668, 794, 35, 47, 39, 907, 254, 48, 49,
	33, 750, 311, 868, 319, 613, 862, 613, 693, 695,
	696, 347, 405, 863, 694, 501, 254, 412, 663, 254,
	707, 74, 499, 498, 337, 339, 74, 406, 981, 673,
	628, 499, 498, 407, 705, 706, 704, 980, 296, 500,
	975, 662, 254, 423, 817, 254, 254, 254, 500, 53,
	254, 816, 570, 571, 254, 1065, 254, 254, 254, 703,
	499, 498, 52, 836, 837, 838, 338, 338, 724, 408,
	725, 420, 806, 314, 335, 1039, 491, 500, 38, 979,
	50, 139, 832, 815, 802, 40, 1033, 503, 41, 42,
	310, 44, 43, 1098, 343, 343, 45, 499, 498, 536,
	537, 538, 539, 540, 541, 515, 516, 517, 518, 519,
	512, 921, 486, 522, 500, 1003, 343, 1032, 491, 977,
	976, 849, 343, 686, 918, 553, 912, 911, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	74, 901, 522, 900, 285, 254, 499, 498, 254, 896,
	74, 589, 891, 951, 531, 533, 791, 576, 783, 598,
	909, 908, 532, 500, 590, 884, 343, 296, 844, 584,
	781, 594, 726, 686, 343, 22, 592, 470, 24, 318,
	542, 430, 429, 545, 546, 547, 548, 549, 550, 551,
	572, 554, 556, 556, 556, 556, 556, 556, 556, 556,
	564, 565, 566, 567, 597, 582, 574, 254, 1031, 583,
	903, 254, 657, 644, 645, 646, 585, 557, 558, 559,
	560, 561, 562, 563, 254, 766, 776, 776, 53, 53,
	606, 602, 678, 877, 276, 596, 690, 691, 24, 697,
	698, 57, 653, 654, 880, 699, 1003, 910, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 24, 849, 675, 701, 419, 683, 963,
	1072, 568, 74, 369, 368, 370, 371, 372, 373, 278,
	849, 776, 374, 491, 849, 74, 744, 745, 53, 729,
	637, 296, 1007, 1010, 1011, 1012, 1008, 739, 1009, 1013,
	656, 741, 751, 1075, 67, 787, 405, 652, 647, 766,
	659, 476, 573, 53, 767, 702, 74, 589, 580, 1051,
	754, 727, 728, 1049, 1052, 1074, 1048, 747, 1050, 53,
	590, 1047, 1096, 774, 780, 1089, 50, 835, 742, 743,
	775, 772, 746, 689, 770, 757, 758, 779, 545, 763,
	762, 1053, 737, 1011, 1012, 411, 753, 345, 755, 756,
	982, 638, 639, 640, 641, 282, 283, 810, 426, 409,
	416, 764, 894, 346, 878, 658, 648, 649, 650, 475,
	1015, 279, 280, 411, 961, 789, 771, 792, 50, 793,
	254, 801, 800, 788, 1079, 687, 1066, 761, 273, 1042,
	428, 427, 1041, 274, 782, 760, 254, 57, 1002, 807,
	808, 596, 809, 480, 811, 812, 813, 485, 325, 1007,
	1010, 1011, 1012, 1008, 833, 1009, 1013, 323, 288, 1073,
	1023, 803, 496, 820, 59, 61, 54, 1, 616, 615,
	897, 608, 603, 308, 607, 814, 840, 841, 842, 740,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 752, 622, 522, 621, 701, 74, 620, 618, 804,
	634, 924, 839, 971, 378, 784, 604, 893, 623, 624,
	619, 433, 434, 853, 432, 436, 435, 431, 869, 146,
	254, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 290, 1014, 522, 1018, 850, 69, 491,
	821, 589, 252, 867, 702, 888, 660, 530, 74, 759,
	295, 422, 773, 848, 590, 569, 296, 886, 403, 1040,
	1001, 866, 739, 879, 552, 899, 887, 748, 287, 865,
	856, 356, 692, 367, 364, 366, 365, 575, 581, 74,
	504, 254, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 354, 890, 522, 348, 296, 1057, 957, 473,
	413, 1006, 1004, 956, 876, 484, 998, 904, 905, 1067,
	579, 25, 58, 74, 284, 925, 926, 889, 74, 920,
	14, 21, 15, 13, 12, 29, 10, 9, 8, 7,
	853, 6, 929, 296, 923, 296, 950, 928, 254, 739,
	5, 932, 946, 945, 931, 74, 74, 948, 4, 287,
	287, 914, 275, 74, 953, 23, 962, 915, 922, 952,
	2, 846, 966, 967, 20, 847, 970, 19, 18, 964,
	296, 770, 17, 16, 11, 0, 858, 859, 860, 0,
	0, 864, 0, 0, 0, 0, 870, 0, 871, 872,
	873, 874, 0, 0, 737, 983, 933, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 881, 882, 883, 0,
	959, 0, 0, 771, 990, 0, 965, 958, 892, 1000,
	254, 254, 0, 0, 0, 914, 0, 0, 0, 0,
	74, 915, 0, 0, 0, 0, 1024, 0, 74, 0,
	0, 0, 0, 1027, 0, 74, 0, 296, 0, 1030,
	0, 1025, 0, 0, 770, 899, 287, 0, 0, 0,
	0, 0, 296, 0, 254, 254, 254, 254, 1037, 0,
	1043, 287, 1045, 0, 1044, 254, 1046, 0, 254, 0,
	997, 254, 1054, 927, 0, 1062, 1061, 74, 589, 1035,
	287, 0, 1017, 287, 0, 0, 771, 0, 50, 958,
	0, 590, 914, 741, 1064, 1071, 0, 960, 915, 1070,
	491, 0, 0, 0, 0, 0, 468, 0, 0, 287,
	287, 287, 0, 933, 477, 0, 969, 0, 287, 0,
	287, 287, 287, 0, 0, 0, 959, 959, 959, 959,
	1084, 1085, 0, 958, 958, 958, 958, 74, 74, 74,
	1017, 1094, 1095, 978, 255, 0, 0, 958, 0, 74,
	0, 0, 0, 0, 1093, 1093, 1093, 985, 0, 986,
	0, 286, 0, 0, 0, 0, 1102, 0, 0, 0,
	995, 996, 0, 0, 0, 0, 0, 0, 0, 987,
	988, 0, 989, 0, 256, 991, 259, 993, 261, 262,
	0, 267, 268, 269, 270, 0, 0, 0, 0, 1086,
	1087, 1088, 0, 0, 845, 0, 0, 0, 0, 287,
	0, 591, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1038, 511, 510, 520, 521, 513, 514,
	515, 516, 517, 518, 519, 512, 0, 0, 522, 0,
	0, 1056, 320, 321, 0, 0, 0, 0, 0, 0,
	1063, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 0, 0, 522, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 0,
	0, 322, 1080, 0, 0, 0, 328, 329, 0, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 1099,
	1100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 593, 0,
	0, 736, 736, 0, 0, 736, 0, 0, 0, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	736, 736, 736, 0, 341, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 591, 0, 0,
	0, 0, 0, 415, 0, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 439, 0, 336, 0, 0, 0, 0,
	340, 0, 471, 472, 474, 0, 0, 0, 0, 0,
	0, 478, 0, 481, 482, 483, 0, 451, 0, 0,
	0, 0, 456, 457, 458, 459, 460, 461, 462, 0,
	463, 464, 465, 466, 467, 452, 453, 454, 455, 437,
	438, 0, 0, 440, 287, 0, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 506, 487, 509,
	488, 0, 489, 0, 492, 523, 524, 525, 526, 527,
	528, 529, 0, 507, 508, 505, 511, 510, 520, 521,
	513, 514, 515, 516, 517, 518, 519, 512, 0, 0,
	522, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	91, 591, 0, 593, 676, 0, 0, 852, 679, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 97,
	0, 688, 112, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 854, 0, 0, 287, 0, 0, 0, 81,
	0, 0, 0, 677, 499, 498, 680, 681, 682, 0,
	0, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 500, 0, 0, 736, 0, 0, 0, 0, 0,
	593, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 287, 0, 127, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 82, 0, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 0,
	125, 104, 0, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 0, 0, 113, 123, 133, 0,
	0, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 1021, 75, 818, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 829, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 287,
	287, 287, 0, 0, 0, 819, 0, 0, 0, 1055,
	0, 0, 287, 0, 0, 1021, 0, 0, 591, 0,
	0, 0, 0, 830, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 239, 230,
	201, 241, 178, 193, 250, 194, 195, 222, 165, 209,
	106, 191, 91, 0, 0, 240, 206, 0, 181, 160,
	188, 161, 179, 203, 86, 177, 232, 212, 148, 0,
	247, 97, 216, 0, 112, 103, 0, 0, 205, 234,
	207, 229, 200, 223, 171, 215, 242, 192, 220, 0,
	0, 0, 156, 0, 0, 0, 0, 0, 916, 0,
	0, 81, 218, 237, 190, 219, 221, 159, 217, 0,
	163, 166, 249, 235, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 204, 208, 226, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 182, 0, 214, 0, 0,
	0, 169, 164, 202, 0, 0, 917, 150, 0, 183,
	227, 0, 0, 0, 155, 199, 127, 236, 197, 196,
	243, 108, 0, 233, 180, 189, 82, 187, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 167, 125, 104, 168, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 162, 0, 113, 123,
	133, 176, 147, 128, 129, 130, 151, 152, 0, 153,
	0, 154, 149, 174, 175, 172, 173, 210, 211, 244,
	245, 246, 228, 170, 0, 0, 231, 213, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 0, 0,
	186, 248, 225, 224, 238, 0, 88, 115, 0, 0,
	0, 0, 0, 92, 0, 0, 134, 135, 137, 136,
	138, 239, 230, 201, 241, 178, 193, 250, 194, 195,
	222, 165, 209, 106, 191, 91, 0, 0, 240, 206,
	0, 181, 160, 188, 161, 179, 203, 86, 177, 232,
	212, 303, 0, 247, 97, 216, 0, 112, 103, 0,
	0, 205, 234, 207, 229, 200, 223, 171, 215, 242,
	192, 220, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 218, 237, 190, 219, 221,
	159, 217, 0, 163, 166, 249, 235, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 204, 208, 226, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	214, 0, 0, 0, 169, 164, 202, 0, 0, 0,
	302, 0, 183, 227, 0, 0, 0, 304, 199, 127,
	236, 197, 196, 243, 108, 0, 233, 180, 189, 82,
	187, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 299, 125, 104, 298, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 162,
	0, 113, 123, 133, 176, 305, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 301, 174, 175, 172, 173,
	210, 211, 244, 245, 246, 228, 170, 0, 0, 231,
	213, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 0, 0, 186, 248, 225, 224, 238, 0, 88,
	115, 0, 0, 0, 0, 0, 293, 292, 300, 134,
	135, 137, 136, 138, 239, 230, 201, 241, 178, 193,
	250, 194, 195, 222, 165, 209, 106, 191, 91, 0,
	0, 240, 206, 0, 181, 160, 188, 161, 179, 203,
	86, 177, 232, 212, 303, 0, 247, 97, 216, 0,
	112, 103, 0, 0, 205, 234, 207, 229, 200, 223,
	171, 215, 242, 192, 220, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 218, 237,
	190, 219, 221, 159, 217, 0, 163, 166, 249, 235,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 204,
	208, 226, 198, 0, 0, 0, 0, 0, 0, 1034,
	0, 182, 0, 214, 0, 0, 0, 169, 164, 202,
	0, 0, 0, 302, 0, 183, 227, 0, 0, 0,
	304, 199, 127, 236, 197, 196, 243, 108, 0, 233,
	180, 189, 82, 187, 111, 107, 122, 77, 120, 114,
	101, 93, 94, 76, 0, 110, 85, 90, 84, 105,
	117, 118, 83, 132, 80, 126, 79, 167, 125, 104,
	168, 116, 121, 102, 99, 78, 119, 100, 98, 95,
	87, 0, 162, 0, 113, 123, 133, 176, 305, 128,
	129, 130, 0, 0, 0, 0, 0, 0, 301, 174,
	175, 172, 173, 210, 211, 244, 245, 246, 228, 170,
	0, 0, 231, 213, 75, 0, 96, 131, 109, 89,
	124, 0, 0, 0, 0, 0, 186, 248, 225, 224,
	238, 0, 88, 115, 0, 0, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 138, 239, 230, 201,
	241, 178, 193, 250, 194, 195, 222, 165, 209, 106,
	191, 91, 0, 0, 240, 206, 0, 181, 160, 188,
	161, 179, 203, 86, 177, 232, 212, 303, 0, 247,
	97, 216, 0, 112, 103, 0, 0, 205, 234, 207,
	229, 200, 223, 171, 215, 242, 192, 220, 53, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 218, 237, 190, 219, 221, 159, 217, 0, 163,
	166, 249, 235, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 204, 208, 226, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 214, 0, 0, 0,
	169, 164, 202, 0, 0, 0, 302, 0, 183, 227,
	0, 0, 0, 304, 199, 127, 236, 197, 196, 243,
	108, 0, 233, 180, 189, 82, 187, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	167, 125, 104, 168, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 162, 0, 113, 123, 133,
	176, 305, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 301, 174, 175, 172, 173, 210, 211, 244, 245,
	246, 228, 170, 0, 0, 231, 213, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 0, 186,
	248, 225, 224, 238, 0, 88, 115, 0, 0, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
	239, 230, 201, 241, 178, 193, 250, 194, 195, 222,
	165, 209, 106, 191, 91, 0, 0, 240, 206, 0,
	181, 160, 188, 161, 179, 203, 86, 177, 232, 212,
	303, 0, 247, 97, 216, 0, 112, 103, 0, 0,
	205, 234, 207, 229, 200, 223, 171, 215, 242, 192,
	220, 0, 0, 0, 401, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 218, 237, 190, 219, 221, 159,
	217, 0, 163, 166, 249, 235, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 204, 208, 226, 198, 0,
	0, 0, 0, 0, 0, 930, 0, 182, 0, 214,
	0, 0, 0, 169, 164, 202, 0, 0, 0, 302,
	0, 183, 227, 0, 0, 0, 304, 199, 127, 236,
	197, 196, 243, 108, 0, 233, 180, 189, 82, 187,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 167, 125, 104, 168, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 162, 0,
	113, 123, 133, 176, 305, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 301, 174, 175, 172, 173, 210,
	211, 244, 245, 246, 228, 170, 0, 0, 231, 213,
	75, 0, 96, 131, 109, 89, 124, 0, 0, 0,
	0, 0, 186, 248, 225, 224, 238, 0, 88, 115,
	0, 0, 0, 0, 0, 92, 0, 0, 134, 135,
	137, 136, 138, 239, 230, 201, 241, 178, 193, 250,
	194, 195, 222, 165, 209, 106, 191, 91, 0, 0,
	240, 206, 0, 181, 160, 188, 161, 179, 203, 86,
	177, 232, 212, 303, 0, 247, 97, 216, 0, 112,
	103, 0, 0, 205, 234, 207, 229, 200, 223, 171,
	215, 242, 192, 220, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 218, 237, 190,
	219, 221, 159, 217, 0, 163, 166, 249, 235, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 204, 208,
	226, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 214, 0, 0, 0, 169, 164, 202, 0,
	0, 0, 302, 0, 183, 227, 0, 0, 0, 304,
	199, 127, 236, 197, 196, 243, 108, 0, 233, 180,
	189, 82, 187, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 299, 125, 104, 298,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 162, 0, 113, 123, 133, 176, 305, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 301, 174, 175,
	172, 173, 210, 211, 244, 245, 246, 228, 170, 0,
	0, 231, 213, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 0, 0, 186, 248, 225, 224, 238,
	0, 88, 115, 0, 0, 0, 0, 0, 92, 0,
	300, 134, 135, 137, 136, 138, 239, 230, 201, 241,
	178, 193, 250, 194, 195, 222, 165, 209, 106, 191,
	91, 0, 0, 240, 206, 0, 181, 160, 188, 161,
	179, 203, 86, 177, 232, 212, 303, 0, 247, 97,
	216, 0, 112, 103, 0, 0, 205, 234, 207, 229,
	200, 223, 171, 215, 242, 192, 220, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	218, 237, 190, 219, 221, 159, 217, 0, 163, 166,
	249, 235, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 204, 208, 226, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 214, 0, 0, 0, 169,
	164, 202, 0, 0, 0, 302, 0, 183, 227, 0,
	0, 0, 304, 199, 127, 236, 197, 196, 243, 108,
	0, 233, 180, 189, 82, 187, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 167,
	125, 104, 168, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 162, 0, 113, 123, 133, 176,
	305, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	301, 174, 175, 172, 173, 210, 211, 244, 245, 246,
	228, 170, 0, 0, 231, 213, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 186, 248,
	225, 224, 238, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 239,
	230, 201, 241, 178, 193, 250, 194, 195, 222, 165,
	209, 106, 191, 91, 0, 0, 240, 206, 0, 181,
	160, 188, 161, 179, 203, 86, 177, 232, 212, 303,
	0, 247, 97, 216, 0, 112, 103, 0, 0, 205,
	234, 207, 229, 200, 223, 171, 215, 242, 192, 220,
	0, 0, 0, 401, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 218, 237, 190, 219, 221, 159, 217,
	0, 163, 166, 249, 235, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 204, 208, 226, 198, 0, 0,
	0, 0, 0, 0, 0, 0, 182, 0, 214, 0,
	0, 0, 169, 164, 202, 0, 0, 0, 302, 0,
	183, 227, 0, 0, 0, 304, 199, 127, 236, 197,
	196, 243, 108, 0, 233, 180, 189, 82, 187, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 167, 125, 104, 168, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 162, 0, 113,
	123, 133, 176, 305, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 301, 174, 175, 172, 173, 210, 211,
	244, 245, 246, 228, 170, 0, 0, 231, 213, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	0, 186, 248, 225, 224, 238, 0, 88, 115, 0,
	0, 0, 0, 0, 92, 0, 0, 134, 135, 137,
	136, 138, 239, 230, 201, 241, 178, 193, 250, 194,
	195, 222, 165, 209, 106, 191, 91, 0, 0, 240,
	206, 0, 181, 160, 188, 161, 179, 203, 86, 177,
	232, 212, 303, 0, 247, 97, 216, 0, 112, 103,
	0, 0, 205, 234, 207, 229, 200, 223, 171, 215,
	242, 192, 220, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 218, 237, 190, 219,
	221, 159, 217, 0, 163, 166, 249, 235, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 204, 208, 226,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 214, 0, 0, 0, 169, 164, 202, 0, 0,
	0, 302, 0, 183, 227, 0, 0, 0, 304, 199,
	127, 236, 197, 196, 243, 108, 0, 233, 180, 189,
	82, 187, 111, 107, 122, 77, 120, 114, 101, 93,
	94, 76, 0, 110, 85, 90, 84, 105, 117, 118,
	83, 132, 80, 126, 79, 167, 125, 104, 168, 116,
	121, 102, 99, 78, 119, 100, 98, 95, 87, 0,
	162, 0, 113, 123, 133, 176, 305, 128, 129, 130,
	0, 0, 0, 0, 0, 0, 301, 174, 175, 172,
	173, 210, 211, 244, 245, 246, 228, 170, 0, 0,
	231, 213, 75, 0, 96, 131, 109, 89, 124, 0,
	0, 0, 0, 0, 186, 248, 225, 224, 238, 0,
	88, 115, 0, 0, 0, 0, 0, 92, 0, 0,
	134, 135, 137, 136, 138, 106, 0, 91, 0, 0,
	0, 0, 0, 731, 0, 352, 0, 0, 0, 86,
	351, 0, 0, 0, 0, 388, 97, 0, 0, 112,
	103, 0, 0, 0, 0, 381, 382, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 401, 369, 368,
	370, 371, 372, 373, 0, 0, 81, 374, 375, 376,
	0, 0, 0, 349, 362, 0, 387, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 359, 360, 734, 0,
	0, 0, 399, 0, 361, 0, 0, 358, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 397, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 389, 398,
	395, 396, 393, 394, 392, 391, 390, 400, 383, 384,
	386, 0, 385, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 115, 0, 0, 0, 0, 106, 92, 91,
	0, 134, 135, 137, 136, 138, 0, 352, 0, 0,
	0, 86, 351, 0, 0, 0, 0, 388, 97, 0,
	0, 112, 103, 0, 0, 0, 0, 381, 382, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 401,
	369, 368, 370, 371, 372, 373, 0, 0, 81, 374,
	375, 376, 0, 0, 0, 349, 362, 0, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 359, 360,
	734, 0, 0, 0, 399, 0, 361, 0, 0, 358,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 397, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	389, 398, 395, 396, 393, 394, 392, 391, 390, 400,
	383, 384, 386, 0, 385, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 115, 0, 0, 0, 0, 106,
	92, 91, 0, 134, 135, 137, 136, 138, 0, 352,
	0, 0, 0, 86, 351, 0, 0, 0, 0, 388,
	97, 0, 0, 112, 103, 0, 0, 0, 0, 381,
	382, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	343, 401, 369, 368, 370, 371, 372, 373, 0, 0,
	81, 374, 375, 376, 0, 0, 0, 349, 362, 0,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	359, 360, 0, 0, 0, 0, 399, 0, 361, 0,
	0, 358, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 397, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 389, 398, 395, 396, 393, 394, 392, 391,
	390, 400, 383, 384, 386, 0, 385, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 88, 115, 0, 0, 0,
	0, 106, 92, 91, 0, 134, 135, 137, 136, 138,
	0, 352, 0, 0, 0, 86, 351, 0, 0, 0,
	0, 388, 97, 0, 0, 112, 103, 0, 0, 0,
	0, 381, 382, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 401, 369, 368, 370, 371, 372, 373,
	0, 0, 81, 374, 375, 376, 0, 0, 0, 349,
	362, 0, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 359, 360, 0, 0, 0, 0, 399, 0,
	361, 0, 0, 358, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	397, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 389, 398, 395, 396, 393, 394,
	392, 391, 390, 400, 383, 384, 386, 0, 385, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 115, 0,
	0, 0, 0, 106, 92, 91, 0, 134, 135, 137,
	136, 138, 0, 352, 0, 0, 0, 86, 351, 0,
	0, 0, 0, 388, 97, 0, 0, 112, 103, 0,
	0, 0, 0, 381, 382, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 401, 369, 368, 370, 371,
	372, 373, 0, 0, 81, 374, 375, 376, 0, 0,
	0, 349, 362, 0, 387, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 359, 360, 0, 0, 0, 0,
	399, 0, 361, 0, 0, 358, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 397, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 389, 398, 395, 396,
	393, 394, 392, 391, 390, 400, 383, 384, 386, 0,
	385, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 0, 0, 0, 106, 0, 91, 0, 0, 88,
	115, 0, 0, 0, 0, 0, 92, 0, 86, 134,
	135, 137, 136, 138, 388, 97, 0, 0, 112, 103,
	0, 0, 0, 0, 381, 382, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 401, 369, 368, 370,
	371, 372, 373, 0, 0, 81, 374, 375, 376, 0,
	0, 0, 0, 362, 0, 387, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 359, 360, 0, 0, 0,
	0, 399, 0, 361, 0, 0, 358, 363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 397, 0, 108, 0, 0, 0, 0,
	82, 0, 111, 107, 122, 77, 120, 114, 101, 93,
	94, 76, 0, 110, 85, 90, 84, 105, 117, 118,
	83, 132, 80, 126, 79, 0, 125, 104, 0, 116,
	121, 102, 99, 78, 119, 100, 98, 95, 87, 0,
	0, 0, 113, 123, 133, 0, 0, 128, 129, 130,
	0, 0, 0, 0, 0, 0, 0, 389, 398, 395,
	396, 393, 394, 392, 391, 390, 400, 383, 384, 386,
	0, 385, 75, 0, 96, 131, 109, 89, 124, 0,
	0, 0, 0, 0, 106, 0, 91, 0, 0, 0,
	88, 115, 0, 0, 0, 0, 0, 92, 86, 0,
	134, 135, 137, 136, 138, 97, 0, 0, 112, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 511, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 0, 0, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	82, 0, 111, 107, 122, 77, 120, 114, 101, 93,
	94, 76, 0, 110, 85, 90, 84, 105, 117, 118,
	83, 132, 80, 126, 79, 0, 125, 104, 0, 116,
	121, 102, 99, 78, 119, 100, 98, 95, 87, 0,
	0, 0, 113, 123, 133, 0, 0, 128, 129, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	91, 0, 75, 71, 96, 131, 109, 89, 124, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 97,
	88, 115, 112, 103, 0, 0, 0, 92, 0, 0,
	134, 135, 137, 136, 138, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 70, 0, 127, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 82, 0, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 0,
	125, 104, 0, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 0, 0, 113, 123, 133, 0,
	0, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	0, 24, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 91, 0, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 97, 88, 115, 112, 103, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 0,
	0, 53, 0, 0, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 82, 0,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 0, 125, 104, 0, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 0, 0,
	113, 123, 133, 0, 0, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	75, 91, 96, 131, 109, 89, 124, 0, 1020, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 88, 115,
	97, 0, 0, 112, 103, 92, 0, 0, 134, 135,
	137, 136, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 253, 0, 1022, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 91, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 97, 88, 115, 112, 103, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
	0, 0, 53, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 91,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 97, 88,
	115, 112, 103, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138, 0, 0, 0, 0, 0, 73,
	0, 0, 577, 0, 0, 578, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 91, 0, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 86, 425, 0, 0, 0,
	0, 0, 97, 88, 115, 112, 103, 0, 0, 0,
	92, 0, 0, 134, 135, 137, 136, 138, 0, 0,
	0, 0, 0, 73, 0, 424, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 91, 0, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 97, 88, 115, 112,
	103, 0, 0, 0, 92, 0, 0, 134, 135, 137,
	136, 138, 0, 0, 0, 0, 0, 253, 0, 1022,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 91, 0, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	97, 88, 115, 112, 103, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 138, 0, 0, 53, 0,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 91, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 97, 88, 115, 112, 103, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
	0, 0, 0, 0, 0, 73, 0, 854, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 91,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	414, 86, 0, 0, 0, 0, 0, 0, 97, 88,
	115, 112, 103, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138, 0, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 91, 0, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 97, 88, 115, 112, 103, 0, 0, 0,
	92, 0, 0, 134, 135, 137, 136, 138, 0, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 91, 0, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 97, 88, 115, 112,
	103, 0, 0, 0, 92, 0, 0, 134, 135, 137,
	136, 138, 0, 0, 0, 0, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 91, 0, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	97, 88, 115, 112, 103, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 138, 0, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 115, 0, 0, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
}
var yyPact = [...]int{

	133, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 663, 699, -1000, -1000, -1000, -1000, -1000, 518,
	5321, 23, -27, 62, 60, 1803, 59, 7532, -1000, -1000,
	6, -1000, -170, -1000, -1000, -144, -1000, -1000, -1000, -1000,
	527, -1000, -1000, -1000, -1000, -1000, 652, 658, 543, 627,
	592, -1000, 23, 7532, 688, 2036, -142, 301, 18, 49,
	18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 51,
	-1000, 17, 390, 17, 7532, 7532, -1000, 687, -63, 678,
	-24, -1000, -1000, -84, -1000, -89, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7532, -1000, -1000, -1000, -1000, -1000, -1000, 282, -1000,
	-1000, -1000, -1000, 443, 443, -1000, 7532, -1000, -1000, -1000,
	-1000, 307, 609, 4736, 4736, 663, -1000, 527, -1000, -1000,
	-1000, 600, -1000, -1000, 220, 6980, 607, 100, 7532, 480,
	2968, -1000, -1000, -1000, 167, 6244, -1000, -1000, -1000, 605,
	-1000, -1000, -1000, -1000, -1000, -1000, 656, 655, 394, -1000,
	1244, 7532, 165, 388, 7532, 7532, 7532, 622, 526, 7532,
	-1000, -1000, -1000, 7532, 673, 7532, 7532, 7532, -1000, -1000,
	677, -1000, 673, -1000, -1000, -1000, -1000, -1000, 4736, -1000,
	-1000, 134, -1000, -1000, -1000, 694, 126, 228, -1000, 4736,
	1352, 443, 443, -1000, -1000, 75, -1000, -1000, 4937, 4937,
	4937, 4937, 4937, 4937, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 443, 98, -1000,
	4524, 443, 443, 443, 443, 443, 443, 4736, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, -1000, -1000, 484, -1000, 294, 652, 307, 592, 6060,
	542, -1000, -1000, 442, 7532, -1000, 7348, 3667, 670, 2968,
	480, 4736, 106, -1000, -1000, -1000, -1000, -152, 443, -168,
	132, 127, -57, -1000, -1000, 504, -1000, 504, 504, 504,
	504, -29, -29, -29, -29, -1000, -1000, -1000, -1000, -1000,
	522, -1000, 504, 504, 504, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 521, 521, 521, 514, 514, -1000, 618,
	525, -1000, 88, 478, -1000, -1000, 7532, -1000, -1000, 670,
	7532, -1000, -1000, -1000, 652, -87, -1000, -1000, -1000, -1000,
	386, 219, -1000, 7532, -1000, -1000, -1000, 572, 4736, 4736,
	209, 4736, 4736, 130, 4937, 263, 213, 4937, 4937, 4937,
	4937, 4937, 4937, 4937, 4937, 4937, 4937, 4937, 4937, 4937,
	4937, 4937, 279, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 383, -1000, 527, 483, 483, 109, 109, 109, 109,
	109, 5137, 3888, 3434, 307, 4524, 4100, 4100, 4736, 4736,
	4100, 628, 177, 219, 7164, -1000, 307, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4100, 4100, 4100, 4100, 4736, -1000,
	-1000, -1000, 609, -1000, 628, 657, -1000, 583, 582, 4100,
	-1000, 524, 7348, 443, -1000, 5876, -1000, 494, -1000, 161,
	-1000, 90, -1000, -1000, -1000, 663, 4736, -1000, 219, -1000,
	381, 443, 369, -1000, -52, 160, -1000, -1000, 519, 640,
	153, 367, 155, -1000, -1000, -1000, 127, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 193, 63, -1000, 639,
	-1000, 638, 293, 693, -60, -1000, -1000, 280, -29, -29,
	-1000, -1000, 106, 604, 106, 106, 106, 292, -1000, -1000,
	-1000, -1000, 259, -1000, -1000, -1000, 252, -1000, -1000, 7532,
	-1000, 135, 159, 39, 9, 8, 7, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7532, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 291, -1000, 4736, -1000, -1000, 565,
	130, 151, -1000, -1000, 264, -1000, -1000, 219, 219, 1107,
	-1000, -1000, -1000, -1000, 263, 4937, 4937, 4937, 304, 1107,
	1080, 726, 625, 109, 275, 275, 105, 105, 105, 105,
	105, 129, 129, -1000, -1000, -1000, 307, -1000, -1000, -1000,
	307, 4100, 477, -1000, -1000, 1501, 87, 443, 86, -1000,
	-1000, 307, 334, 334, 149, 257, 334, 4100, 192, -1000,
	4736, 307, -1000, 334, 307, 334, 334, -1000, -1000, 7532,
	-1000, -1000, -1000, -1000, 493, -1000, 613, 440, 457, -1000,
	-1000, 4312, 307, 378, 81, 663, 7348, 4736, 3434, 652,
	219, -1000, 363, 307, 610, 152, 360, 7164, -1000, 354,
	-1000, -1000, 352, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -92, -1000, -1000, 422, 106, 106, -1000,
	157, -1000, -1000, -1000, 373, -1000, 460, 339, 2502, -1000,
	7532, -1000, -1000, -1000, 335, -30, 518, 322, 301, -1000,
	-1000, -1000, -1000, 219, -1000, -1000, -1000, -1000, -1000, -1000,
	304, 1107, 667, -1000, 4937, 4937, -1000, -1000, 334, 4100,
	-1000, -1000, 6796, -1000, -1000, 2735, 4100, 3201, -1000, -1000,
	-1000, 24, 279, 24, -121, 497, 156, -1000, 4736, 343,
	-1000, -1000, -1000, -1000, -1000, -1000, 670, 6612, 631, -1000,
	443, -1000, -1000, 502, 7164, 7164, 652, -1000, 219, -1000,
	-1000, 307, 2502, -172, -39, 248, -1000, 332, -1000, 504,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 288,
	245, -1000, 236, -1000, -1000, -1000, -1000, -1000, -1000, 597,
	-1000, -1000, -1000, -1000, 4937, 1107, 1107, -1000, -1000, -1000,
	-1000, 79, 307, -1000, 307, 504, 504, -1000, 504, 514,
	-1000, 504, -8, 504, -9, 307, 307, 443, -118, -1000,
	219, 4736, 666, 459, 517, -1000, -1000, -1000, 624, 5505,
	5692, 692, -1000, 443, -1000, 527, 74, -1000, -1000, 2502,
	-1000, -1000, -1000, -1000, 138, -1000, -128, 7164, -1000, -1000,
	420, 329, 297, 1107, 2269, -1000, -1000, -1000, 68, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4937, 307, 284,
	219, 659, 654, 6612, 6612, 6612, 6612, -1000, 556, 551,
	-1000, 548, 544, 576, 7532, -1000, 328, 5505, 99, -1000,
	6428, -1000, -1000, 7348, 457, 307, 7164, -1000, 266, 646,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10, -1000, -1000,
	-1000, 4736, 4736, 517, 485, 644, -1000, -1000, -1000, -1000,
	550, -1000, 528, -1000, -1000, -1000, -1000, -1000, 48, 46,
	43, -1000, 439, -1000, -1000, -1000, 643, 307, 30, -134,
	219, 336, 4736, 4736, -1000, -1000, 443, 443, 443, -1000,
	-1000, 563, -126, -145, 219, 219, 7164, 7164, 7164, -1000,
	560, -1000, 306, -1000, 306, 306, -131, -1000, 7164, -1000,
	-1000, -138, -1000, -147, -1000,
}
var yyPgo = [...]int{

	0, 914, 913, 912, 908, 907, 904, 900, 25, 445,
	895, 892, 888, 880, 871, 869, 868, 867, 866, 865,
	864, 863, 862, 861, 860, 60, 854, 852, 851, 45,
	850, 67, 849, 846, 845, 33, 61, 24, 27, 7,
	844, 16, 6, 9, 843, 842, 8, 841, 1047, 840,
	49, 839, 838, 837, 3, 22, 835, 832, 820, 818,
	56, 10, 817, 816, 815, 814, 813, 812, 37, 2,
	12, 30, 15, 811, 79, 4, 807, 34, 804, 801,
	800, 799, 21, 798, 46, 795, 53, 43, 792, 35,
	1, 29, 50, 54, 791, 790, 789, 351, 787, 130,
	272, 786, 41, 780, 778, 23, 0, 17, 78, 19,
	777, 744, 28, 5, 776, 774, 1094, 13, 20, 773,
	18, 759, 757, 756, 755, 754, 752, 751, 193, 750,
	749, 748, 40, 39, 747, 746, 745, 743, 740, 739,
	47, 14, 738, 737, 734, 732, 715, 69, 714, 44,
	32, 713, 712, 711, 11, 710, 709, 708, 42, 707,
	706, 72, 174, 705, 96,
}
var yyR1 = [...]int{

	0, 159, 160, 160, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 119,
	119, 16, 16, 16, 16, 16, 19, 150, 152, 135,
	135, 134, 134, 136, 136, 137, 137, 137, 151, 151,
	151, 147, 122, 122, 122, 156, 156, 157, 157, 158,
	158, 158, 158, 158, 158, 158, 125, 125, 123, 123,
	123, 123, 123, 123, 123, 124, 124, 124, 124, 124,
	126, 126, 126, 126, 126, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 146,
	146, 128, 128, 140, 140, 141, 141, 141, 138, 138,
	139, 139, 142, 142, 129, 129, 129, 129, 129, 130,
	143, 132, 132, 132, 133, 133, 144, 144, 145, 145,
	131, 148, 148, 153, 153, 153, 153, 153, 149, 149,
	155, 155, 154, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 51, 51, 1, 20, 2, 3,
	4, 4, 5, 5, 5, 5, 6, 6, 6, 6,
	121, 121, 121, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 34, 34, 50, 50, 24, 22,
	23, 23, 23, 23, 163, 25, 26, 26, 27, 27,
	27, 31, 31, 31, 29, 29, 30, 30, 37, 37,
	36, 36, 38, 38, 38, 38, 110, 110, 110, 109,
	109, 40, 40, 41, 41, 42, 42, 43, 43, 43,
	52, 44, 44, 44, 44, 115, 115, 114, 114, 114,
	113, 113, 45, 45, 45, 45, 46, 46, 46, 46,
	47, 47, 49, 49, 48, 48, 53, 53, 53, 53,
	54, 54, 55, 55, 39, 39, 39, 39, 39, 39,
	39, 98, 98, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 35, 35,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 164, 164, 66, 66,
	66, 66, 32, 32, 32, 32, 32, 118, 118, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 78, 78, 33, 33, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 62, 62, 62, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 85, 85, 85, 86, 86, 86, 86,
	87, 87, 87, 59, 59, 59, 59, 59, 59, 88,
	88, 88, 88, 89, 89, 70, 70, 72, 72, 71,
	73, 90, 90, 91, 92, 92, 93, 93, 95, 95,
	95, 94, 94, 94, 96, 96, 99, 99, 100, 100,
	97, 97, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 102, 102, 102, 103, 103, 104, 104, 104,
	107, 107, 108, 108, 111, 111, 112, 112, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 161,
	162, 116, 117, 117, 117,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 2, 9, 8, 4, 7, 4, 4, 4, 0,
	3, 0, 4, 0, 3, 0, 1, 1, 1, 3,
	3, 3, 3, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 1, 2, 1,
	2, 4, 7, 2, 3, 2, 2, 3, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 5, 4, 1, 3, 3, 3, 2, 2,
	3, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	1, 1, 1, 3, 5, 6, 5, 5, 5, 3,
	3, 6, 3, 5, 0, 3, 0, 2, 4, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -159, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 215, 132,
	222, 225, 226, 229, 228, 233, 29, 131, 135, 136,
	-161, 7, 199, 56, -160, 238, -82, 14, -27, 5,
	-25, -163, -25, -25, -25, -25, -150, 56, 191, -104,
	121, 22, -107, 59, -106, 205, 144, 138, 166, 157,
	155, 68, 133, 153, 149, 147, 31, 171, 223, 210,
	148, 19, 230, 142, 143, 170, 207, 38, 169, 165,
	168, 141, 164, 42, 160, 150, 17, 136, 128, 209,
	146, 135, 41, 175, 140, 224, 162, 151, 152, 167,
	139, 163, 137, 176, 211, 159, 156, 123, 180, 181,
	182, 208, 154, 177, 233, 234, 236, 235, 237, -97,
	125, 121, 122, 191, 121, 121, -121, 179, 35, 189,
	114, 183, 184, 186, 188, 121, 59, -105, -106, 74,
	26, 28, 173, 77, 109, 15, 78, 158, 161, 108,
	200, 51, 192, 193, 190, 191, 178, 32, 9, 29,
	131, 25, 102, 116, 81, 82, 217, 134, 27, 132,
	71, 18, 54, 10, 12, 13, 126, 125, 93, 122,
	49, 7, 110, 30, 90, 45, 23, 47, 91, 16,
	194, 195, 34, 204, 104, 52, 39, 75, 69, 72,
	55, 73, 14, 50, 220, 219, 92, 117, 199, 48,
	6, 203, 33, 130, 46, 80, 124, 70, 221, 5,
	22, 8, 53, 127, 196, 197, 198, 37, 218, 79,
	11, 121, -111, 59, -106, -116, -116, 62, 209, -116,
	227, -116, -116, 234, 236, 235, 237, -116, -116, -116,
	-116, -8, -86, 16, 15, -11, -9, -161, 6, 24,
	25, -31, 43, 44, -26, -97, -48, -111, 10, -92,
	-119, -93, 231, 230, -108, -95, -107, -105, 161, 158,
	232, 189, 114, 35, 121, 179, 212, 216, -151, -147,
	59, -100, 126, 122, -100, 121, -99, 126, 59, -99,
	-48, -48, -116, 10, 179, 10, 121, 191, -116, -116,
	185, -116, 188, -48, -116, 62, -116, -71, -161, -71,
	-116, -48, -162, 58, -87, 18, 34, -39, -56, 75,
	-61, 32, 27, -60, -57, -75, -73, -74, 109, 98,
	99, 106, 76, 110, -65, -63, -64, -66, 61, 60,
	62, 63, 64, 65, 69, 70, 71, -107, -111, -71,
	-161, 47, 48, 200, 201, 204, 202, 78, 37, 190,
	198, 197, 196, 194, 195, 192, 193, 126, 191, 104,
	199, 59, -106, -83, -84, -39, -82, -8, -25, 39,
	-29, 25, 67, -49, 30, -48, 33, 111, -48, 57,
	-92, 83, -94, -107, 61, 32, 33, 15, 15, 58,
	57, -122, -125, -127, -126, -123, -124, 155, 156, 109,
	159, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 133, 151, 152, 153, 154, 138, 139, 140, 141,
	142, 143, 144, 146, 147, 148, 149, 150, -111, 75,
	59, -48, -48, -51, -48, 27, 55, -111, -48, -50,
	10, -48, -48, -48, -34, 10, -50, -116, -116, -116,
	-69, -39, -116, -102, 124, 26, 8, 93, 74, 73,
	90, 57, 17, -39, -58, 93, 75, 91, 92, 77,
	95, 94, 105, 98, 99, 100, 101, 102, 103, 104,
	96, 97, 108, 83, 84, 85, 86, 87, 88, 89,
	-98, -161, -74, -161, 112, 113, -61, -61, -61, -61,
	-61, -61, -161, 111, -8, -161, -161, -161, -161, -161,
	-161, -161, -78, -39, -161, -164, -161, -164, -164, -164,
	-164, -164, -164, -164, -161, -161, -161, -161, 57, -85,
	28, 29, -86, -162, -31, -62, -107, 62, 65, -30,
	46, -59, 33, 37, -8, -161, -48, -90, -91, -75,
	-107, -111, -112, -111, -105, -55, 11, -93, -39, -133,
	108, 214, -161, -152, -135, 223, -147, -148, -153, 128,
	22, -149, 19, 122, 23, -156, -157, -158, -142, -129,
	-143, -144, -145, -131, -130, 69, 75, 32, 173, 128,
	23, 22, 68, 55, -138, 176, -128, 56, -128, -128,
	-128, -128, -132, 158, -132, -132, -132, 56, -128, -128,
	-128, -140, 56, -140, -140, -141, 56, -141, 27, 55,
	-101, 117, 223, 200, 119, 116, 120, 115, 173, 158,
	68, 32, 14, 211, 59, 57, -48, -116, -55, -48,
	-116, -116, -116, -86, 187, -116, 57, -162, -48, 41,
	-39, -39, -67, 69, 75, 70, 71, -39, -39, -61,
	-68, -71, -74, 66, 93, 91, 92, 77, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -118, 59, 61, 59, -60, -60, -107,
	-37, 25, -36, -38, 100, -39, -111, -108, -112, -105,
	-162, -8, -36, -36, -39, -39, -36, -29, -76, -77,
	79, -107, -162, -36, -37, -36, -36, -84, -87, -96,
	18, 10, 37, 37, -36, -89, 55, -90, -70, -72,
	-71, -161, -8, -88, -107, -55, 57, 83, 111, -82,
	-39, 59, -161, 59, -136, 173, 83, 56, 23, -149,
	59, 59, -149, -158, 69, 61, 62, 63, 69, 190,
	23, 23, 61, 8, -139, 177, 62, -132, -132, -133,
	33, -133, -133, -133, -146, 61, 62, 62, -48, -116,
	-102, -103, 122, 23, 83, 124, 129, 129, 129, -48,
	-116, -116, 61, -39, -116, 42, 69, 70, 71, -68,
	-61, -61, -61, -35, 134, 74, -162, -162, -36, 57,
	-110, -109, 26, -107, 61, 111, -161, 111, -162, -162,
	-162, 57, 127, 26, -162, -36, -79, -77, 81, -39,
	-162, -162, -162, -162, -162, -48, -40, 10, 31, -89,
	57, -162, -162, -162, 57, 111, -82, -91, -39, -108,
	-86, 59, -162, -134, 32, 83, 59, -155, -154, -107,
	59, 59, 190, 58, -133, -133, 59, 109, 58, 57,
	57, 58, 57, -117, -161, -108, -48, -116, 59, 158,
	-150, 59, -147, -35, 74, -61, -61, -162, -38, -109,
	100, -112, -37, -108, -120, 109, 155, 133, 153, 149,
	170, 160, 175, 151, 176, -118, -120, 205, -82, 82,
	-39, 80, -55, -41, -42, -43, -44, -52, -74, -161,
	-48, 23, -72, 37, -8, -161, -107, -107, -86, -162,
	-117, -137, 230, 224, 161, 62, 58, 57, -128, 61,
	62, 62, 33, -61, 111, -162, -162, -128, -128, -128,
	-141, -128, 143, -128, 143, -162, -162, -161, -33, 203,
	-39, -80, 12, 57, -45, -46, -47, 45, 49, 51,
	46, 47, 48, 52, -115, 26, -41, -161, -114, -113,
	26, -111, 61, 8, -70, -8, 111, -117, 83, 208,
	-154, 58, 58, 59, 100, -132, 59, -61, -162, 61,
	-81, 13, 15, -42, -43, -42, -43, 45, 45, 45,
	50, 45, 50, 45, -46, -111, -162, -53, 53, 125,
	54, -113, -90, -162, -107, 59, 20, -32, 93, 208,
	-39, -69, 55, 55, 45, 45, 122, 122, 122, 21,
	-162, 206, 52, 209, -39, -39, -161, -161, -161, 42,
	207, 210, -54, -107, -54, -54, 42, -162, 57, -162,
	-162, 208, -107, 209, 210,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 418, 0, 204, 204, 204, 204, 204, 0,
	487, 470, 0, 0, 0, 0, 0, 0, 661, 661,
	0, 661, 0, 661, 661, 0, 661, 661, 661, 661,
	0, 33, 34, 659, 1, 3, 426, 0, 0, 208,
	211, 206, 470, 0, 0, 0, 41, 0, 468, 0,
	468, 488, 489, 490, 491, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 0,
	471, 466, 0, 466, 0, 0, 661, 578, 535, 509,
	511, 661, 661, 0, 661, 577, 180, 181, 182, 498,
	499, 500, 501, 502, 503, 504, 505, 506, 507, 508,
	510, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 0, 199, 494, 495, 168, 169, 661, 0, 172,
	661, 174, 175, 0, 0, 661, 0, 200, 201, 202,
	203, 27, 430, 0, 0, 418, 29, 0, 204, 209,
	210, 214, 212, 213, 205, 0, 0, 264, 0, 37,
	0, 454, 39, -2, 0, 0, 492, 493, -2, 506,
	460, 509, 511, 535, 577, 578, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	166, 167, 183, 0, 196, 0, 0, 0, 189, 190,
	194, 192, 196, 661, 170, 661, 173, 661, 0, 661,
	178, 482, 28, 660, 23, 0, 0, 427, 274, 0,
	279, 281, 0, 316, 317, 318, 319, 320, 0, 0,
	0, 0, 0, 0, 342, 343, 344, 345, 404, 405,
	406, 407, 408, 409, 410, 283, 284, 401, 0, 450,
	0, 0, 0, 0, 0, 0, 0, 392, 0, 366,
	366, 366, 366, 366, 366, 366, 366, 0, 0, 0,
	0, -2, -2, 419, 420, 423, 426, 27, 211, 0,
	216, 215, 207, 0, 0, 263, 0, 0, 272, 0,
	38, 0, 134, 461, 462, 463, 459, 0, 0, 49,
	0, 65, 118, 63, 64, 111, 77, 111, 111, 111,
	111, 131, 131, 131, 131, 103, 104, 105, 106, 107,
	0, 90, 111, 111, 111, 94, 78, 79, 80, 81,
	82, 83, 84, 113, 113, 113, 115, 115, 44, 0,
	0, 46, 0, 161, 164, 467, 0, 163, 661, 272,
	0, 661, 661, 661, 426, 0, 661, 198, 171, 176,
	0, 314, 177, 0, 483, 484, 431, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 302, 303, 304, 305, 306, 307,
	280, 0, 294, 0, 0, 0, 336, 337, 338, 339,
	340, 0, 218, 0, 27, 0, 0, 0, 0, 0,
	0, 214, 0, 393, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 365, 0, 218, 0, 0, 0, 422,
	424, 425, 430, 30, 214, 0, 411, 0, 0, 0,
	217, 443, 0, 0, -2, 0, 262, 272, 451, 0,
	401, 0, 265, 496, 497, 418, 0, 455, 456, 457,
	0, 0, 0, 47, 53, 0, 59, 60, 0, 0,
	0, 0, 0, 148, 149, 61, 66, 67, 69, 70,
	71, 72, 73, 74, 75, 122, 0, 0, 130, 0,
	137, 139, 0, 0, 120, 119, 76, 0, 131, 131,
	97, 98, 134, 0, 134, 134, 134, 0, 91, 92,
	93, 85, 0, 86, 87, 88, 0, 89, 469, 0,
	661, 482, 0, 479, 0, 477, 0, 472, 473, 474,
	475, 476, 478, 480, 481, 0, 162, 184, 661, 197,
	186, 187, 188, 661, 0, 193, 0, 449, 661, 0,
	275, 276, 278, 295, 0, 297, 299, 428, 429, 285,
	286, 310, 311, 312, 0, 0, 0, 0, 308, 290,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 335, 377, 378, 0, 333, 334, 341,
	0, 0, 219, 220, 222, 226, 0, 402, 0, -2,
	313, 27, 0, 0, 0, 0, 0, 0, 399, 396,
	0, 0, 367, 0, 0, 0, 0, 421, 24, 0,
	464, 465, 412, 413, 231, 31, 0, 443, 433, 445,
	447, 0, 27, 0, 439, 418, 0, 0, 0, 426,
	273, 135, 0, 0, 51, 0, 0, 0, 143, 0,
	145, 146, 0, 68, 123, 124, 125, 126, 127, 128,
	136, 138, 140, 0, 62, 121, 0, 134, 134, 99,
	0, 100, 101, 102, 0, 109, 0, 0, 662, 153,
	0, 661, 485, 486, 0, 0, 0, 0, 0, 165,
	185, 191, 195, 315, 179, 432, 296, 298, 300, 287,
	308, 291, 0, 288, 0, 0, 282, 346, 0, 0,
	223, 227, 0, 229, 230, 0, 218, 0, -2, 349,
	350, 0, 0, 0, 0, 418, 0, 397, 0, 0,
	357, 368, 369, 370, 371, 25, 272, 0, 0, 32,
	0, 448, -2, 0, 0, 0, 426, 452, 453, 402,
	36, 0, 662, 55, 0, 0, 50, 0, 150, 111,
	144, 147, 129, 112, 95, 96, 132, 133, 108, 0,
	0, 116, 0, 45, 663, 664, 154, 155, 156, 0,
	158, 159, 160, 289, 0, 309, 292, 347, 221, 228,
	224, 0, 0, 403, 0, 111, 111, 382, 111, 115,
	385, 111, 387, 111, 390, 0, 0, 0, 394, 356,
	400, 0, 414, 232, 233, 235, 236, 237, 245, 0,
	247, 0, 446, 0, -2, 0, 441, 440, 35, 662,
	43, 48, 56, 57, 0, 54, 141, 0, 152, 110,
	0, 0, 0, 293, 0, 348, 351, 379, 131, 383,
	384, 386, 388, 389, 391, 353, 352, 0, 0, 0,
	398, 416, 0, 0, 0, 0, 0, 252, 0, 0,
	255, 0, 0, 0, 0, 246, 0, 0, 266, 248,
	0, 250, 251, 0, 436, 27, 0, 42, 0, 0,
	151, 114, 117, 157, 225, 380, 381, 372, 355, 395,
	26, 0, 0, 234, 241, 0, 244, 253, 254, 256,
	0, 258, 0, 260, 261, 238, 239, 240, 0, 0,
	0, 249, 444, -2, 442, 52, 0, 0, 0, 0,
	417, 415, 0, 0, 257, 259, 0, 0, 0, 142,
	354, 0, 0, 0, 242, 243, 0, 0, 0, 373,
	0, 376, 0, 270, 0, 0, 374, 267, 0, 268,
	269, 0, 271, 0, 375,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 238,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:296
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:301
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:302
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:306
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:330
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:342
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:349
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:355
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:359
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:365
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:369
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:376
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:409
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:415
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:425
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:435
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:442
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:448
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:456
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = string(yyDollar[6].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:464
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:472
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:479
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:490
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:497
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
			yyVAL.TableOptions.Type = yyDollar[4].str
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:504
		{
			yyVAL.str = ""
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:508
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:513
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:517
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:522
		{
			yyVAL.str = ""
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:526
		{
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:530
		{
			yyVAL.str = NormalTableType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.str = GlobalTableType
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.str = SingleTableType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:550
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:554
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:560
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:582
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:586
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:658
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:811
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.optVal = nil
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:820
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:829
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:837
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:841
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:847
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:855
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:864
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:879
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:885
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:889
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:897
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:901
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:913
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:918
		{
			yyVAL.str = ""
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:922
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:926
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:931
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:941
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:954
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:970
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:974
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:980
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:984
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:988
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:992
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:996
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1033
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1038
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1066
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1074
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1079
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.statement = &Xa{}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.statement = &Explain{}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1196
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1200
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1212
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1216
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1220
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.tableName = TableName{}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1246
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.statement = &OtherRead{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.statement = &OtherRead{}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1281
		{
			setAllowComments(yylex, true)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1285
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.bytes2 = nil
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1295
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.str = UnionStr
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.str = UnionAllStr
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.str = UnionDistinctStr
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.str = SQLCacheStr
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.str = ""
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.str = DistinctStr
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.str = ""
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.str = StraightJoinHint
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.selectExprs = nil
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1373
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.empty = struct{}{}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.empty = struct{}{}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.str = JoinStr
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.str = JoinStr
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = JoinStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.str = StraightJoinStr
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.str = LeftJoinStr
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.str = LeftJoinStr
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.str = RightJoinStr
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.str = RightJoinStr
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.str = NaturalJoinStr
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1536
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.indexHints = nil
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1583
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = nil
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = ""
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1676
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1680
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 293:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1684
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.str = IsNullStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.str = IsNotNullStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.str = IsTrueStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1706
		{
			yyVAL.str = IsNotTrueStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = IsFalseStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = IsNotFalseStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.str = EqualStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.str = LessThanStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.str = GreaterThanStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.str = LessEqualStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.str = GreaterEqualStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.str = NotEqualStr
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1789
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1833
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1837
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1873
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1881
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 354:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.str = BooleanModeStr
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = QueryExpansionStr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2077
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2081
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2115
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2119
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.expr = nil
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.str = string("")
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.expr = &NullVal{}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2233
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.exprs = nil
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.orderBy = nil
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.str = AscScr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2285
		{
			yyVAL.str = AscScr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2289
		{
			yyVAL.str = DescScr
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.limit = nil
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.str = ForUpdateStr
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.str = ShareModeStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2340
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2353
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.updateExprs = nil
		}
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.bytes = []byte("charset")
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2471
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.expr = &Default{}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.byt = 0
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.byt = 1
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.byt = 0
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.byt = 1
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.str = IgnoreStr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2532
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2554
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2564
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2758
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2767
		{
			decNesting(yylex)
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2772
		{
			forceEOF(yylex)
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2777
		{
			forceEOF(yylex)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2781
		{
			forceEOF(yylex)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2785
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
