// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const WARNINGS = 57505
const VARIABLES = 57506
const EVENTS = 57507
const BINLOG = 57508
const GTID = 57509
const STATUS = 57510
const COLUMNS = 57511
const FIELDS = 57512
const CURRENT_TIMESTAMP = 57513
const DATABASE = 57514
const CURRENT_DATE = 57515
const CURRENT_TIME = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const UTC_DATE = 57519
const UTC_TIME = 57520
const UTC_TIMESTAMP = 57521
const REPLACE = 57522
const CONVERT = 57523
const CAST = 57524
const GROUP_CONCAT = 57525
const SEPARATOR = 57526
const MATCH = 57527
const AGAINST = 57528
const BOOLEAN = 57529
const LANGUAGE = 57530
const WITH = 57531
const QUERY = 57532
const EXPANSION = 57533
const UNUSED = 57534
const PARTITION = 57535
const PARTITIONS = 57536
const HASH = 57537
const LIST = 57538
const XA = 57539
const DISTRIBUTED = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556
const RADON = 57557
const ATTACH = 57558
const ATTACHLIST = 57559
const DETACH = 57560
const RESHARD = 57561

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 178,
	83, 670,
	-2, 40,
	-1, 183,
	83, 547,
	-2, 495,
	-1, 409,
	111, 531,
	-2, 527,
	-1, 410,
	111, 532,
	-2, 528,
	-1, 437,
	158, 56,
	161, 56,
	-2, 69,
	-1, 476,
	1, 50,
	237, 50,
	-2, 56,
	-1, 591,
	5, 27,
	-2, 471,
	-1, 614,
	158, 56,
	161, 56,
	-2, 70,
	-1, 679,
	1, 51,
	237, 51,
	-2, 56,
	-1, 764,
	111, 534,
	-2, 530,
	-1, 893,
	5, 28,
	-2, 350,
	-1, 917,
	5, 28,
	-2, 472,
	-1, 1004,
	5, 27,
	-2, 474,
	-1, 1107,
	5, 28,
	-2, 475,
}

const yyPrivate = 57344

const yyLast = 6754

var yyAct = [...]int{

	410, 497, 953, 1144, 1110, 594, 1049, 1063, 363, 995,
	662, 936, 385, 994, 675, 1060, 793, 974, 930, 387,
	748, 56, 886, 794, 551, 3, 763, 755, 604, 758,
	308, 74, 157, 595, 309, 878, 608, 66, 139, 790,
	811, 774, 725, 72, 705, 955, 622, 352, 637, 615,
	418, 671, 412, 182, 176, 166, 631, 490, 148, 150,
	149, 151, 500, 55, 139, 361, 74, 145, 311, 814,
	365, 305, 680, 625, 1111, 156, 306, 1158, 181, 610,
	611, 1114, 518, 517, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 1143, 1157, 529, 142, 1132, 757,
	1155, 1073, 1142, 987, 1131, 388, 50, 1043, 940, 620,
	324, 179, 116, 117, 825, 826, 827, 328, 335, 702,
	139, 139, 828, 323, 330, 331, 835, 350, 655, 816,
	1080, 174, 815, 959, 562, 663, 849, 139, 1038, 1036,
	861, 95, 896, 88, 860, 859, 318, 313, 1102, 1104,
	887, 856, 139, 502, 502, 82, 50, 115, 506, 505,
	135, 858, 92, 316, 162, 98, 93, 634, 345, 347,
	634, 139, 1124, 60, 139, 507, 74, 1123, 325, 1122,
	118, 74, 414, 73, 134, 889, 816, 415, 181, 815,
	314, 136, 78, 431, 1115, 696, 120, 506, 505, 62,
	63, 64, 65, 820, 119, 317, 541, 542, 1070, 1028,
	1025, 920, 897, 695, 507, 892, 890, 803, 358, 656,
	1103, 179, 760, 522, 523, 524, 525, 526, 519, 663,
	550, 529, 425, 944, 609, 519, 1148, 1023, 529, 122,
	698, 829, 143, 529, 504, 507, 129, 107, 707, 694,
	855, 501, 501, 812, 346, 346, 1130, 79, 857, 97,
	802, 105, 76, 621, 624, 429, 633, 989, 50, 633,
	623, 81, 87, 775, 732, 103, 104, 80, 108, 509,
	775, 77, 903, 945, 94, 477, 102, 1024, 730, 731,
	729, 871, 872, 873, 90, 83, 691, 689, 685, 99,
	688, 690, 824, 123, 1000, 133, 131, 428, 121, 101,
	128, 86, 420, 139, 898, 1018, 139, 139, 139, 508,
	312, 139, 505, 1017, 320, 139, 139, 75, 706, 91,
	53, 96, 85, 106, 847, 506, 505, 416, 507, 693,
	728, 124, 132, 126, 127, 130, 84, 100, 846, 836,
	577, 578, 507, 89, 692, 1083, 109, 110, 112, 111,
	113, 506, 505, 343, 651, 650, 506, 505, 171, 506,
	505, 1016, 114, 991, 647, 931, 929, 932, 507, 687,
	865, 355, 413, 507, 864, 749, 507, 750, 845, 832,
	697, 315, 975, 493, 1021, 506, 505, 653, 718, 720,
	721, 1151, 351, 686, 719, 1127, 1125, 351, 1047, 351,
	652, 645, 507, 1077, 1014, 1013, 977, 646, 74, 961,
	958, 1020, 939, 139, 321, 322, 139, 938, 74, 821,
	583, 539, 979, 596, 983, 170, 978, 597, 976, 311,
	181, 341, 806, 981, 884, 351, 591, 579, 950, 949,
	947, 946, 599, 980, 919, 351, 349, 751, 982, 984,
	478, 664, 665, 666, 319, 538, 540, 711, 351, 626,
	649, 22, 581, 179, 351, 423, 438, 437, 426, 601,
	1076, 1075, 606, 57, 941, 139, 791, 711, 801, 801,
	677, 549, 139, 139, 552, 553, 554, 555, 556, 557,
	558, 139, 561, 563, 563, 563, 563, 563, 563, 563,
	563, 571, 572, 573, 574, 648, 24, 24, 912, 701,
	915, 24, 1047, 681, 673, 674, 884, 592, 948, 605,
	161, 884, 726, 564, 565, 566, 567, 568, 569, 570,
	699, 427, 612, 580, 589, 575, 53, 1003, 590, 74,
	520, 521, 522, 523, 524, 525, 526, 519, 657, 676,
	529, 754, 74, 181, 1118, 884, 53, 53, 67, 498,
	817, 53, 672, 667, 776, 801, 791, 766, 683, 484,
	510, 163, 587, 727, 1121, 543, 544, 545, 546, 547,
	548, 1120, 1095, 74, 1093, 792, 762, 1096, 596, 1094,
	779, 1092, 597, 1091, 764, 799, 1149, 752, 753, 772,
	795, 498, 1141, 311, 964, 167, 168, 797, 560, 870,
	479, 480, 482, 800, 714, 712, 804, 783, 782, 488,
	489, 53, 1140, 788, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 50, 809, 529, 419,
	787, 1026, 607, 767, 768, 934, 353, 771, 552, 840,
	434, 424, 813, 417, 810, 658, 659, 660, 661, 837,
	838, 778, 354, 780, 781, 1097, 625, 1055, 1056, 765,
	668, 669, 670, 913, 139, 823, 789, 819, 682, 822,
	483, 777, 1001, 1059, 164, 165, 796, 419, 50, 839,
	139, 841, 842, 843, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 807, 808, 529, 831,
	830, 818, 1128, 1112, 158, 1086, 681, 593, 715, 716,
	724, 722, 723, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 853, 726,
	786, 850, 848, 436, 867, 1046, 435, 159, 785, 57,
	1085, 74, 527, 528, 520, 521, 522, 523, 524, 525,
	526, 519, 874, 888, 529, 498, 605, 491, 769, 770,
	1051, 1054, 1055, 1056, 1052, 139, 1053, 1057, 492, 700,
	377, 376, 378, 379, 380, 381, 708, 709, 413, 382,
	727, 487, 173, 1067, 833, 713, 503, 59, 311, 311,
	596, 61, 54, 1, 597, 902, 181, 1109, 74, 679,
	678, 636, 921, 635, 935, 628, 614, 613, 805, 307,
	937, 627, 914, 844, 642, 922, 641, 925, 640, 638,
	834, 654, 926, 927, 1022, 1019, 619, 618, 617, 924,
	616, 643, 74, 644, 139, 933, 883, 764, 639, 441,
	442, 440, 311, 444, 181, 443, 439, 175, 891, 1058,
	1062, 885, 900, 69, 942, 943, 854, 684, 537, 881,
	784, 180, 430, 882, 798, 576, 411, 1084, 74, 1045,
	951, 952, 962, 74, 893, 894, 895, 960, 901, 899,
	888, 559, 773, 181, 905, 181, 906, 907, 908, 909,
	969, 963, 364, 139, 968, 717, 986, 971, 985, 972,
	74, 74, 988, 375, 916, 917, 918, 372, 993, 74,
	866, 1011, 1006, 1007, 868, 795, 762, 928, 973, 1002,
	992, 181, 374, 1004, 764, 373, 582, 588, 511, 875,
	876, 877, 1012, 362, 1008, 356, 1101, 954, 997, 518,
	517, 527, 528, 520, 521, 522, 523, 524, 525, 526,
	519, 386, 481, 529, 1051, 1054, 1055, 1056, 1052, 329,
	1053, 1057, 125, 998, 1119, 421, 1050, 1048, 851, 996,
	911, 486, 1042, 1113, 1034, 586, 25, 58, 904, 879,
	139, 139, 169, 14, 862, 21, 15, 13, 12, 137,
	74, 967, 1071, 29, 10, 74, 9, 8, 999, 498,
	1068, 796, 181, 795, 1005, 923, 1074, 937, 7, 74,
	1069, 6, 5, 4, 954, 172, 160, 23, 2, 20,
	19, 181, 18, 1079, 17, 16, 11, 0, 139, 139,
	139, 139, 0, 0, 1009, 1010, 0, 0, 1088, 139,
	1090, 1087, 139, 1089, 1098, 139, 0, 0, 0, 0,
	998, 74, 1105, 1106, 973, 0, 596, 0, 0, 0,
	597, 0, 0, 1108, 0, 0, 766, 0, 1117, 910,
	0, 172, 172, 1041, 0, 0, 0, 0, 965, 966,
	1029, 0, 1030, 0, 0, 1061, 0, 0, 172, 796,
	0, 50, 0, 1039, 1040, 954, 1072, 0, 998, 998,
	998, 998, 0, 172, 0, 0, 990, 74, 0, 1139,
	1138, 0, 998, 0, 0, 0, 74, 74, 74, 181,
	1146, 1147, 172, 0, 0, 172, 0, 0, 1145, 1145,
	1145, 880, 74, 999, 999, 999, 999, 1015, 956, 0,
	0, 0, 0, 0, 1156, 0, 0, 1061, 1154, 0,
	1082, 518, 517, 527, 528, 520, 521, 522, 523, 524,
	525, 526, 519, 1027, 0, 529, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1031, 1032, 1107, 1033, 0,
	0, 1035, 0, 1037, 0, 0, 0, 0, 24, 51,
	26, 27, 0, 0, 1044, 0, 0, 0, 0, 0,
	0, 140, 0, 0, 0, 0, 0, 0, 1135, 1136,
	1137, 46, 954, 0, 0, 28, 0, 1126, 36, 0,
	0, 1129, 0, 517, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 346, 37, 529, 0, 53, 0,
	1081, 141, 0, 144, 0, 146, 147, 0, 152, 153,
	154, 155, 1150, 0, 1152, 1153, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 172, 172, 172,
	0, 0, 485, 0, 0, 0, 172, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 498,
	0, 0, 0, 0, 0, 0, 30, 31, 32, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 47, 39, 0, 0, 48, 49, 33,
	0, 1133, 1134, 0, 0, 326, 327, 0, 332, 333,
	334, 0, 336, 337, 338, 339, 340, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 344, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 598, 600, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 95, 0, 88,
	0, 0, 0, 40, 0, 0, 41, 42, 0, 44,
	43, 82, 0, 0, 45, 0, 0, 0, 92, 0,
	0, 98, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 73,
	0, 0, 0, 172, 172, 0, 0, 0, 78, 0,
	0, 0, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 0, 0, 529, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 761, 600, 107, 0, 761, 761, 0, 0, 761,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 0,
	0, 0, 0, 761, 761, 761, 761, 81, 87, 0,
	0, 103, 104, 80, 108, 0, 0, 77, 761, 0,
	94, 598, 102, 494, 0, 495, 0, 496, 0, 499,
	90, 83, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 632, 0,
	0, 630, 634, 75, 0, 91, 0, 96, 85, 106,
	82, 0, 0, 0, 0, 0, 0, 92, 0, 447,
	98, 93, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 0, 310, 0,
	0, 0, 0, 459, 0, 0, 0, 78, 464, 465,
	466, 467, 468, 469, 470, 172, 471, 472, 473, 474,
	475, 460, 461, 462, 463, 445, 446, 0, 0, 448,
	0, 172, 449, 450, 451, 452, 453, 454, 455, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 633, 107, 0, 0, 0, 0, 629, 0, 0,
	703, 704, 79, 0, 97, 710, 105, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 87, 761, 0,
	103, 104, 80, 108, 0, 0, 77, 0, 0, 94,
	0, 102, 0, 0, 761, 0, 0, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 86, 0, 0, 0,
	0, 0, 0, 598, 0, 600, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 24, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 88, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	82, 109, 110, 112, 111, 113, 0, 92, 0, 0,
	98, 93, 0, 0, 0, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 0,
	0, 0, 600, 761, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 0, 0, 863, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 869, 77, 0, 0, 94,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 86, 0, 0, 0,
	0, 172, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 0, 0, 0, 172,
	172, 172, 172, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 172, 0, 0, 1065, 0, 0, 598,
	0, 288, 273, 233, 291, 209, 224, 303, 226, 227,
	263, 194, 243, 95, 222, 88, 0, 0, 289, 240,
	0, 212, 187, 219, 188, 210, 237, 82, 208, 275,
	246, 225, 0, 297, 92, 255, 957, 98, 93, 0,
	0, 239, 278, 241, 272, 232, 264, 201, 254, 292,
	223, 260, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 257, 286, 221, 259, 262,
	186, 256, 0, 190, 195, 302, 284, 215, 216, 0,
	0, 0, 0, 0, 0, 0, 238, 242, 269, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	253, 0, 0, 0, 197, 192, 236, 0, 0, 0,
	200, 0, 214, 270, 0, 0, 0, 279, 231, 107,
	285, 229, 228, 293, 266, 0, 276, 211, 220, 79,
	218, 97, 261, 105, 76, 282, 277, 251, 234, 235,
	191, 0, 268, 81, 87, 207, 258, 103, 104, 80,
	108, 196, 299, 77, 184, 298, 94, 183, 102, 283,
	252, 248, 193, 281, 250, 247, 90, 83, 0, 189,
	0, 99, 290, 304, 206, 280, 0, 0, 0, 0,
	0, 101, 198, 86, 204, 205, 202, 203, 244, 245,
	294, 295, 296, 271, 199, 0, 0, 274, 249, 75,
	0, 91, 301, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 217, 300, 267, 265, 287, 0, 84, 100,
	0, 0, 0, 0, 0, 178, 177, 185, 109, 110,
	112, 111, 113, 288, 273, 233, 291, 209, 224, 303,
	226, 227, 263, 194, 243, 95, 222, 88, 0, 0,
	289, 240, 0, 212, 187, 219, 188, 210, 237, 82,
	208, 275, 246, 225, 0, 297, 92, 255, 0, 98,
	93, 0, 0, 239, 278, 241, 272, 232, 264, 201,
	254, 292, 223, 260, 53, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 257, 286, 221,
	259, 262, 186, 256, 0, 190, 195, 302, 284, 215,
	216, 0, 0, 0, 0, 0, 0, 0, 238, 242,
	269, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 253, 0, 0, 0, 197, 192, 236, 0,
	0, 0, 200, 0, 214, 270, 0, 0, 0, 279,
	231, 107, 285, 229, 228, 293, 266, 0, 276, 211,
	220, 79, 218, 97, 261, 105, 76, 282, 277, 251,
	234, 235, 191, 0, 268, 81, 87, 207, 258, 103,
	104, 80, 108, 196, 299, 77, 602, 298, 94, 603,
	102, 283, 252, 248, 193, 281, 250, 247, 90, 83,
	0, 189, 0, 99, 290, 304, 206, 280, 0, 0,
	0, 0, 0, 101, 198, 86, 204, 205, 202, 203,
	244, 245, 294, 295, 296, 271, 199, 0, 0, 274,
	249, 75, 0, 91, 301, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 217, 300, 267, 265, 287, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 0,
	109, 110, 112, 111, 113, 288, 273, 233, 291, 209,
	224, 303, 226, 227, 263, 194, 243, 95, 222, 88,
	0, 0, 289, 240, 0, 212, 187, 219, 188, 210,
	237, 82, 208, 275, 246, 225, 0, 297, 92, 255,
	0, 98, 93, 0, 0, 239, 278, 241, 272, 232,
	264, 201, 254, 292, 223, 260, 0, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 257,
	286, 221, 259, 262, 186, 256, 0, 190, 195, 302,
	284, 215, 216, 0, 0, 0, 0, 0, 0, 0,
	238, 242, 269, 230, 0, 0, 0, 0, 0, 0,
	1078, 0, 213, 0, 253, 0, 0, 0, 197, 192,
	236, 0, 0, 0, 200, 0, 214, 270, 0, 0,
	0, 279, 231, 107, 285, 229, 228, 293, 266, 0,
	276, 211, 220, 79, 218, 97, 261, 105, 76, 282,
	277, 251, 234, 235, 191, 0, 268, 81, 87, 207,
	258, 103, 104, 80, 108, 196, 299, 77, 602, 298,
	94, 603, 102, 283, 252, 248, 193, 281, 250, 247,
	90, 83, 0, 189, 0, 99, 290, 304, 206, 280,
	0, 0, 0, 0, 0, 101, 198, 86, 204, 205,
	202, 203, 244, 245, 294, 295, 296, 271, 199, 0,
	0, 274, 249, 75, 0, 91, 301, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 217, 300, 267, 265,
	287, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 288, 273, 233,
	291, 209, 224, 303, 226, 227, 263, 194, 243, 95,
	222, 88, 0, 0, 289, 240, 0, 212, 187, 219,
	188, 210, 237, 82, 208, 275, 246, 225, 0, 297,
	92, 255, 0, 98, 93, 0, 0, 239, 278, 241,
	272, 232, 264, 201, 254, 292, 223, 260, 0, 0,
	0, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 257, 286, 221, 259, 262, 186, 256, 0, 190,
	195, 302, 284, 215, 216, 0, 0, 0, 0, 0,
	0, 0, 238, 242, 269, 230, 0, 0, 0, 0,
	0, 0, 970, 0, 213, 0, 253, 0, 0, 0,
	197, 192, 236, 0, 0, 0, 200, 0, 214, 270,
	0, 0, 0, 279, 231, 107, 285, 229, 228, 293,
	266, 0, 276, 211, 220, 79, 218, 97, 261, 105,
	76, 282, 277, 251, 234, 235, 191, 0, 268, 81,
	87, 207, 258, 103, 104, 80, 108, 196, 299, 77,
	602, 298, 94, 603, 102, 283, 252, 248, 193, 281,
	250, 247, 90, 83, 0, 189, 0, 99, 290, 304,
	206, 280, 0, 0, 0, 0, 0, 101, 198, 86,
	204, 205, 202, 203, 244, 245, 294, 295, 296, 271,
	199, 0, 0, 274, 249, 75, 0, 91, 301, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 217, 300,
	267, 265, 287, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 0, 109, 110, 112, 111, 113, 288,
	273, 233, 291, 209, 224, 303, 226, 227, 263, 194,
	243, 95, 222, 88, 0, 0, 289, 240, 0, 212,
	187, 219, 188, 210, 237, 82, 208, 275, 246, 225,
	0, 297, 92, 255, 0, 98, 93, 0, 0, 239,
	278, 241, 272, 232, 264, 201, 254, 292, 223, 260,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 257, 286, 221, 259, 262, 186, 256,
	0, 190, 195, 302, 284, 215, 216, 0, 0, 0,
	0, 0, 0, 0, 238, 242, 269, 230, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 0, 253, 0,
	0, 0, 197, 192, 236, 0, 0, 0, 200, 0,
	214, 270, 0, 0, 0, 279, 231, 107, 285, 229,
	228, 293, 266, 0, 276, 211, 220, 79, 218, 97,
	261, 105, 76, 282, 277, 251, 234, 235, 191, 0,
	268, 81, 87, 207, 258, 103, 104, 80, 108, 196,
	299, 77, 184, 298, 94, 183, 102, 283, 252, 248,
	193, 281, 250, 247, 90, 83, 0, 189, 0, 99,
	290, 304, 206, 280, 0, 0, 0, 0, 0, 101,
	198, 86, 204, 205, 202, 203, 244, 245, 294, 295,
	296, 271, 199, 0, 0, 274, 249, 75, 0, 91,
	301, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	217, 300, 267, 265, 287, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 185, 109, 110, 112, 111,
	113, 288, 273, 233, 291, 209, 224, 303, 226, 227,
	263, 194, 243, 95, 222, 88, 0, 0, 289, 240,
	0, 212, 187, 219, 188, 210, 237, 82, 208, 275,
	246, 225, 0, 297, 92, 255, 0, 98, 93, 0,
	0, 239, 278, 241, 272, 232, 264, 201, 254, 292,
	223, 260, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 257, 286, 221, 259, 262,
	186, 256, 0, 190, 195, 302, 284, 215, 216, 0,
	0, 0, 0, 0, 0, 0, 238, 242, 269, 230,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	253, 0, 0, 0, 197, 192, 236, 0, 0, 0,
	200, 0, 214, 270, 0, 0, 0, 279, 231, 107,
	285, 229, 228, 293, 266, 0, 276, 211, 220, 79,
	218, 97, 261, 105, 76, 282, 277, 251, 234, 235,
	191, 0, 268, 81, 87, 207, 258, 103, 104, 80,
	108, 196, 299, 77, 602, 298, 94, 603, 102, 283,
	252, 248, 193, 281, 250, 247, 90, 83, 0, 189,
	0, 99, 290, 304, 206, 280, 0, 0, 0, 0,
	0, 101, 198, 86, 204, 205, 202, 203, 244, 245,
	294, 295, 296, 271, 199, 0, 0, 274, 249, 75,
	0, 91, 301, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 217, 300, 267, 265, 287, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 288, 273, 233, 291, 209, 224, 303,
	226, 227, 263, 194, 243, 95, 222, 88, 0, 0,
	289, 240, 0, 212, 187, 219, 188, 210, 237, 82,
	208, 275, 246, 225, 0, 297, 92, 255, 0, 98,
	93, 0, 0, 239, 278, 241, 272, 232, 264, 201,
	254, 292, 223, 260, 0, 0, 0, 409, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 257, 286, 221,
	259, 262, 186, 256, 0, 190, 195, 302, 284, 215,
	216, 0, 0, 0, 0, 0, 0, 0, 238, 242,
	269, 230, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 0, 253, 0, 0, 0, 197, 192, 236, 0,
	0, 0, 200, 0, 214, 270, 0, 0, 0, 279,
	231, 107, 285, 229, 228, 293, 266, 0, 276, 211,
	220, 79, 218, 97, 261, 105, 76, 282, 277, 251,
	234, 235, 191, 0, 268, 81, 87, 207, 258, 103,
	104, 80, 108, 196, 299, 77, 602, 298, 94, 603,
	102, 283, 252, 248, 193, 281, 250, 247, 90, 83,
	0, 189, 0, 99, 290, 304, 206, 280, 0, 0,
	0, 0, 0, 101, 198, 86, 204, 205, 202, 203,
	244, 245, 294, 295, 296, 271, 199, 0, 0, 274,
	249, 75, 0, 91, 301, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 217, 300, 267, 265, 287, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 0,
	109, 110, 112, 111, 113, 288, 273, 233, 291, 209,
	224, 303, 226, 227, 263, 194, 243, 95, 222, 88,
	0, 0, 289, 240, 0, 212, 187, 219, 188, 210,
	237, 82, 208, 275, 246, 225, 0, 297, 92, 255,
	0, 98, 93, 0, 0, 239, 278, 241, 272, 232,
	264, 201, 254, 292, 223, 260, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 257,
	286, 221, 259, 262, 186, 256, 0, 190, 195, 302,
	284, 215, 216, 0, 0, 0, 0, 0, 0, 0,
	238, 242, 269, 230, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 0, 253, 0, 0, 0, 197, 192,
	236, 0, 0, 0, 200, 0, 214, 270, 0, 0,
	0, 279, 231, 107, 285, 229, 228, 293, 266, 0,
	276, 211, 220, 79, 218, 97, 261, 105, 76, 282,
	277, 251, 234, 235, 191, 0, 268, 81, 87, 207,
	258, 103, 104, 80, 108, 196, 299, 77, 602, 298,
	94, 603, 102, 283, 252, 248, 193, 281, 250, 247,
	90, 83, 0, 189, 0, 99, 290, 304, 206, 280,
	0, 0, 0, 0, 0, 101, 198, 86, 204, 205,
	202, 203, 244, 245, 294, 295, 296, 271, 199, 0,
	0, 274, 249, 75, 0, 91, 301, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 217, 300, 267, 265,
	287, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 95, 0, 88,
	0, 0, 0, 0, 0, 756, 0, 360, 0, 0,
	0, 82, 359, 0, 0, 0, 0, 396, 92, 0,
	0, 98, 93, 0, 0, 0, 0, 389, 390, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 409,
	377, 376, 378, 379, 380, 381, 0, 0, 78, 382,
	383, 384, 0, 0, 0, 357, 370, 0, 395, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	759, 0, 0, 0, 407, 0, 369, 0, 0, 366,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 405, 0, 0, 0,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 87, 0,
	0, 103, 104, 80, 108, 0, 0, 77, 0, 0,
	94, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	90, 83, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 86, 397, 406,
	403, 404, 401, 402, 400, 399, 398, 408, 391, 392,
	394, 0, 393, 75, 0, 91, 0, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 100, 0, 0, 0, 0, 95, 89,
	88, 0, 109, 110, 112, 111, 113, 0, 360, 0,
	0, 0, 82, 359, 0, 0, 0, 0, 396, 92,
	0, 0, 98, 93, 0, 0, 0, 0, 389, 390,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	409, 377, 376, 378, 379, 380, 381, 0, 0, 78,
	382, 383, 384, 0, 0, 0, 357, 370, 0, 395,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 759, 0, 0, 0, 407, 0, 369, 0, 0,
	366, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 405, 0, 0,
	0, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 87,
	0, 0, 103, 104, 80, 108, 0, 0, 77, 0,
	0, 94, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 90, 83, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 86, 397,
	406, 403, 404, 401, 402, 400, 399, 398, 408, 391,
	392, 394, 0, 393, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 95,
	89, 88, 0, 109, 110, 112, 111, 113, 0, 360,
	0, 0, 0, 82, 359, 0, 0, 0, 0, 396,
	92, 0, 0, 98, 93, 0, 0, 0, 0, 389,
	390, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	351, 409, 377, 376, 378, 379, 380, 381, 0, 0,
	78, 382, 383, 384, 0, 0, 0, 357, 370, 0,
	395, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 0, 0, 0, 0, 407, 0, 369, 0,
	0, 366, 371, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 405, 0,
	0, 0, 0, 0, 0, 79, 0, 97, 0, 105,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	87, 0, 0, 103, 104, 80, 108, 0, 0, 77,
	0, 0, 94, 0, 102, 0, 0, 0, 0, 0,
	0, 0, 90, 83, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 86,
	397, 406, 403, 404, 401, 402, 400, 399, 398, 408,
	391, 392, 394, 0, 393, 75, 0, 91, 0, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 0, 24,
	0, 0, 0, 0, 84, 100, 0, 0, 0, 0,
	95, 89, 88, 0, 109, 110, 112, 111, 113, 0,
	360, 0, 0, 0, 82, 359, 0, 0, 0, 0,
	396, 92, 0, 0, 98, 93, 0, 0, 0, 0,
	389, 390, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 409, 377, 376, 378, 379, 380, 381, 0,
	0, 78, 382, 383, 384, 0, 0, 0, 357, 370,
	0, 395, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 367, 368, 0, 0, 0, 0, 407, 0, 369,
	0, 0, 366, 371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 405,
	0, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 87, 0, 0, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 90, 83, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 397, 406, 403, 404, 401, 402, 400, 399, 398,
	408, 391, 392, 394, 0, 393, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 95, 89, 88, 0, 109, 110, 112, 111, 113,
	0, 360, 0, 0, 0, 82, 359, 0, 0, 0,
	0, 396, 92, 0, 0, 98, 93, 0, 0, 0,
	0, 389, 390, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 409, 377, 376, 378, 379, 380, 381,
	0, 0, 78, 382, 383, 384, 0, 0, 0, 357,
	370, 0, 395, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 0, 0, 0, 0, 407, 0,
	369, 0, 0, 366, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	405, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	0, 77, 0, 0, 94, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 86, 397, 406, 403, 404, 401, 402, 400, 399,
	398, 408, 391, 392, 394, 0, 393, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 88, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 82, 109, 110, 112, 111,
	113, 396, 92, 0, 0, 98, 93, 0, 0, 0,
	0, 389, 390, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 409, 377, 376, 378, 379, 380, 381,
	0, 0, 78, 382, 383, 384, 0, 0, 0, 0,
	370, 0, 395, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 0, 0, 0, 0, 407, 0,
	369, 0, 0, 366, 371, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	405, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	0, 77, 0, 95, 94, 88, 102, 0, 71, 0,
	0, 0, 0, 0, 90, 83, 0, 82, 0, 99,
	0, 0, 0, 0, 92, 0, 0, 98, 93, 101,
	0, 86, 397, 406, 403, 404, 401, 402, 400, 399,
	398, 408, 391, 392, 394, 73, 393, 75, 0, 91,
	0, 96, 85, 106, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 0, 107,
	0, 95, 0, 88, 0, 0, 0, 0, 0, 79,
	1064, 97, 0, 105, 76, 82, 0, 0, 0, 0,
	0, 0, 92, 81, 87, 98, 93, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 138, 0, 1066, 90, 83, 0, 0,
	0, 99, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 107, 109, 110,
	112, 111, 113, 0, 0, 24, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 95, 0, 88, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	82, 77, 0, 0, 94, 0, 102, 92, 0, 0,
	98, 93, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 53, 0, 0, 73, 101,
	0, 86, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 0, 0, 95, 0, 88, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 0, 77, 82, 0, 94,
	0, 102, 0, 0, 92, 0, 0, 98, 93, 90,
	83, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 73, 86, 0, 584, 0,
	0, 585, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 95, 0, 88, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 82, 433, 0, 0, 0,
	0, 0, 92, 81, 87, 98, 93, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 73, 0, 432, 90, 83, 0, 0,
	0, 99, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 107, 109, 110,
	112, 111, 113, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 95, 0, 88, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	82, 77, 0, 0, 94, 0, 102, 92, 0, 0,
	98, 93, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 101,
	1066, 86, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 95, 0, 88, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 82, 0,
	0, 0, 0, 0, 0, 92, 81, 87, 98, 93,
	103, 104, 80, 108, 0, 0, 77, 0, 0, 94,
	0, 102, 0, 53, 0, 0, 138, 0, 0, 90,
	83, 0, 0, 0, 99, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	107, 109, 110, 112, 111, 113, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 0, 0, 0, 95,
	0, 88, 0, 0, 81, 87, 0, 0, 103, 104,
	80, 108, 0, 82, 77, 0, 0, 94, 0, 102,
	92, 0, 0, 98, 93, 0, 0, 90, 83, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 101, 889, 86, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 97, 0, 105,
	76, 0, 0, 0, 95, 0, 88, 0, 0, 81,
	87, 0, 0, 103, 104, 80, 108, 422, 82, 77,
	0, 0, 94, 0, 102, 92, 0, 0, 98, 93,
	0, 0, 90, 83, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 101, 0, 86,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 91, 0, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 0, 109, 110, 112, 111, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 95, 0, 88, 0, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 82, 0, 0, 0,
	0, 0, 0, 92, 81, 87, 98, 93, 103, 104,
	80, 108, 0, 0, 77, 0, 0, 94, 0, 102,
	0, 0, 0, 0, 73, 0, 0, 90, 83, 0,
	0, 0, 99, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 107, 109,
	110, 112, 111, 113, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 95, 0, 88,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 82, 77, 0, 0, 94, 0, 102, 92, 0,
	0, 98, 93, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 409,
	101, 0, 86, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 95, 0, 88, 0, 0,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 82,
	0, 0, 0, 0, 0, 0, 92, 81, 87, 98,
	93, 103, 104, 80, 108, 0, 0, 77, 0, 0,
	94, 0, 102, 0, 0, 0, 0, 138, 0, 0,
	90, 83, 0, 0, 0, 99, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 91, 0, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 107, 109, 110, 112, 111, 113, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 0, 0, 0,
	95, 0, 88, 0, 0, 81, 87, 0, 0, 103,
	104, 80, 108, 0, 82, 77, 0, 0, 94, 0,
	102, 92, 0, 0, 98, 93, 0, 0, 90, 83,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 101, 0, 86, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 0,
	109, 110, 112, 111, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 87, 0, 0, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 90, 83, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 0, 109, 110, 112, 111, 113,
	513, 0, 516, 0, 0, 0, 0, 0, 530, 531,
	532, 533, 534, 535, 536, 0, 514, 515, 512, 518,
	517, 527, 528, 520, 521, 522, 523, 524, 525, 526,
	519, 0, 0, 529,
}
var yyPact = [...]int{

	1202, -1000, -174, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 745, 802, -1000, -1000, -1000, -1000, -1000, 512,
	5066, 32, -9, 83, 75, 125, 70, 6358, -1000, -1000,
	35, -1000, -159, -1000, -1000, -175, -1000, -1000, -1000, -1000,
	515, -1000, -1000, -1000, -1000, -1000, 708, 742, 575, 670,
	572, -1000, 32, 6358, 792, 2036, -139, 6483, 21, 68,
	21, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42, -1000, 20, 405, 20, 6358,
	6358, -59, -11, -1000, -1000, -62, -1000, -1000, -1000, -67,
	-1000, -1000, -1000, -1000, -1000, -1000, 6358, -1000, -1000, -1000,
	-1000, -1000, -1000, 301, -1000, -1000, -1000, -1000, 490, 490,
	-1000, 6358, -1000, -1000, -1000, -1000, 416, 638, 4724, 4724,
	745, -1000, 515, -1000, -1000, -1000, 624, -1000, -1000, 245,
	6017, 628, 121, 6358, 484, 2964, -1000, -1000, -1000, 182,
	5534, -1000, -1000, -1000, 627, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 741, 738, 419, -1000, 1510,
	-1000, -1000, 6358, 210, 401, 6358, 6358, 6358, 663, 524,
	6358, -1000, -1000, 791, 6358, 6358, -1000, -1000, 767, 778,
	-1000, -1000, -1000, -1000, -1000, 767, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4724, -1000, -1000, 127,
	-1000, -1000, -1000, 798, 151, 262, -1000, 4724, 6645, 490,
	490, -1000, -1000, 94, -1000, -1000, 4924, 4924, 4924, 4924,
	4924, 4924, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 490, 119, -1000, 4513, 490,
	490, 490, 490, 490, 490, 4724, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, -1000,
	-1000, 488, -1000, 322, 708, 416, 572, 5426, 536, -1000,
	-1000, 511, 6358, -1000, 6250, 3660, 765, 2964, 484, 4724,
	126, -1000, -1000, -1000, -1000, -133, 490, 41, 1579, 342,
	-48, -1000, -1000, 502, -1000, 502, 502, 502, 502, -23,
	-23, -23, -23, -1000, -1000, -1000, -1000, -1000, 517, -1000,
	502, 502, 502, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 516, 516, 516, 503, 503, 644, 661, 523, -1000,
	181, 483, -1000, -1000, 6358, -1000, 708, -65, -1000, -1000,
	237, 6358, 6358, -1000, -1000, -1000, -1000, 410, 296, -1000,
	6358, -1000, -1000, -1000, 583, 4724, 4724, 329, 4724, 4724,
	155, 4924, 274, 197, 4924, 4924, 4924, 4924, 4924, 4924,
	4924, 4924, 4924, 4924, 4924, 4924, 4924, 4924, 4924, 326,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 398, -1000,
	515, 730, 730, 135, 135, 135, 135, 135, 1400, 3880,
	3428, 416, 4513, 4091, 4091, 4724, 4724, 4091, 672, 194,
	296, 6125, -1000, 416, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4091, 4091, 4091, 4091, 4724, -1000, -1000, -1000, 638,
	-1000, 672, 740, -1000, 613, 596, 4091, -1000, 521, 6250,
	490, -1000, 5299, -1000, 518, -1000, 177, -1000, 106, -1000,
	-1000, -1000, -1000, -1000, 745, 4724, -1000, 296, -1000, 383,
	490, 490, 6483, -1000, 41, -1000, -1000, -1000, -1000, -1000,
	170, 170, -29, -1000, -1000, -1000, -1000, -1000, 514, 698,
	144, 370, 147, -1000, -1000, -1000, 342, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 233, 53, -1000, 697,
	-1000, 696, 328, 796, -51, -1000, -1000, 287, -23, -23,
	-1000, -1000, 126, 626, 126, 126, 126, 327, -1000, -1000,
	-1000, -1000, 286, -1000, -1000, -1000, 272, -1000, -1000, 644,
	-1000, 28, -1000, 6358, -1000, 128, 175, 37, 16, 15,
	11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6358,
	-1000, -1000, 323, -1000, -1000, -1000, 319, 4724, -1000, 237,
	-1000, 4724, -1000, -1000, 577, 155, 248, -1000, -1000, 222,
	-1000, -1000, 296, 296, 610, -1000, -1000, -1000, -1000, 274,
	4924, 4924, 4924, 865, 610, 1077, 666, 1148, 135, 123,
	123, 130, 130, 130, 130, 130, 452, 452, -1000, -1000,
	-1000, 416, -1000, -1000, -1000, 416, 4091, 474, -1000, -1000,
	124, 105, 490, 104, -1000, -1000, 416, 387, 387, 85,
	288, 387, 4091, 201, -1000, 4724, 416, -1000, 387, 416,
	387, 387, -1000, -1000, 6358, -1000, -1000, -1000, -1000, 508,
	-1000, 652, 431, 463, -1000, -1000, 4302, 416, 397, 100,
	745, 6250, 4724, 3428, 708, 296, -1000, 6483, 6483, 416,
	-1000, 315, -1000, 316, 170, -1000, 622, 6125, -1000, 368,
	-1000, -1000, 363, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -80, -1000, -1000, 426, 126, 126, -1000,
	174, -1000, -1000, -1000, 393, -1000, 471, 391, -1000, 170,
	170, 2268, -1000, 6358, -1000, -1000, -1000, 361, -25, 512,
	360, 6483, -1000, -1000, -1000, -1000, 296, -1000, 296, -1000,
	-1000, -1000, -1000, -1000, -1000, 865, 610, 540, -1000, 4924,
	4924, -1000, -1000, 387, 4091, -1000, -1000, 5892, -1000, -1000,
	2732, 4091, 3196, -1000, -1000, -1000, 283, 326, 283, -100,
	469, 185, -1000, 4724, 293, -1000, -1000, -1000, -1000, -1000,
	-1000, 765, 5767, 669, -1000, 490, -1000, -1000, 510, 6125,
	6125, 708, -1000, 296, -1000, -1000, 416, 416, 2268, -1000,
	-1000, -1000, -1000, 316, -1000, 357, -1000, 502, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 310, 261, -1000,
	253, 362, 178, -1000, -1000, -1000, -1000, -1000, -1000, 618,
	-1000, -1000, -1000, -1000, 4924, 610, 610, -1000, -1000, -1000,
	-1000, 98, 416, -1000, 416, 502, 502, -1000, 502, 503,
	-1000, 502, -4, 502, -5, 416, 416, 490, -94, -1000,
	296, 4724, 743, 465, 735, -1000, -1000, -1000, 667, 1779,
	5174, 795, -1000, 490, -1000, 515, 97, -1000, -1000, 2268,
	490, -1000, -1000, -105, 6125, -1000, -1000, 423, 422, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 354, 610, 2500, -1000,
	-1000, -1000, 71, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4924, 416, 294, 296, 747, 710, 5767, 5767, 5767,
	5767, -1000, 558, 556, -1000, 549, 547, 630, 6358, -1000,
	351, 1779, 95, -1000, 5659, -1000, -1000, 6250, 463, 416,
	6125, -1000, -136, 703, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -12, -1000, -1000, -1000, 4724, 4724, 735, 509, 929,
	-1000, -1000, -1000, -1000, 546, -1000, 539, -1000, -1000, -1000,
	-1000, -1000, 57, 55, 50, -1000, 432, -1000, -1000, 349,
	-1000, 346, 701, 416, 52, -109, 296, 430, 4724, 4724,
	-1000, -1000, 490, 490, 490, -136, 2268, 595, -1000, -1000,
	570, -103, -114, 296, 296, 6125, 6125, 6125, -1000, -1000,
	143, -1000, 564, -1000, 344, -1000, 344, 344, 490, -106,
	-1000, 6125, -1000, -1000, -1000, -112, -1000, -131, -1000,
}
var yyPgo = [...]int{

	0, 1046, 1045, 1044, 1042, 1040, 1039, 1038, 24, 471,
	1037, 1036, 1033, 1032, 1031, 1028, 1017, 1016, 1014, 1013,
	1008, 1007, 1006, 1005, 1003, 173, 1002, 997, 996, 50,
	995, 55, 993, 992, 991, 35, 99, 27, 29, 222,
	990, 15, 13, 9, 989, 987, 6, 986, 304, 985,
	57, 982, 979, 44, 972, 958, 956, 3, 28, 955,
	953, 948, 947, 65, 218, 946, 945, 942, 927, 923,
	915, 42, 1, 16, 19, 23, 912, 70, 8, 902,
	41, 901, 898, 889, 887, 21, 886, 52, 885, 32,
	47, 884, 39, 5, 33, 131, 54, 882, 881, 880,
	372, 878, 205, 320, 877, 62, 876, 873, 53, 0,
	12, 45, 22, 871, 34, 971, 26, 7, 870, 869,
	1221, 2, 20, 867, 17, 866, 865, 863, 861, 860,
	859, 219, 858, 853, 851, 850, 848, 847, 846, 10,
	36, 18, 845, 69, 40, 46, 844, 841, 840, 51,
	14, 839, 838, 836, 834, 833, 30, 831, 56, 37,
	829, 827, 826, 49, 825, 11, 824, 823, 821, 48,
	820, 819, 72, 4, 817, 813, 812, 105, 127, 811,
	134,
}
var yyR1 = [...]int{

	0, 175, 176, 176, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 123,
	123, 174, 174, 173, 16, 16, 16, 16, 16, 16,
	170, 170, 171, 171, 172, 172, 145, 145, 144, 144,
	143, 143, 142, 142, 146, 146, 146, 19, 159, 161,
	161, 162, 162, 163, 163, 163, 163, 141, 141, 135,
	136, 137, 138, 138, 160, 160, 160, 156, 114, 114,
	125, 125, 125, 167, 167, 168, 168, 169, 169, 169,
	169, 169, 169, 169, 128, 128, 126, 126, 126, 126,
	126, 126, 126, 127, 127, 127, 127, 127, 129, 129,
	129, 129, 129, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 155, 155, 131,
	131, 149, 149, 150, 150, 150, 147, 147, 148, 148,
	151, 151, 132, 132, 132, 132, 132, 133, 152, 139,
	139, 139, 140, 140, 153, 153, 154, 154, 134, 157,
	157, 164, 164, 164, 164, 164, 158, 158, 166, 166,
	165, 17, 17, 17, 17, 17, 17, 17, 17, 18,
	18, 18, 54, 54, 1, 20, 2, 3, 4, 4,
	5, 5, 5, 5, 6, 6, 6, 6, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 34, 34, 50, 50, 51, 51,
	52, 52, 53, 53, 53, 24, 22, 23, 23, 23,
	23, 179, 25, 26, 26, 27, 27, 27, 31, 31,
	31, 29, 29, 30, 30, 37, 37, 36, 36, 38,
	38, 38, 38, 113, 113, 113, 112, 112, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 55, 44, 44,
	44, 44, 119, 119, 118, 118, 118, 117, 117, 45,
	45, 45, 45, 46, 46, 46, 46, 47, 47, 49,
	49, 48, 48, 56, 56, 56, 56, 57, 57, 58,
	58, 39, 39, 39, 39, 39, 39, 39, 101, 101,
	60, 60, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 70, 70, 70, 70, 70, 70, 61, 61,
	61, 61, 61, 61, 61, 35, 35, 71, 71, 71,
	77, 72, 72, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 68, 68, 68, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 67, 67, 67, 67, 67,
	67, 67, 67, 180, 180, 69, 69, 69, 69, 32,
	32, 32, 32, 32, 122, 122, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 81,
	81, 33, 33, 79, 79, 80, 82, 82, 78, 78,
	78, 63, 63, 63, 63, 63, 63, 63, 65, 65,
	65, 83, 83, 84, 84, 85, 85, 86, 86, 87,
	88, 88, 88, 89, 89, 89, 89, 90, 90, 90,
	62, 62, 62, 62, 62, 62, 91, 91, 91, 91,
	92, 92, 73, 73, 75, 75, 74, 76, 93, 93,
	94, 95, 95, 96, 96, 98, 98, 98, 97, 97,
	97, 99, 99, 102, 102, 103, 103, 100, 100, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
	105, 105, 106, 106, 107, 107, 107, 110, 110, 111,
	111, 115, 115, 116, 116, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 177, 178, 120, 121, 121,
	121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 2, 9, 12, 8, 5, 7,
	0, 1, 1, 2, 4, 4, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 3,
	3, 4, 1, 1, 1, 3, 3, 3, 1, 1,
	3, 1, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 3, 1, 0,
	3, 3, 0, 2, 2, 1, 2, 1, 2, 4,
	7, 2, 3, 2, 2, 3, 1, 1, 1, 3,
	2, 6, 7, 7, 7, 9, 7, 7, 7, 4,
	5, 4, 1, 3, 3, 3, 2, 2, 3, 4,
	2, 3, 2, 2, 4, 4, 3, 6, 6, 5,
	5, 3, 3, 5, 6, 3, 3, 3, 5, 3,
	3, 3, 3, 3, 0, 3, 0, 2, 0, 1,
	1, 1, 0, 2, 2, 4, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -175, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 214, 132,
	221, 224, 225, 228, 227, 232, 29, 131, 135, 136,
	-177, 7, 197, 56, -176, 237, -85, 14, -27, 5,
	-25, -179, -25, -25, -25, -25, -159, 56, 189, -107,
	121, 22, -110, 59, -109, 203, 138, 157, 68, 133,
	153, 147, 31, 171, 222, 208, 187, 148, 19, 229,
	170, 205, 38, 42, 160, 17, 207, 135, 41, 175,
	223, 185, 162, 151, 152, 137, 209, 123, 154, 232,
	233, 235, 234, 236, -100, 125, 121, 122, 189, 121,
	121, 183, 114, 178, 216, -51, 218, 219, 185, 121,
	220, 181, 217, 180, 59, 35, 121, -115, 59, -109,
	-120, -120, 62, 207, -120, 226, -120, -120, 233, 235,
	234, 236, -120, -120, -120, -120, -8, -89, 16, 15,
	-11, -9, -177, 6, 24, 25, -31, 43, 44, -26,
	-100, -48, -115, 10, -95, -123, -96, 230, 229, -111,
	-98, -110, -108, 161, 158, 231, 74, 26, 28, 173,
	77, 144, 109, 166, 15, 78, 155, 108, 186, 198,
	114, 51, 190, 191, 188, 189, 178, 149, 32, 9,
	29, 131, 25, 102, 116, 81, 82, 216, 134, 27,
	132, 71, 18, 54, 10, 35, 12, 13, 126, 125,
	93, 122, 49, 7, 142, 143, 110, 30, 90, 45,
	23, 47, 91, 16, 192, 193, 34, 169, 165, 202,
	168, 141, 164, 104, 52, 39, 75, 69, 150, 72,
	55, 136, 73, 14, 50, 219, 128, 218, 146, 92,
	117, 197, 48, 6, 201, 33, 130, 140, 46, 121,
	179, 167, 139, 163, 80, 124, 70, 220, 5, 22,
	176, 8, 53, 127, 194, 195, 196, 37, 159, 156,
	217, 206, 79, 11, 177, 210, 215, -160, -156, -114,
	59, -109, -103, 126, 122, -103, 121, -102, 126, 59,
	-102, -48, -48, 182, 121, 189, -120, -120, 179, -52,
	186, 187, -120, -120, -120, 185, -120, -120, -120, -120,
	-120, -48, -120, 62, -120, -74, -177, -74, -120, -48,
	-178, 58, -90, 18, 34, -39, -59, 75, -64, 32,
	27, -63, -60, -78, -76, -77, 109, 98, 99, 106,
	76, 110, -68, -66, -67, -69, 61, 60, 62, 63,
	64, 65, 69, 70, 71, -110, -115, -74, -177, 47,
	48, 198, 199, 202, 200, 78, 37, 188, 196, 195,
	194, 192, 193, 190, 191, 126, 189, 104, 197, 59,
	-109, -86, -87, -39, -85, -8, -25, 39, -29, 25,
	67, -49, 30, -48, 33, 111, -48, 57, -95, 83,
	-97, -110, 61, 32, 33, 15, 15, 58, 57, -125,
	-128, -130, -129, -126, -127, 155, 156, 109, 159, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 133,
	151, 152, 153, 154, 138, 139, 140, 141, 142, 143,
	144, 146, 147, 148, 149, 150, -115, 75, 59, -48,
	-48, -54, -48, 27, 55, -115, -34, 10, -48, -48,
	-50, 10, 10, -50, -120, -120, -120, -72, -39, -120,
	-105, 124, 26, 8, 93, 74, 73, 90, 57, 17,
	-39, -61, 93, 75, 91, 92, 77, 95, 94, 105,
	98, 99, 100, 101, 102, 103, 104, 96, 97, 108,
	83, 84, 85, 86, 87, 88, 89, -101, -177, -77,
	-177, 112, 113, -64, -64, -64, -64, -64, -64, -177,
	111, -8, -177, -177, -177, -177, -177, -177, -177, -81,
	-39, -177, -180, -177, -180, -180, -180, -180, -180, -180,
	-180, -177, -177, -177, -177, 57, -88, 28, 29, -89,
	-178, -31, -65, -110, 62, 65, -30, 46, -62, 33,
	37, -8, -177, -48, -93, -94, -78, -110, -115, -116,
	-115, -108, 158, 161, -58, 11, -96, -39, -140, 108,
	212, 213, -177, -161, -162, -163, -135, -136, -137, -138,
	68, 222, -145, 229, 223, 32, -156, -157, -164, 128,
	22, -158, 19, 122, 23, -167, -168, -169, -151, -132,
	-152, -153, -154, -134, -133, 69, 75, 32, 173, 128,
	23, 22, 68, 55, -147, 176, -131, 56, -131, -131,
	-131, -131, -139, 158, -139, -139, -139, 56, -131, -131,
	-131, -149, 56, -149, -149, -150, 56, -150, -170, -171,
	-172, -145, 27, 55, -104, 117, 222, 198, 119, 116,
	120, 115, 173, 158, 68, 32, 14, 209, 59, 57,
	-48, -89, 184, -120, -120, -53, 91, 11, -48, -48,
	-120, 57, -178, -48, 41, -39, -39, -70, 69, 75,
	70, 71, -39, -39, -64, -71, -74, -77, 66, 93,
	91, 92, 77, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -122, 59,
	61, 59, -63, -63, -110, -37, 25, -36, -38, 100,
	-39, -115, -111, -116, -108, -178, -8, -36, -36, -39,
	-39, -36, -29, -79, -80, 79, -110, -178, -36, -37,
	-36, -36, -87, -90, -99, 18, 10, 37, 37, -36,
	-92, 55, -93, -73, -75, -74, -177, -8, -91, -110,
	-58, 57, 83, 111, -85, -39, 59, -177, -177, -114,
	-163, -144, 83, -144, -143, 161, 158, 56, 23, -158,
	59, 59, -158, -169, 69, 61, 62, 63, 69, 188,
	23, 23, 61, 8, -148, 177, 62, -139, -139, -140,
	33, -140, -140, -140, -155, 61, 62, 62, -172, 108,
	-143, -48, -120, -105, -106, 122, 23, 83, 124, 129,
	129, 129, -48, -120, 61, 61, -39, -53, -39, -120,
	42, 69, 70, 71, -71, -64, -64, -64, -35, 134,
	74, -178, -178, -36, 57, -113, -112, 26, -110, 61,
	111, -177, 111, -178, -178, -178, 57, 127, 26, -178,
	-36, -82, -80, 81, -39, -178, -178, -178, -178, -178,
	-48, -40, 10, 31, -92, 57, -178, -178, -178, 57,
	111, -85, -94, -39, -111, -89, -114, -114, -178, 61,
	-141, 59, 61, -144, 33, -166, -165, -110, 59, 59,
	188, 58, -140, -140, 59, 109, 58, 57, 57, 58,
	57, -144, -144, -121, -177, -111, -48, -120, 59, 158,
	-159, 59, -156, -35, 74, -64, -64, -178, -38, -112,
	100, -116, -37, -111, -124, 109, 155, 133, 153, 149,
	170, 160, 175, 151, 176, -122, -124, 203, -85, 82,
	-39, 80, -58, -41, -42, -43, -44, -55, -77, -177,
	-48, 23, -75, 37, -8, -177, -110, -110, -89, -178,
	-178, -121, -141, 58, 57, -131, 61, 62, 62, -142,
	59, 32, -146, 59, 109, 32, 33, -64, 111, -178,
	-178, -131, -131, -131, -150, -131, 143, -131, 143, -178,
	-178, -177, -33, 201, -39, -83, 12, 57, -45, -46,
	-47, 45, 49, 51, 46, 47, 48, 52, -119, 26,
	-41, -177, -118, -117, 26, -115, 61, 8, -73, -8,
	111, -121, -177, 206, -165, 58, 58, 59, 100, -139,
	59, -64, -178, 61, -84, 13, 15, -42, -43, -42,
	-43, 45, 45, 45, 50, 45, 50, 45, -46, -115,
	-178, -56, 53, 125, 54, -117, -93, -178, -110, -174,
	-173, 210, 20, -32, 93, 206, -39, -72, 55, 55,
	45, 45, 122, 122, 122, 57, -178, 59, 21, -178,
	204, 52, 207, -39, -39, -177, -177, -177, -173, -121,
	37, 42, 205, 208, -57, -110, -57, -57, 93, 42,
	-178, 57, -178, -178, -74, 206, -110, 207, 208,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 455, 0, 241, 241, 241, 241, 241, 0,
	524, 507, 0, 0, 0, 228, 0, 0, 697, 697,
	0, 697, 0, 697, 697, 0, 697, 697, 697, 697,
	0, 33, 34, 695, 1, 3, 463, 0, 0, 245,
	248, 243, 507, 0, 0, 0, 44, 0, 505, 0,
	505, 525, 526, 527, 528, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 0, 508, 503, 0, 503, 0,
	0, 0, 0, 697, 697, 0, 697, 697, 697, 0,
	697, 697, 697, 697, 697, 229, 0, 236, 531, 532,
	196, 197, 697, 0, 200, 697, 202, 203, 0, 0,
	697, 0, 237, 238, 239, 240, 27, 467, 0, 0,
	455, 29, 0, 241, 246, 247, 251, 249, 250, 242,
	0, 0, 301, 0, 37, 0, 491, 39, -2, 0,
	0, 529, 530, -2, 546, 497, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 0, 0, 0, 84, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 195, 224, 0, 0, 211, 212, 226, 0,
	230, 231, 215, 216, 217, 226, 219, 220, 221, 222,
	223, 697, 198, 697, 201, 697, 0, 697, 206, 519,
	28, 696, 23, 0, 0, 464, 311, 0, 316, 318,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 379, 380, 381, 382, 441, 442, 443, 444,
	445, 446, 447, 320, 321, 438, 0, 487, 0, 0,
	0, 0, 0, 0, 0, 429, 0, 403, 403, 403,
	403, 403, 403, 403, 403, 0, 0, 0, 0, -2,
	-2, 456, 457, 460, 463, 27, 248, 0, 253, 252,
	244, 0, 0, 300, 0, 0, 309, 0, 38, 0,
	162, 498, 499, 500, 496, 0, 0, -2, 0, 93,
	146, 91, 92, 139, 105, 139, 139, 139, 139, 159,
	159, 159, 159, 131, 132, 133, 134, 135, 0, 118,
	139, 139, 139, 122, 106, 107, 108, 109, 110, 111,
	112, 141, 141, 141, 143, 143, -2, 0, 0, 67,
	0, 189, 192, 504, 0, 191, 463, 0, 697, 697,
	232, 0, 0, 697, 235, 199, 204, 0, 351, 205,
	0, 520, 521, 468, 0, 0, 0, 0, 0, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	338, 339, 340, 341, 342, 343, 344, 317, 0, 331,
	0, 0, 0, 373, 374, 375, 376, 377, 0, 255,
	0, 27, 0, 0, 0, 0, 0, 0, 251, 0,
	430, 0, 395, 0, 396, 397, 398, 399, 400, 401,
	402, 0, 255, 0, 0, 0, 459, 461, 462, 467,
	30, 251, 0, 448, 0, 0, 0, 254, 480, 0,
	0, -2, 0, 299, 309, 488, 0, 438, 0, 302,
	533, 534, 546, 547, 455, 0, 492, 493, 494, 0,
	0, 0, 0, 68, -2, 71, 73, 74, 75, 76,
	58, 58, 0, 82, 83, 57, 85, 86, 0, 0,
	0, 0, 669, 176, 177, 87, 94, 95, 97, 98,
	99, 100, 101, 102, 103, 150, 0, 0, 158, 0,
	165, 167, 0, 0, 148, 147, 104, 0, 159, 159,
	125, 126, 162, 0, 162, 162, 162, 0, 119, 120,
	121, 113, 0, 114, 115, 116, 0, 117, 48, -2,
	52, 0, 506, 0, 697, 519, 0, 516, 0, 514,
	0, 509, 510, 511, 512, 513, 515, 517, 518, 0,
	190, 697, 0, 209, 210, 213, 0, 0, 227, 232,
	218, 0, 486, 697, 0, 312, 313, 315, 332, 0,
	334, 336, 465, 466, 322, 323, 347, 348, 349, 0,
	0, 0, 0, 345, 327, 0, 358, 359, 360, 361,
	362, 363, 364, 365, 366, 367, 368, 369, 372, 414,
	415, 0, 370, 371, 378, 0, 0, 256, 257, 259,
	263, 0, 439, 0, -2, 350, 27, 0, 0, 0,
	0, 0, 0, 436, 433, 0, 0, 404, 0, 0,
	0, 0, 458, 24, 0, 501, 502, 449, 450, 268,
	31, 0, 480, 470, 482, 484, 0, 27, 0, 476,
	455, 0, 0, 0, 463, 310, 163, 0, 0, 0,
	72, 0, 59, 0, 58, 60, 0, 0, 171, 0,
	173, 174, 0, 96, 151, 152, 153, 154, 155, 156,
	164, 166, 168, 0, 90, 149, 0, 162, 162, 127,
	0, 128, 129, 130, 0, 137, 0, 0, 53, 58,
	58, 698, 181, 0, 697, 522, 523, 0, 0, 0,
	0, 0, 193, 208, 225, 233, 234, 214, 352, 207,
	469, 333, 335, 337, 324, 345, 328, 0, 325, 0,
	0, 319, 383, 0, 0, 260, 264, 0, 266, 267,
	0, 255, 0, -2, 386, 387, 0, 0, 0, 0,
	455, 0, 434, 0, 0, 394, 405, 406, 407, 408,
	25, 309, 0, 0, 32, 0, 485, -2, 0, 0,
	0, 463, 489, 490, 439, 36, 0, 0, 698, 79,
	80, 77, 78, 0, 61, 0, 178, 139, 172, 175,
	157, 140, 123, 124, 160, 161, 136, 0, 0, 144,
	0, 0, 0, 49, 699, 700, 182, 183, 184, 0,
	186, 187, 188, 326, 0, 346, 329, 384, 258, 265,
	261, 0, 0, 440, 0, 139, 139, 419, 139, 143,
	422, 139, 424, 139, 427, 0, 0, 0, 431, 393,
	437, 0, 451, 269, 270, 272, 273, 274, 282, 0,
	284, 0, 483, 0, -2, 0, 478, 477, 35, 698,
	0, 47, 81, 169, 0, 180, 138, 0, 0, 54,
	62, 63, 55, 64, 65, 66, 0, 330, 0, 385,
	388, 416, 159, 420, 421, 423, 425, 426, 428, 390,
	389, 0, 0, 0, 435, 453, 0, 0, 0, 0,
	0, 289, 0, 0, 292, 0, 0, 0, 0, 283,
	0, 0, 303, 285, 0, 287, 288, 0, 473, 27,
	0, 45, 0, 0, 179, 142, 145, 185, 262, 417,
	418, 409, 392, 432, 26, 0, 0, 271, 278, 0,
	281, 290, 291, 293, 0, 295, 0, 297, 298, 275,
	276, 277, 0, 0, 0, 286, 481, -2, 479, 0,
	41, 0, 0, 0, 0, 0, 454, 452, 0, 0,
	294, 296, 0, 0, 0, 0, 698, 0, 170, 391,
	0, 0, 0, 279, 280, 0, 0, 0, 42, 46,
	0, 410, 0, 413, 0, 307, 0, 0, 0, 411,
	304, 0, 305, 306, 43, 0, 308, 0, 412,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 237,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:314
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:319
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:320
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:324
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:348
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:356
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:373
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:377
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:394
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:405
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:417
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:421
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:433
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:439
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:443
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:449
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:453
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:459
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:463
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:469
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:475
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:481
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:494
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:503
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:516
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:524
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:530
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:540
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:544
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:550
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:557
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:565
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:570
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:572
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.str = "character set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = "default"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:604
		{
			yyVAL.str = "default"
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:610
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:621
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:648
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:652
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:658
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:662
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:668
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:675
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:689
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			// Normal str as a identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:703
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:710
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:716
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:722
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:732
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:743
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:747
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:753
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:789
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:805
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1014
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1019
		{
			yyVAL.optVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1023
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1028
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1032
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1050
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1078
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1096
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1104
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1110
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1116
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1121
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1148
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1161
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1167
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 170:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1183
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1187
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1191
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1216
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1232
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1236
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1241
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1254
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 187:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1258
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1262
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1269
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1277
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1282
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1302
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1314
		{
			yyVAL.statement = &Xa{}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &Explain{}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1326
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1392
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1396
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1420
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1424
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1437
		{
			yyVAL.str = ""
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1441
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1446
		{
			yyVAL.tableName = TableName{}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1450
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1456
		{
			yyVAL.str = ""
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1460
		{
			yyVAL.str = "full "
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1476
		{
			yyVAL.showFilter = nil
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1480
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1484
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1502
		{
			yyVAL.statement = &OtherRead{}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &OtherRead{}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1519
		{
			setAllowComments(yylex, true)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1523
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1529
		{
			yyVAL.bytes2 = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.str = UnionStr
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1543
		{
			yyVAL.str = UnionAllStr
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1547
		{
			yyVAL.str = UnionDistinctStr
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1552
		{
			yyVAL.str = ""
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1556
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.str = SQLCacheStr
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1565
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1569
		{
			yyVAL.str = DistinctStr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1574
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1578
		{
			yyVAL.str = StraightJoinHint
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1583
		{
			yyVAL.selectExprs = nil
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1587
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1593
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1597
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1603
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1607
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1611
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1615
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1620
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1624
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1628
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1640
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1644
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1650
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1664
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1668
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1672
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1678
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1691
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1695
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1699
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1708
		{
			yyVAL.empty = struct{}{}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1710
		{
			yyVAL.empty = struct{}{}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1713
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1721
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1728
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1734
		{
			yyVAL.str = JoinStr
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1738
		{
			yyVAL.str = JoinStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.str = JoinStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1746
		{
			yyVAL.str = StraightJoinStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1752
		{
			yyVAL.str = LeftJoinStr
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1756
		{
			yyVAL.str = LeftJoinStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1760
		{
			yyVAL.str = RightJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1764
		{
			yyVAL.str = RightJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.str = NaturalJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1774
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1784
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1788
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1794
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1798
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1803
		{
			yyVAL.indexHints = nil
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1807
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1811
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1815
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1825
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1830
		{
			yyVAL.expr = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1840
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1848
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1852
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1856
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1864
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1870
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1874
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1884
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1890
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1894
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1898
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1902
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1906
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1910
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1914
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1918
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 330:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1922
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1926
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1932
		{
			yyVAL.str = IsNullStr
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1936
		{
			yyVAL.str = IsNotNullStr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1940
		{
			yyVAL.str = IsTrueStr
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1944
		{
			yyVAL.str = IsNotTrueStr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1948
		{
			yyVAL.str = IsFalseStr
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1952
		{
			yyVAL.str = IsNotFalseStr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = EqualStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = LessThanStr
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.str = GreaterThanStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1970
		{
			yyVAL.str = LessEqualStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1974
		{
			yyVAL.str = GreaterEqualStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1978
		{
			yyVAL.str = NotEqualStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1982
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1987
		{
			yyVAL.expr = nil
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1991
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2011
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2017
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2031
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2035
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2047
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2051
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2055
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2059
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2063
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2067
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2075
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2079
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2083
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2087
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2091
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2095
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2099
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2103
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2107
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2111
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2141
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 385:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2177
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2181
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 389:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 391:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2223
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2227
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2231
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2241
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2273
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2277
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2283
		{
			yyVAL.str = ""
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2287
		{
			yyVAL.str = BooleanModeStr
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = QueryExpansionStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2315
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2323
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2327
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2331
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2341
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2345
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2349
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2353
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2357
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2361
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2365
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = nil
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2379
		{
			yyVAL.str = string("")
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2399
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2404
		{
			yyVAL.expr = nil
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2408
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2414
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2418
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2422
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = &NullVal{}
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2458
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2476
		{
			yyVAL.exprs = nil
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2480
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2494
		{
			yyVAL.orderBy = nil
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2498
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2504
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2508
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2514
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2519
		{
			yyVAL.str = AscScr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2523
		{
			yyVAL.str = AscScr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2527
		{
			yyVAL.str = DescScr
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2532
		{
			yyVAL.limit = nil
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2540
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2544
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2549
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.str = ForUpdateStr
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2557
		{
			yyVAL.str = ShareModeStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2570
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2578
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2583
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2591
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2606
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2610
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2615
		{
			yyVAL.updateExprs = nil
		}
	case 481:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2619
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2625
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2629
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2639
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2645
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2661
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2665
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2677
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2681
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2687
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.bytes = []byte("charset")
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2705
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &Default{}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2723
		{
			yyVAL.byt = 0
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			yyVAL.byt = 1
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2728
		{
			yyVAL.byt = 0
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.byt = 1
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2733
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = IgnoreStr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2741
		{
			yyVAL.empty = struct{}{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2745
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2749
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2755
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2757
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2760
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2762
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2764
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2768
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2773
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2777
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2798
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2809
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			decNesting(yylex)
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3009
		{
			forceEOF(yylex)
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3014
		{
			forceEOF(yylex)
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			forceEOF(yylex)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
