//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	setExprs          SetExprs
	setExpr           *SetExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const FULL = 57373
const CHECKSUM = 57374
const FULLTEXT = 57375
const PARSER = 57376
const NGRAM = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const JOIN = 57386
const STRAIGHT_JOIN = 57387
const LEFT = 57388
const RIGHT = 57389
const INNER = 57390
const OUTER = 57391
const CROSS = 57392
const NATURAL = 57393
const USE = 57394
const FORCE = 57395
const ON = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const MODIFY = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const UNIQUE = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const STATUS = 57513
const COLUMNS = 57514
const CURRENT_TIMESTAMP = 57515
const DATABASE = 57516
const CURRENT_DATE = 57517
const CURRENT_TIME = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const UTC_DATE = 57521
const UTC_TIME = 57522
const UTC_TIMESTAMP = 57523
const REPLACE = 57524
const CONVERT = 57525
const CAST = 57526
const GROUP_CONCAT = 57527
const SEPARATOR = 57528
const MATCH = 57529
const AGAINST = 57530
const BOOLEAN = 57531
const LANGUAGE = 57532
const WITH = 57533
const QUERY = 57534
const EXPANSION = 57535
const UNUSED = 57536
const PARTITION = 57537
const PARTITIONS = 57538
const HASH = 57539
const XA = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 282,
	82, 601,
	-2, 39,
	-1, 287,
	82, 496,
	-2, 447,
	-1, 384,
	110, 483,
	-2, 479,
	-1, 385,
	110, 484,
	-2, 480,
	-1, 561,
	5, 26,
	-2, 423,
	-1, 696,
	110, 486,
	-2, 482,
	-1, 809,
	5, 27,
	-2, 302,
	-1, 833,
	5, 27,
	-2, 424,
	-1, 920,
	5, 26,
	-2, 426,
	-1, 1026,
	5, 27,
	-2, 427,
}

const yyNprod = 649
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 7414

var yyAct = [...]int{

	385, 869, 520, 963, 360, 338, 1060, 910, 564, 977,
	615, 848, 602, 974, 728, 572, 727, 680, 362, 340,
	261, 64, 54, 890, 283, 801, 687, 690, 911, 793,
	72, 565, 657, 297, 70, 151, 708, 247, 336, 387,
	576, 286, 611, 248, 327, 587, 278, 695, 724, 461,
	325, 280, 363, 48, 393, 519, 3, 53, 270, 928,
	253, 581, 247, 578, 72, 927, 295, 1072, 285, 58,
	1059, 250, 1071, 1051, 1069, 987, 150, 1058, 903, 1050,
	957, 689, 249, 993, 252, 320, 254, 255, 256, 257,
	258, 259, 532, 632, 60, 61, 62, 63, 854, 855,
	856, 48, 644, 314, 260, 596, 857, 631, 318, 266,
	134, 135, 312, 755, 692, 595, 935, 743, 929, 875,
	999, 603, 952, 950, 23, 49, 25, 26, 304, 780,
	779, 778, 305, 300, 303, 133, 777, 634, 247, 247,
	1021, 1023, 44, 1045, 590, 1044, 630, 27, 1043, 590,
	35, 1035, 486, 485, 495, 496, 488, 489, 490, 491,
	492, 493, 494, 487, 301, 590, 497, 244, 138, 991,
	36, 588, 773, 51, 315, 748, 137, 984, 775, 509,
	510, 136, 942, 310, 836, 807, 805, 737, 316, 317,
	518, 319, 400, 627, 625, 621, 298, 624, 626, 486,
	485, 495, 496, 488, 489, 490, 491, 492, 493, 494,
	487, 862, 1022, 497, 487, 577, 497, 497, 472, 251,
	603, 475, 474, 473, 905, 812, 986, 845, 858, 907,
	473, 29, 30, 31, 1049, 33, 776, 629, 589, 475,
	794, 474, 473, 589, 744, 247, 475, 736, 34, 45,
	38, 709, 628, 46, 47, 32, 474, 473, 475, 589,
	404, 863, 451, 299, 586, 307, 585, 1036, 992, 709,
	990, 819, 774, 475, 772, 247, 753, 664, 247, 623,
	72, 1031, 891, 395, 285, 72, 939, 389, 938, 406,
	633, 662, 663, 661, 322, 930, 813, 324, 547, 548,
	247, 622, 1047, 247, 247, 247, 767, 893, 247, 786,
	787, 788, 247, 477, 247, 247, 247, 50, 592, 48,
	51, 766, 390, 895, 593, 899, 403, 894, 756, 892,
	660, 814, 302, 37, 897, 323, 681, 391, 682, 39,
	1002, 132, 40, 41, 896, 43, 42, 474, 473, 898,
	900, 937, 476, 784, 765, 507, 488, 489, 490, 491,
	492, 493, 494, 487, 475, 469, 497, 470, 474, 473,
	468, 490, 491, 492, 493, 494, 487, 330, 388, 497,
	1066, 326, 474, 473, 1028, 475, 996, 506, 508, 650,
	652, 653, 298, 72, 877, 651, 874, 553, 247, 475,
	851, 247, 274, 72, 567, 566, 850, 285, 961, 326,
	549, 932, 931, 517, 799, 326, 522, 523, 524, 525,
	526, 527, 528, 846, 531, 533, 533, 533, 533, 533,
	533, 533, 533, 541, 542, 543, 544, 604, 605, 606,
	842, 550, 571, 868, 867, 326, 582, 478, 569, 562,
	551, 749, 561, 740, 574, 865, 864, 835, 326, 247,
	617, 698, 326, 247, 683, 452, 534, 535, 536, 537,
	538, 539, 540, 23, 412, 411, 995, 638, 521, 352,
	351, 353, 354, 355, 356, 530, 306, 643, 357, 613,
	614, 965, 968, 969, 970, 966, 559, 967, 971, 658,
	659, 1040, 994, 560, 637, 55, 859, 640, 641, 642,
	698, 725, 645, 735, 735, 21, 831, 72, 961, 575,
	828, 686, 51, 285, 23, 598, 599, 600, 601, 866,
	799, 573, 72, 635, 402, 545, 710, 267, 51, 597,
	608, 609, 610, 694, 23, 616, 1039, 799, 684, 685,
	495, 496, 488, 489, 490, 491, 492, 493, 494, 487,
	696, 48, 497, 72, 567, 566, 799, 733, 726, 713,
	697, 699, 265, 51, 919, 522, 735, 65, 700, 729,
	734, 745, 612, 706, 711, 716, 51, 607, 647, 648,
	853, 654, 655, 51, 717, 738, 965, 968, 969, 970,
	966, 725, 967, 971, 619, 701, 702, 458, 557, 705,
	1042, 757, 758, 730, 1014, 48, 1064, 1012, 731, 1015,
	247, 1041, 1013, 712, 1011, 714, 715, 1016, 880, 969,
	970, 741, 747, 1010, 750, 1057, 247, 521, 723, 785,
	703, 704, 646, 759, 722, 761, 762, 763, 486, 485,
	495, 496, 488, 489, 490, 491, 492, 493, 494, 487,
	388, 721, 497, 1046, 769, 486, 485, 495, 496, 488,
	489, 490, 491, 492, 493, 494, 487, 394, 795, 497,
	658, 659, 782, 271, 272, 1029, 844, 783, 739, 940,
	760, 409, 399, 72, 789, 392, 752, 803, 486, 485,
	495, 496, 488, 489, 490, 491, 492, 493, 494, 487,
	328, 1033, 497, 1032, 917, 746, 829, 618, 457, 247,
	973, 394, 329, 268, 269, 720, 262, 1005, 410, 263,
	333, 55, 1004, 719, 796, 361, 960, 573, 797, 462,
	567, 566, 285, 467, 818, 313, 72, 806, 311, 277,
	849, 809, 810, 811, 981, 936, 815, 837, 471, 841,
	57, 821, 840, 822, 823, 824, 825, 838, 59, 72,
	798, 247, 245, 285, 52, 830, 1, 847, 584, 696,
	579, 832, 833, 834, 296, 583, 764, 989, 816, 934,
	591, 754, 594, 871, 926, 742, 580, 276, 860, 861,
	876, 843, 1030, 72, 852, 751, 415, 803, 72, 416,
	285, 414, 285, 808, 878, 873, 418, 417, 413, 139,
	879, 870, 279, 972, 820, 976, 800, 884, 885, 247,
	694, 901, 889, 888, 67, 771, 72, 72, 902, 904,
	922, 923, 909, 908, 770, 521, 918, 696, 914, 883,
	729, 839, 620, 887, 505, 718, 284, 405, 924, 732,
	546, 386, 1003, 916, 959, 817, 529, 707, 339, 649,
	350, 347, 349, 276, 276, 348, 552, 558, 479, 337,
	331, 915, 1020, 913, 730, 455, 396, 921, 964, 962,
	920, 912, 827, 925, 485, 495, 496, 488, 489, 490,
	491, 492, 493, 494, 487, 466, 948, 497, 956, 1034,
	556, 24, 56, 273, 14, 20, 247, 247, 15, 13,
	12, 28, 10, 9, 8, 275, 72, 985, 7, 6,
	285, 5, 4, 72, 906, 914, 982, 849, 729, 943,
	264, 944, 22, 72, 988, 2, 19, 285, 18, 17,
	871, 16, 953, 954, 11, 933, 955, 0, 0, 998,
	0, 0, 247, 247, 247, 247, 0, 889, 975, 1006,
	0, 1008, 730, 247, 48, 1017, 247, 983, 870, 247,
	276, 914, 914, 914, 914, 72, 567, 566, 1024, 1027,
	1025, 1007, 0, 1009, 0, 914, 0, 945, 946, 0,
	947, 308, 309, 949, 0, 951, 0, 1001, 1038, 0,
	276, 0, 0, 276, 915, 915, 915, 915, 0, 0,
	0, 0, 958, 0, 0, 1019, 0, 0, 975, 0,
	0, 700, 0, 0, 1026, 450, 0, 0, 276, 276,
	276, 0, 0, 459, 0, 0, 0, 276, 0, 276,
	276, 276, 0, 0, 0, 72, 72, 72, 0, 1061,
	1061, 1061, 1062, 1063, 0, 0, 0, 72, 0, 0,
	0, 1070, 511, 512, 513, 514, 515, 516, 0, 0,
	0, 0, 0, 0, 0, 1048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 1055, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 321, 0,
	0, 1065, 0, 1067, 1068, 0, 0, 0, 0, 1037,
	521, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 568, 570, 0, 398, 0,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 1053, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 453, 454, 456, 0,
	0, 0, 0, 0, 0, 460, 0, 463, 464, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	656, 0, 0, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 693, 570, 0, 0, 0, 0, 693,
	693, 563, 0, 693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 421, 0, 0, 0, 693, 693, 693,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 568, 0, 0, 433, 0,
	0, 0, 0, 438, 439, 440, 441, 442, 443, 444,
	0, 445, 446, 447, 448, 449, 434, 435, 436, 437,
	419, 420, 636, 0, 422, 0, 639, 423, 424, 425,
	426, 427, 428, 429, 430, 431, 432, 0, 0, 0,
	481, 0, 484, 0, 0, 0, 0, 0, 498, 499,
	500, 501, 502, 503, 504, 276, 482, 483, 480, 486,
	485, 495, 496, 488, 489, 490, 491, 492, 493, 494,
	487, 276, 0, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 790, 791, 792, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 0, 0, 0, 0, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 881, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 693, 0, 0, 0, 0,
	0, 570, 693, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 276, 979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 276, 276,
	276, 0, 0, 0, 0, 0, 0, 0, 1018, 0,
	0, 276, 0, 0, 979, 0, 0, 568, 232, 223,
	194, 234, 171, 186, 243, 187, 188, 215, 158, 202,
	104, 184, 0, 174, 153, 181, 154, 172, 196, 84,
	199, 170, 225, 205, 292, 0, 89, 0, 0, 240,
	95, 209, 0, 110, 101, 0, 0, 198, 227, 200,
	222, 193, 216, 164, 208, 235, 185, 213, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 211, 230, 183, 212, 214, 152, 210, 0, 156,
	159, 242, 228, 177, 178, 0, 0, 0, 0, 0,
	0, 0, 197, 201, 219, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 207, 0, 0, 0,
	162, 157, 195, 0, 0, 0, 291, 0, 176, 220,
	0, 0, 0, 293, 192, 125, 229, 190, 189, 233,
	236, 106, 0, 226, 173, 182, 80, 180, 109, 105,
	120, 75, 118, 112, 99, 91, 92, 74, 0, 108,
	83, 88, 82, 103, 115, 116, 81, 130, 78, 124,
	77, 288, 123, 102, 287, 114, 119, 100, 97, 76,
	117, 98, 96, 93, 85, 0, 155, 0, 111, 121,
	131, 169, 294, 126, 127, 128, 0, 0, 0, 0,
	0, 0, 290, 167, 168, 165, 166, 203, 204, 237,
	238, 239, 221, 163, 0, 0, 224, 206, 73, 0,
	94, 129, 107, 87, 122, 0, 0, 0, 0, 179,
	241, 218, 217, 231, 0, 86, 113, 0, 0, 0,
	0, 0, 282, 281, 289, 232, 223, 194, 234, 171,
	186, 243, 187, 188, 215, 158, 202, 104, 184, 0,
	174, 153, 181, 154, 172, 196, 84, 199, 170, 225,
	205, 141, 0, 89, 0, 0, 240, 95, 209, 0,
	110, 101, 0, 0, 198, 227, 200, 222, 193, 216,
	164, 208, 235, 185, 213, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 211, 230,
	183, 212, 214, 152, 210, 0, 156, 159, 242, 228,
	177, 178, 0, 0, 0, 0, 0, 0, 0, 197,
	201, 219, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 207, 0, 0, 0, 162, 157, 195,
	0, 0, 0, 143, 0, 176, 220, 0, 0, 0,
	148, 192, 125, 229, 190, 189, 233, 236, 106, 0,
	226, 173, 182, 80, 180, 109, 105, 120, 75, 118,
	112, 99, 91, 92, 74, 0, 108, 83, 88, 82,
	103, 115, 116, 81, 130, 78, 124, 77, 160, 123,
	102, 161, 114, 119, 100, 97, 76, 117, 98, 96,
	93, 85, 0, 155, 0, 111, 121, 131, 169, 140,
	126, 127, 128, 144, 145, 0, 146, 0, 147, 142,
	167, 168, 165, 166, 203, 204, 237, 238, 239, 221,
	163, 0, 0, 224, 206, 73, 0, 94, 129, 107,
	87, 122, 0, 0, 0, 0, 179, 241, 218, 217,
	231, 0, 86, 113, 0, 0, 0, 0, 0, 90,
	232, 223, 194, 234, 171, 186, 243, 187, 188, 215,
	158, 202, 104, 184, 0, 174, 153, 181, 154, 172,
	196, 84, 199, 170, 225, 205, 292, 0, 89, 0,
	0, 240, 95, 209, 0, 110, 101, 0, 0, 198,
	227, 200, 222, 193, 216, 164, 208, 235, 185, 213,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 211, 230, 183, 212, 214, 152, 210,
	0, 156, 159, 242, 228, 177, 178, 0, 0, 0,
	0, 0, 0, 0, 197, 201, 219, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 0, 207, 0,
	0, 0, 162, 157, 195, 0, 0, 0, 291, 0,
	176, 220, 0, 0, 0, 293, 192, 125, 229, 190,
	189, 233, 236, 106, 0, 226, 173, 182, 80, 180,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 288, 123, 102, 287, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 155, 0,
	111, 121, 131, 169, 294, 126, 127, 128, 0, 0,
	0, 0, 0, 0, 290, 167, 168, 165, 166, 203,
	204, 237, 238, 239, 221, 163, 0, 0, 224, 206,
	73, 0, 94, 129, 107, 87, 122, 0, 0, 0,
	0, 179, 241, 218, 217, 231, 0, 86, 113, 0,
	0, 0, 0, 0, 90, 0, 289, 232, 223, 194,
	234, 171, 186, 243, 187, 188, 215, 158, 202, 104,
	184, 0, 174, 153, 181, 154, 172, 196, 84, 199,
	170, 225, 205, 292, 0, 89, 0, 0, 240, 95,
	209, 0, 110, 101, 0, 0, 198, 227, 200, 222,
	193, 216, 164, 208, 235, 185, 213, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	211, 230, 183, 212, 214, 152, 210, 0, 156, 159,
	242, 228, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 197, 201, 219, 191, 0, 0, 0, 0, 0,
	0, 997, 0, 175, 0, 207, 0, 0, 0, 162,
	157, 195, 0, 0, 0, 291, 0, 176, 220, 0,
	0, 0, 293, 192, 125, 229, 190, 189, 233, 236,
	106, 0, 226, 173, 182, 80, 180, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	160, 123, 102, 161, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 155, 0, 111, 121, 131,
	169, 294, 126, 127, 128, 0, 0, 0, 0, 0,
	0, 290, 167, 168, 165, 166, 203, 204, 237, 238,
	239, 221, 163, 0, 0, 224, 206, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 0, 179, 241,
	218, 217, 231, 0, 86, 113, 0, 0, 0, 0,
	0, 90, 232, 223, 194, 234, 171, 186, 243, 187,
	188, 215, 158, 202, 104, 184, 0, 174, 153, 181,
	154, 172, 196, 84, 199, 170, 225, 205, 292, 0,
	89, 0, 0, 240, 95, 209, 0, 110, 101, 0,
	0, 198, 227, 200, 222, 193, 216, 164, 208, 235,
	185, 213, 51, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 211, 230, 183, 212, 214,
	152, 210, 0, 156, 159, 242, 228, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 197, 201, 219, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	207, 0, 0, 0, 162, 157, 195, 0, 0, 0,
	291, 0, 176, 220, 0, 0, 0, 293, 192, 125,
	229, 190, 189, 233, 236, 106, 0, 226, 173, 182,
	80, 180, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 160, 123, 102, 161, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	155, 0, 111, 121, 131, 169, 294, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 290, 167, 168, 165,
	166, 203, 204, 237, 238, 239, 221, 163, 0, 0,
	224, 206, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 0, 179, 241, 218, 217, 231, 0, 86,
	113, 0, 0, 0, 0, 0, 90, 232, 223, 194,
	234, 171, 186, 243, 187, 188, 215, 158, 202, 104,
	184, 0, 174, 153, 181, 154, 172, 196, 84, 199,
	170, 225, 205, 292, 0, 89, 0, 0, 240, 95,
	209, 0, 110, 101, 0, 0, 198, 227, 200, 222,
	193, 216, 164, 208, 235, 185, 213, 0, 0, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	211, 230, 183, 212, 214, 152, 210, 0, 156, 159,
	242, 228, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 197, 201, 219, 191, 0, 0, 0, 0, 0,
	0, 886, 0, 175, 0, 207, 0, 0, 0, 162,
	157, 195, 0, 0, 0, 291, 0, 176, 220, 0,
	0, 0, 293, 192, 125, 229, 190, 189, 233, 236,
	106, 0, 226, 173, 182, 80, 180, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	160, 123, 102, 161, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 155, 0, 111, 121, 131,
	169, 294, 126, 127, 128, 0, 0, 0, 0, 0,
	0, 290, 167, 168, 165, 166, 203, 204, 237, 238,
	239, 221, 163, 0, 0, 224, 206, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 0, 179, 241,
	218, 217, 231, 0, 86, 113, 0, 0, 0, 0,
	0, 90, 232, 223, 194, 234, 171, 186, 243, 187,
	188, 215, 158, 202, 104, 184, 0, 174, 153, 181,
	154, 172, 196, 84, 199, 170, 225, 205, 292, 0,
	89, 0, 0, 240, 95, 209, 0, 110, 101, 0,
	0, 198, 227, 200, 222, 193, 216, 164, 208, 235,
	185, 213, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 211, 230, 183, 212, 214,
	152, 210, 0, 156, 159, 242, 228, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 197, 201, 219, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	207, 0, 0, 0, 162, 157, 195, 0, 0, 0,
	291, 0, 176, 220, 0, 0, 0, 293, 192, 125,
	229, 190, 189, 233, 236, 106, 0, 226, 173, 182,
	80, 180, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 160, 123, 102, 161, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	155, 0, 111, 121, 131, 169, 294, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 290, 167, 168, 165,
	166, 203, 204, 237, 238, 239, 221, 163, 0, 0,
	224, 206, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 0, 179, 241, 218, 217, 231, 0, 86,
	113, 0, 0, 0, 0, 0, 90, 232, 223, 194,
	234, 171, 186, 243, 187, 188, 215, 158, 202, 104,
	184, 0, 174, 153, 181, 154, 172, 196, 84, 199,
	170, 225, 205, 292, 0, 89, 0, 0, 240, 95,
	209, 0, 110, 101, 0, 0, 198, 227, 200, 222,
	193, 216, 164, 208, 235, 185, 213, 0, 0, 0,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	211, 230, 183, 212, 214, 152, 210, 0, 156, 159,
	242, 228, 177, 178, 0, 0, 0, 0, 0, 0,
	0, 197, 201, 219, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 207, 0, 0, 0, 162,
	157, 195, 0, 0, 0, 291, 0, 176, 220, 0,
	0, 0, 293, 192, 125, 229, 190, 189, 233, 236,
	106, 0, 226, 173, 182, 80, 180, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	160, 123, 102, 161, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 155, 0, 111, 121, 131,
	169, 294, 126, 127, 128, 0, 0, 0, 0, 0,
	0, 290, 167, 168, 165, 166, 203, 204, 237, 238,
	239, 221, 163, 0, 0, 224, 206, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 0, 179, 241,
	218, 217, 231, 0, 86, 113, 0, 0, 0, 0,
	0, 90, 232, 223, 194, 234, 171, 186, 243, 187,
	188, 215, 158, 202, 104, 184, 0, 174, 153, 181,
	154, 172, 196, 84, 199, 170, 225, 205, 292, 0,
	89, 0, 0, 240, 95, 209, 0, 110, 101, 0,
	0, 198, 227, 200, 222, 193, 216, 164, 208, 235,
	185, 213, 0, 0, 0, 246, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 211, 230, 183, 212, 214,
	152, 210, 0, 156, 159, 242, 228, 177, 178, 0,
	0, 0, 0, 0, 0, 0, 197, 201, 219, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	207, 0, 0, 0, 162, 157, 195, 0, 0, 0,
	291, 0, 176, 220, 0, 0, 0, 293, 192, 125,
	229, 190, 189, 233, 236, 106, 0, 226, 173, 182,
	80, 180, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 160, 123, 102, 161, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	155, 0, 111, 121, 131, 169, 294, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 290, 167, 168, 165,
	166, 203, 204, 237, 238, 239, 221, 163, 0, 0,
	224, 206, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 0, 179, 241, 218, 217, 231, 104, 86,
	113, 688, 0, 335, 0, 0, 90, 84, 0, 334,
	0, 0, 0, 0, 89, 0, 0, 371, 95, 0,
	0, 110, 101, 0, 0, 0, 0, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 384,
	352, 351, 353, 354, 355, 356, 0, 0, 79, 357,
	358, 359, 0, 0, 0, 332, 345, 0, 370, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 343,
	691, 0, 0, 0, 382, 0, 344, 0, 0, 341,
	346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 380, 0, 0, 106,
	0, 0, 0, 0, 80, 0, 109, 105, 120, 75,
	118, 112, 99, 91, 92, 74, 0, 108, 83, 88,
	82, 103, 115, 116, 81, 130, 78, 124, 77, 0,
	123, 102, 0, 114, 119, 100, 97, 76, 117, 98,
	96, 93, 85, 0, 0, 0, 111, 121, 131, 0,
	0, 126, 127, 128, 0, 0, 0, 0, 0, 0,
	0, 372, 381, 378, 379, 376, 377, 375, 374, 373,
	383, 366, 367, 369, 0, 368, 73, 0, 94, 129,
	107, 87, 122, 0, 0, 0, 104, 0, 0, 0,
	0, 335, 0, 86, 113, 84, 0, 334, 0, 0,
	90, 0, 89, 0, 0, 371, 95, 0, 0, 110,
	101, 0, 0, 0, 0, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 384, 352, 351,
	353, 354, 355, 356, 0, 0, 79, 357, 358, 359,
	0, 0, 0, 332, 345, 0, 370, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 342, 343, 691, 0,
	0, 0, 382, 0, 344, 0, 0, 341, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 0, 380, 0, 0, 106, 0, 0,
	0, 0, 80, 0, 109, 105, 120, 75, 118, 112,
	99, 91, 92, 74, 0, 108, 83, 88, 82, 103,
	115, 116, 81, 130, 78, 124, 77, 0, 123, 102,
	0, 114, 119, 100, 97, 76, 117, 98, 96, 93,
	85, 0, 0, 0, 111, 121, 131, 0, 0, 126,
	127, 128, 0, 0, 0, 0, 0, 0, 0, 372,
	381, 378, 379, 376, 377, 375, 374, 373, 383, 366,
	367, 369, 0, 368, 73, 0, 94, 129, 107, 87,
	122, 0, 0, 0, 104, 0, 0, 0, 0, 335,
	0, 86, 113, 84, 0, 334, 0, 0, 90, 0,
	89, 0, 0, 371, 95, 0, 0, 110, 101, 0,
	0, 0, 0, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 326, 384, 352, 351, 353, 354,
	355, 356, 0, 0, 79, 357, 358, 359, 0, 0,
	0, 332, 345, 0, 370, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 0, 0, 0, 0,
	382, 0, 344, 0, 0, 341, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 380, 0, 0, 106, 0, 0, 0, 0,
	80, 0, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 0, 123, 102, 0, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	0, 0, 111, 121, 131, 0, 0, 126, 127, 128,
	0, 0, 0, 0, 0, 0, 0, 372, 381, 378,
	379, 376, 377, 375, 374, 373, 383, 366, 367, 369,
	0, 368, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 86,
	113, 0, 104, 0, 0, 0, 90, 335, 0, 0,
	0, 84, 0, 334, 0, 0, 0, 0, 89, 0,
	0, 371, 95, 0, 0, 110, 101, 0, 0, 0,
	0, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	51, 0, 0, 384, 352, 351, 353, 354, 355, 356,
	0, 0, 79, 357, 358, 359, 0, 0, 0, 332,
	345, 0, 370, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 342, 343, 0, 0, 0, 0, 382, 0,
	344, 0, 0, 341, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	380, 0, 0, 106, 0, 0, 0, 0, 80, 0,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 0, 123, 102, 0, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 0, 0,
	111, 121, 131, 0, 0, 126, 127, 128, 0, 0,
	0, 0, 0, 0, 0, 372, 381, 378, 379, 376,
	377, 375, 374, 373, 383, 366, 367, 369, 0, 368,
	73, 0, 94, 129, 107, 87, 122, 0, 0, 0,
	104, 0, 0, 0, 0, 335, 0, 86, 113, 84,
	0, 334, 0, 0, 90, 0, 89, 0, 0, 371,
	95, 0, 0, 110, 101, 0, 0, 0, 0, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 384, 352, 351, 353, 354, 355, 356, 0, 0,
	79, 357, 358, 359, 0, 0, 0, 332, 345, 0,
	370, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 343, 0, 0, 0, 0, 382, 0, 344, 0,
	0, 341, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 380, 0,
	0, 106, 0, 0, 0, 0, 80, 0, 109, 105,
	120, 75, 118, 112, 99, 91, 92, 74, 0, 108,
	83, 88, 82, 103, 115, 116, 81, 130, 78, 124,
	77, 0, 123, 102, 0, 114, 119, 100, 97, 76,
	117, 98, 96, 93, 85, 0, 0, 0, 111, 121,
	131, 0, 0, 126, 127, 128, 0, 0, 0, 0,
	0, 0, 0, 372, 381, 378, 379, 376, 377, 375,
	374, 373, 383, 366, 367, 369, 0, 368, 73, 0,
	94, 129, 107, 87, 122, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 86, 113, 0, 0, 0,
	0, 89, 90, 0, 371, 95, 0, 0, 110, 101,
	0, 0, 0, 0, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 0, 384, 352, 351, 353,
	354, 355, 356, 0, 0, 79, 357, 358, 359, 0,
	0, 0, 0, 345, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 343, 0, 0, 0,
	0, 382, 0, 344, 0, 0, 341, 346, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 380, 0, 0, 106, 0, 0, 0,
	0, 80, 0, 109, 105, 120, 75, 118, 112, 99,
	91, 92, 74, 0, 108, 83, 88, 82, 103, 115,
	116, 81, 130, 78, 124, 77, 0, 123, 102, 0,
	114, 119, 100, 97, 76, 117, 98, 96, 93, 85,
	0, 0, 0, 111, 121, 131, 0, 0, 126, 127,
	128, 0, 0, 0, 0, 0, 0, 0, 372, 381,
	378, 379, 376, 377, 375, 374, 373, 383, 366, 367,
	369, 0, 368, 73, 0, 94, 129, 107, 87, 122,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	86, 113, 0, 0, 0, 0, 89, 90, 0, 0,
	95, 0, 0, 110, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 486, 485, 495, 496,
	488, 489, 490, 491, 492, 493, 494, 487, 0, 0,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 80, 0, 109, 105,
	120, 75, 118, 112, 99, 91, 92, 74, 0, 108,
	83, 88, 82, 103, 115, 116, 81, 130, 78, 124,
	77, 0, 123, 102, 0, 114, 119, 100, 97, 76,
	117, 98, 96, 93, 85, 0, 0, 0, 111, 121,
	131, 0, 0, 126, 127, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 802, 0, 0, 0, 73, 84,
	94, 129, 107, 87, 122, 0, 89, 0, 0, 0,
	95, 0, 0, 110, 101, 86, 113, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 804, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 474, 473, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 80, 0, 109, 105,
	120, 75, 118, 112, 99, 91, 92, 74, 0, 108,
	83, 88, 82, 103, 115, 116, 81, 130, 78, 124,
	77, 0, 123, 102, 0, 114, 119, 100, 97, 76,
	117, 98, 96, 93, 85, 0, 0, 104, 111, 121,
	131, 0, 0, 126, 127, 128, 84, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 95, 0, 0,
	110, 101, 0, 0, 0, 0, 0, 0, 73, 0,
	94, 129, 107, 87, 122, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 86, 113, 79, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 125, 0, 0, 0, 69, 0, 106, 0,
	0, 0, 0, 80, 0, 109, 105, 120, 75, 118,
	112, 99, 91, 92, 74, 0, 108, 83, 88, 82,
	103, 115, 116, 81, 130, 78, 124, 77, 0, 123,
	102, 0, 114, 119, 100, 97, 76, 117, 98, 96,
	93, 85, 0, 0, 0, 111, 121, 131, 0, 0,
	126, 127, 128, 0, 0, 0, 23, 0, 0, 0,
	0, 66, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 73, 84, 94, 129, 107,
	87, 122, 0, 89, 0, 0, 0, 95, 0, 0,
	110, 101, 86, 113, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 51, 0, 0, 246, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 80, 0, 109, 105, 120, 75, 118,
	112, 99, 91, 92, 74, 0, 108, 83, 88, 82,
	103, 115, 116, 81, 130, 78, 124, 77, 0, 123,
	102, 0, 114, 119, 100, 97, 76, 117, 98, 96,
	93, 85, 0, 0, 104, 111, 121, 131, 978, 0,
	126, 127, 128, 84, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 95, 0, 0, 110, 101, 0,
	0, 0, 0, 0, 0, 73, 0, 94, 129, 107,
	87, 122, 0, 0, 0, 246, 0, 980, 0, 0,
	0, 0, 86, 113, 79, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	80, 0, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 0, 123, 102, 0, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	0, 0, 111, 121, 131, 0, 0, 126, 127, 128,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 73, 84, 94, 129, 107, 87, 122, 0,
	89, 0, 0, 0, 95, 0, 0, 110, 101, 86,
	113, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 51, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	80, 0, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 0, 123, 102, 0, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	0, 104, 111, 121, 131, 0, 0, 126, 127, 128,
	84, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 95, 0, 0, 110, 101, 0, 0, 0, 0,
	0, 0, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 71, 0, 0, 554, 0, 0, 555, 86,
	113, 79, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 80, 0, 109,
	105, 120, 75, 118, 112, 99, 91, 92, 74, 0,
	108, 83, 88, 82, 103, 115, 116, 81, 130, 78,
	124, 77, 0, 123, 102, 0, 114, 119, 100, 97,
	76, 117, 98, 96, 93, 85, 0, 0, 104, 111,
	121, 131, 0, 0, 126, 127, 128, 84, 0, 408,
	0, 0, 0, 0, 89, 0, 0, 0, 95, 0,
	0, 110, 101, 0, 0, 0, 0, 0, 0, 73,
	0, 94, 129, 107, 87, 122, 0, 0, 0, 71,
	0, 407, 0, 0, 0, 0, 86, 113, 79, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 80, 0, 109, 105, 120, 75,
	118, 112, 99, 91, 92, 74, 0, 108, 83, 88,
	82, 103, 115, 116, 81, 130, 78, 124, 77, 0,
	123, 102, 0, 114, 119, 100, 97, 76, 117, 98,
	96, 93, 85, 0, 0, 104, 111, 121, 131, 0,
	0, 126, 127, 128, 84, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 95, 0, 0, 110, 101,
	0, 0, 0, 0, 0, 0, 73, 0, 94, 129,
	107, 87, 122, 0, 0, 0, 246, 0, 980, 0,
	0, 0, 0, 86, 113, 79, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 80, 0, 109, 105, 120, 75, 118, 112, 99,
	91, 92, 74, 0, 108, 83, 88, 82, 103, 115,
	116, 81, 130, 78, 124, 77, 0, 123, 102, 0,
	114, 119, 100, 97, 76, 117, 98, 96, 93, 85,
	0, 0, 104, 111, 121, 131, 0, 0, 126, 127,
	128, 84, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 95, 0, 0, 110, 101, 0, 0, 0,
	0, 0, 0, 73, 0, 94, 129, 107, 87, 122,
	51, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	86, 113, 79, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 80, 0,
	109, 105, 120, 75, 118, 112, 99, 91, 92, 74,
	0, 108, 83, 88, 82, 103, 115, 116, 81, 130,
	78, 124, 77, 0, 123, 102, 0, 114, 119, 100,
	97, 76, 117, 98, 96, 93, 85, 0, 0, 104,
	111, 121, 131, 0, 0, 126, 127, 128, 84, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 95,
	0, 0, 110, 101, 0, 0, 0, 0, 0, 0,
	73, 0, 94, 129, 107, 87, 122, 0, 0, 0,
	71, 0, 804, 0, 0, 0, 0, 86, 113, 79,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 80, 0, 109, 105, 120,
	75, 118, 112, 99, 91, 92, 74, 0, 108, 83,
	88, 82, 103, 115, 116, 81, 130, 78, 124, 77,
	0, 123, 102, 0, 114, 119, 100, 97, 76, 117,
	98, 96, 93, 85, 0, 0, 0, 111, 121, 131,
	104, 0, 126, 127, 128, 0, 0, 0, 397, 84,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	95, 0, 0, 110, 101, 0, 0, 73, 0, 94,
	129, 107, 87, 122, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 86, 113, 0, 0, 0, 0,
	79, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 80, 0, 109, 105,
	120, 75, 118, 112, 99, 91, 92, 74, 0, 108,
	83, 88, 82, 103, 115, 116, 81, 130, 78, 124,
	77, 0, 123, 102, 0, 114, 119, 100, 97, 76,
	117, 98, 96, 93, 85, 0, 0, 104, 111, 121,
	131, 0, 0, 126, 127, 128, 84, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 95, 0, 0,
	110, 101, 0, 0, 0, 0, 0, 0, 73, 0,
	94, 129, 107, 87, 122, 0, 0, 0, 71, 0,
	0, 0, 0, 0, 0, 86, 113, 79, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 80, 0, 109, 105, 120, 75, 118,
	112, 99, 91, 92, 74, 0, 108, 83, 88, 82,
	103, 115, 116, 81, 130, 78, 124, 77, 0, 123,
	102, 0, 114, 119, 100, 97, 76, 117, 98, 96,
	93, 85, 0, 0, 104, 111, 121, 131, 0, 0,
	126, 127, 128, 84, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 95, 0, 0, 110, 101, 0,
	0, 0, 0, 0, 0, 73, 0, 94, 129, 107,
	87, 122, 0, 0, 0, 384, 0, 0, 0, 0,
	0, 0, 86, 113, 79, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	80, 0, 109, 105, 120, 75, 118, 112, 99, 91,
	92, 74, 0, 108, 83, 88, 82, 103, 115, 116,
	81, 130, 78, 124, 77, 0, 123, 102, 0, 114,
	119, 100, 97, 76, 117, 98, 96, 93, 85, 0,
	0, 104, 111, 121, 131, 0, 0, 126, 127, 128,
	84, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 95, 0, 0, 110, 101, 0, 0, 0, 0,
	0, 0, 73, 0, 94, 129, 107, 87, 122, 0,
	0, 0, 246, 0, 0, 0, 0, 0, 0, 86,
	113, 79, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 80, 0, 109,
	105, 120, 75, 118, 112, 99, 91, 92, 74, 0,
	108, 83, 88, 82, 103, 115, 116, 81, 130, 78,
	124, 77, 0, 123, 102, 0, 114, 119, 100, 97,
	76, 117, 98, 96, 93, 85, 0, 0, 0, 111,
	121, 131, 0, 0, 126, 127, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 94, 129, 107, 87, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 113, 0, 0,
	0, 0, 0, 90,
}
var yyPact = [...]int{

	118, -1000, -175, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 717, 755, -1000, -1000, -1000, -1000, -1000, 522, 5250,
	11, -10, 56, 48, 1940, 47, 7184, -1000, -1000, 10,
	-1000, -166, -1000, -1000, -1000, -1000, -1000, -1000, 518, -1000,
	-1000, -1000, -1000, -1000, 710, 714, 531, 704, 641, -1000,
	11, 7184, 739, 1713, -146, 334, 8, 43, 8, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14, -1000, 7, 428, 7, 7184, 7184, -1000,
	738, -67, 735, -17, -1000, -1000, -77, -1000, -103, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7184, -1000, -1000, -1000, -1000, -1000,
	-1000, 274, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	388, 692, 4523, 4523, 717, -1000, 518, -1000, -1000, -1000,
	657, -1000, -1000, 217, 6713, 663, 82, 7184, 478, 2165,
	-1000, -1000, -1000, 178, 6081, -1000, -1000, -1000, 662, -1000,
	-1000, -1000, -1000, -1000, -1000, 713, 418, -1000, 1165, 7184,
	188, 407, 7184, 7184, 7184, 696, 553, 7184, -1000, -1000,
	-1000, 7184, 729, 7184, 7184, 7184, -1000, -1000, 733, -1000,
	729, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 750, 126,
	296, -1000, 4523, 1266, 483, 483, -1000, -1000, 68, -1000,
	-1000, 4718, 4718, 4718, 4718, 4718, 4718, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	483, 80, -1000, 4325, 483, 483, 483, 483, 483, 483,
	4523, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, -1000, -1000, 479, -1000, 275, 710,
	388, 641, 5924, 563, -1000, -1000, 467, 7184, -1000, 7027,
	3517, 726, 2165, 478, 4523, 108, -1000, -1000, -1000, -1000,
	-151, -161, 138, 250, -61, -1000, -1000, 484, -1000, 484,
	484, 484, 484, -37, -37, -37, -37, -1000, -1000, -1000,
	-1000, -1000, 532, -1000, 484, 484, 484, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 527, 527, 527, 490, 490,
	-1000, 695, 550, -1000, 79, 477, -1000, -1000, 7184, -1000,
	-1000, 726, 7184, -1000, -1000, -1000, 710, -85, -1000, -1000,
	-1000, -1000, 602, 4523, 4523, 321, 4523, 4523, 132, 4718,
	265, 201, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718,
	4718, 4718, 4718, 4718, 4718, 4718, 4718, 278, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 406, -1000, 518, 420,
	420, 109, 109, 109, 109, 109, 4913, 3721, 3292, 388,
	405, 184, 4325, 3919, 3919, 4523, 4523, 3919, 701, 173,
	184, 6870, -1000, 388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3919, 3919, 3919, 3919, 4523, -1000, -1000, -1000, 692,
	-1000, 701, 715, -1000, 625, 608, 3919, -1000, 547, 7027,
	483, -1000, 5767, -1000, 520, -1000, 165, -1000, 77, -1000,
	-1000, -1000, 717, 4523, -1000, 184, -1000, 395, 483, -1000,
	-56, 162, -1000, -1000, 526, 688, 117, 393, 122, -1000,
	-1000, 668, -1000, 208, -64, -1000, -1000, 267, -37, -37,
	-1000, -1000, 108, 661, 108, 108, 108, 294, -1000, -1000,
	-1000, -1000, 260, -1000, -1000, -1000, 245, -1000, -1000, 7184,
	-1000, 151, 154, 13, 2, 1, 0, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7184, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 293, -1000, 598, 132, 157, -1000,
	-1000, 241, -1000, -1000, 184, 184, 572, -1000, -1000, -1000,
	-1000, 265, 4718, 4718, 4718, 106, 572, 605, 455, 800,
	109, 272, 272, 110, 110, 110, 110, 110, 259, 259,
	-1000, -1000, -1000, 388, -1000, -1000, -1000, 388, 3919, 474,
	-1000, -1000, 5093, 76, 483, 75, -1000, -1000, 4523, -1000,
	388, 358, 358, 169, 310, 358, 3919, 191, -1000, 4523,
	388, -1000, 358, 388, 358, 358, -1000, -1000, 7184, -1000,
	-1000, -1000, -1000, 510, -1000, 690, 457, 460, -1000, -1000,
	4117, 388, 401, 74, 717, 7027, 4523, 3292, 710, 184,
	-1000, 382, 658, 145, 365, 6870, -1000, 348, -1000, -1000,
	342, 536, 38, -1000, -1000, -1000, 449, 108, 108, -1000,
	153, -1000, -1000, -1000, 399, -1000, 473, 387, 2617, -1000,
	7184, -1000, -1000, -1000, -1000, -1000, 338, -39, 522, 336,
	334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	106, 572, 555, -1000, 4718, 4718, -1000, -1000, 358, 3919,
	-1000, -1000, 6552, -1000, -1000, 2842, 3919, 3067, 184, -1000,
	-1000, -1000, 174, 278, 174, -127, 491, 143, -1000, 4523,
	150, -1000, -1000, -1000, -1000, -1000, -1000, 726, 6395, 687,
	-1000, 483, -1000, -1000, 538, 6870, 6870, 710, -1000, 184,
	-1000, -1000, 388, -164, -43, 234, -1000, 355, -1000, 484,
	-1000, -1000, -57, 747, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 291, 227, -1000, 225, -1000,
	-1000, -1000, -1000, -1000, -1000, 660, -1000, -1000, -1000, -1000,
	4718, 572, 572, -1000, -1000, -1000, -1000, 72, 388, -1000,
	388, 484, 484, -1000, 484, 490, -1000, 484, -20, 484,
	-21, 388, 388, 483, -123, -1000, 184, 4523, 724, 462,
	552, -1000, -1000, -1000, 699, 5430, 5587, 746, -1000, 483,
	-1000, 518, 67, -1000, -1000, 2617, -1000, -1000, -1000, 144,
	-1000, -133, 6870, -1000, 142, -1000, -107, -1000, 445, 419,
	328, 572, 2392, -1000, -1000, -1000, 62, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4718, 388, 280, 184, 719,
	712, 6395, 6395, 6395, 6395, -1000, 589, 580, -1000, 573,
	570, 583, 7184, -1000, 352, 5430, 88, -1000, 6238, -1000,
	-1000, 7027, 460, 388, 6870, -1000, 326, 651, -1000, 214,
	686, -1000, 684, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	59, -1000, -1000, -1000, 4523, 4523, 552, 492, 447, -1000,
	-1000, -1000, -1000, 577, -1000, 566, -1000, -1000, -1000, -1000,
	-1000, 27, 24, 22, -1000, 458, -1000, -1000, -1000, 628,
	-1000, 242, -1000, -1000, 388, 28, -136, 184, 454, 4523,
	4523, -1000, -1000, 483, 483, 483, -1000, -1000, -1000, 594,
	-130, -140, 184, 184, 6870, 6870, 6870, -1000, 575, -1000,
	324, -1000, 324, 324, -134, -1000, 6870, -1000, -1000, -137,
	-1000, -143, -1000,
}
var yyPgo = [...]int{

	0, 954, 951, 949, 948, 946, 945, 55, 515, 942,
	940, 932, 931, 929, 928, 924, 923, 922, 921, 920,
	919, 918, 915, 914, 69, 913, 912, 911, 54, 910,
	58, 909, 908, 905, 29, 81, 26, 27, 114, 892,
	13, 7, 28, 891, 889, 3, 888, 863, 886, 49,
	885, 883, 882, 6, 15, 880, 879, 878, 877, 38,
	730, 876, 875, 872, 871, 870, 869, 32, 2, 16,
	18, 14, 868, 19, 5, 867, 36, 866, 865, 864,
	862, 22, 861, 39, 860, 20, 44, 859, 48, 8,
	31, 46, 51, 857, 856, 855, 341, 854, 128, 263,
	852, 844, 835, 834, 41, 0, 4, 24, 25, 826,
	735, 47, 9, 825, 823, 43, 1, 17, 822, 23,
	819, 818, 817, 816, 811, 809, 806, 105, 805, 804,
	802, 12, 40, 801, 796, 795, 794, 792, 791, 42,
	10, 790, 789, 787, 786, 33, 785, 45, 21, 784,
	780, 778, 11, 777, 776, 774, 52, 50, 768, 92,
}
var yyR1 = [...]int{

	0, 154, 155, 155, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 7, 7, 7, 8, 9, 9, 10, 10,
	11, 11, 27, 27, 12, 13, 14, 14, 118, 118,
	15, 15, 15, 15, 18, 148, 150, 134, 134, 133,
	133, 135, 135, 136, 136, 136, 149, 149, 149, 145,
	121, 121, 121, 124, 124, 122, 122, 122, 122, 122,
	122, 122, 123, 123, 123, 123, 123, 125, 125, 125,
	125, 125, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 144, 144, 127, 127,
	139, 139, 140, 140, 140, 137, 137, 138, 138, 141,
	141, 141, 128, 128, 128, 128, 128, 128, 129, 129,
	142, 142, 131, 131, 131, 132, 132, 143, 143, 143,
	143, 143, 130, 130, 146, 146, 151, 151, 151, 151,
	151, 147, 147, 153, 153, 152, 16, 16, 16, 16,
	16, 16, 16, 16, 17, 17, 17, 50, 50, 1,
	19, 2, 3, 4, 4, 5, 5, 5, 5, 120,
	120, 120, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 33, 33, 49, 49, 23, 21, 22,
	22, 22, 22, 158, 24, 25, 25, 26, 26, 26,
	30, 30, 30, 28, 28, 29, 29, 36, 36, 35,
	35, 37, 37, 37, 37, 109, 109, 109, 108, 108,
	39, 39, 40, 40, 41, 41, 42, 42, 42, 51,
	43, 43, 43, 43, 114, 114, 113, 113, 113, 112,
	112, 44, 44, 44, 44, 45, 45, 45, 45, 46,
	46, 48, 48, 47, 47, 52, 52, 52, 52, 53,
	53, 54, 54, 38, 38, 38, 38, 38, 38, 38,
	97, 97, 56, 56, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 66, 66, 66, 66, 66, 66,
	57, 57, 57, 57, 57, 57, 57, 34, 34, 67,
	67, 67, 73, 68, 68, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 64, 64, 64, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 63, 63, 63,
	63, 63, 63, 63, 63, 159, 159, 65, 65, 65,
	65, 31, 31, 31, 31, 31, 117, 117, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 77, 77, 32, 32, 75, 75, 76, 78, 78,
	74, 74, 74, 59, 59, 59, 59, 59, 59, 59,
	61, 61, 61, 79, 79, 80, 80, 81, 81, 82,
	82, 83, 84, 84, 84, 85, 85, 85, 85, 86,
	86, 86, 58, 58, 58, 58, 58, 58, 87, 87,
	87, 87, 88, 88, 69, 69, 71, 71, 70, 72,
	89, 89, 90, 91, 91, 92, 92, 94, 94, 94,
	93, 93, 93, 95, 95, 98, 98, 99, 99, 96,
	96, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 101, 101, 101, 102, 102, 103, 103, 103, 106,
	106, 107, 107, 110, 110, 111, 111, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 156, 157, 115, 116, 116, 116,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 10, 1, 3, 1, 3,
	6, 7, 1, 1, 8, 7, 3, 4, 1, 1,
	2, 9, 4, 7, 4, 4, 4, 0, 3, 0,
	4, 0, 3, 0, 1, 1, 1, 3, 3, 8,
	3, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 2, 2, 2, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 0, 2, 1,
	2, 1, 0, 2, 4, 7, 2, 3, 2, 2,
	3, 1, 1, 1, 3, 2, 6, 7, 7, 7,
	9, 7, 7, 7, 4, 5, 4, 1, 3, 3,
	3, 2, 2, 3, 4, 2, 3, 2, 2, 1,
	1, 1, 3, 5, 6, 5, 5, 5, 3, 3,
	6, 3, 5, 0, 3, 0, 2, 4, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -154, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -23, -21, -2, -3, -4, -5,
	-22, -8, -9, 6, -27, 8, 9, 29, -18, 113,
	114, 115, 137, 117, 130, 32, 52, 215, 132, 221,
	224, 225, 228, 227, 24, 131, 135, 136, -156, 7,
	199, 55, -155, 232, -81, 14, -26, 5, -24, -158,
	-24, -24, -24, -24, -148, 55, 191, -103, 120, 126,
	-106, 58, -105, 205, 144, 138, 166, 157, 155, 67,
	133, 153, 149, 147, 26, 171, 222, 210, 148, 33,
	229, 142, 143, 170, 207, 37, 169, 165, 168, 141,
	164, 41, 160, 150, 17, 136, 128, 209, 146, 135,
	40, 175, 140, 223, 162, 151, 152, 167, 139, 163,
	137, 176, 211, 159, 156, 122, 180, 181, 182, 208,
	154, 177, -96, 124, 120, 121, 191, 120, 120, -120,
	179, 31, 189, 113, 183, 184, 186, 188, 120, 58,
	-104, -105, 73, 21, 23, 173, 76, 108, 15, 77,
	158, 161, 107, 200, 50, 192, 193, 190, 191, 178,
	28, 9, 24, 131, 20, 101, 115, 80, 81, 216,
	134, 22, 132, 70, 18, 53, 10, 12, 13, 125,
	124, 92, 121, 48, 7, 109, 25, 89, 44, 27,
	46, 90, 16, 194, 195, 30, 204, 103, 51, 38,
	74, 68, 71, 54, 72, 14, 49, 219, 218, 91,
	116, 199, 47, 6, 203, 29, 130, 45, 79, 123,
	69, 220, 5, 126, 8, 52, 127, 196, 197, 198,
	36, 217, 78, 11, 120, -110, 58, -105, -115, -115,
	61, 209, -115, 226, -115, -115, -115, -115, -115, -115,
	-7, -85, 16, 15, -10, -8, -156, 6, 19, 20,
	-30, 42, 43, -25, -96, -47, -110, 10, -91, -118,
	-92, 230, 229, -107, -94, -106, -104, 161, 158, 231,
	189, 113, 31, 120, 179, 212, -149, -145, 58, -99,
	125, 121, -99, 120, -98, 125, 58, -98, -47, -47,
	-115, 10, 179, 10, 120, 191, -115, -115, 185, -115,
	188, -47, -115, 61, -115, -157, 57, -86, 18, 30,
	-38, -55, 74, -60, 28, 22, -59, -56, -74, -72,
	-73, 108, 97, 98, 105, 75, 109, -64, -62, -63,
	-65, 60, 59, 61, 62, 63, 64, 68, 69, 70,
	-106, -110, -70, -156, 46, 47, 200, 201, 204, 202,
	77, 36, 190, 198, 197, 196, 194, 195, 192, 193,
	125, 191, 103, 199, 58, -105, -82, -83, -38, -81,
	-7, -24, 38, -28, 20, 66, -48, 25, -47, 29,
	110, -47, 56, -91, 82, -93, -106, 60, 28, 29,
	15, 57, 56, -121, -124, -126, -125, -122, -123, 155,
	156, 108, 159, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 133, 151, 152, 153, 154, 138, 139,
	140, 141, 142, 143, 144, 146, 147, 148, 149, 150,
	-110, 74, 58, -47, -47, -50, -47, 22, 54, -110,
	-47, -49, 10, -47, -47, -47, -33, 10, -49, -115,
	-115, 8, 92, 73, 72, 89, 56, 17, -38, -57,
	92, 74, 90, 91, 76, 94, 93, 104, 97, 98,
	99, 100, 101, 102, 103, 95, 96, 107, 82, 83,
	84, 85, 86, 87, 88, -97, -156, -73, -156, 111,
	112, -60, -60, -60, -60, -60, -60, -156, 110, -7,
	-68, -38, -156, -156, -156, -156, -156, -156, -156, -77,
	-38, -156, -159, -156, -159, -159, -159, -159, -159, -159,
	-159, -156, -156, -156, -156, 56, -84, 23, 24, -85,
	-157, -30, -61, -106, 61, 64, -29, 45, -58, 29,
	36, -7, -156, -47, -89, -90, -74, -106, -110, -111,
	-110, -104, -54, 11, -92, -38, -132, 107, 214, -150,
	-134, 222, -145, -146, -151, 128, 126, -147, 33, 121,
	27, -141, 68, 74, -137, 176, -127, 55, -127, -127,
	-127, -127, -131, 158, -131, -131, -131, 55, -127, -127,
	-127, -139, 55, -139, -139, -140, 55, -140, 22, 54,
	-100, 116, 222, 200, 118, 115, 119, 114, 173, 158,
	67, 28, 14, 211, 58, 56, -47, -115, -54, -47,
	-115, -115, -115, -85, 187, -115, 40, -38, -38, -66,
	68, 74, 69, 70, -38, -38, -60, -67, -70, -73,
	65, 92, 90, 91, 76, -60, -60, -60, -60, -60,
	-60, -60, -60, -60, -60, -60, -60, -60, -60, -60,
	-117, 58, 60, 58, -59, -59, -106, -36, 20, -35,
	-37, 99, -38, -110, -107, -111, -104, -157, 56, -157,
	-7, -35, -35, -38, -38, -35, -28, -75, -76, 78,
	-106, -157, -35, -36, -35, -35, -83, -86, -95, 18,
	10, 36, 36, -35, -88, 54, -89, -69, -71, -70,
	-156, -7, -87, -106, -54, 56, 82, 110, -81, -38,
	58, -156, -135, 173, 82, 55, 27, -147, 58, 58,
	-147, -128, 28, 68, -138, 177, 61, -131, -131, -132,
	29, -132, -132, -132, -144, 60, 61, 61, -47, -115,
	-101, -102, 123, 21, 121, 27, 82, 123, 129, 129,
	129, -47, -115, -115, 60, 41, 68, 69, 70, -67,
	-60, -60, -60, -34, 134, 73, -157, -157, -35, 56,
	-109, -108, 21, -106, 60, 110, -156, 110, -38, -157,
	-157, -157, 56, 127, 21, -157, -35, -78, -76, 80,
	-38, -157, -157, -157, -157, -157, -47, -39, 10, 26,
	-88, 56, -157, -157, -157, 56, 110, -81, -90, -38,
	-107, -85, 58, -133, 28, 82, 58, -153, -152, -106,
	58, 58, -129, 54, 60, 61, 62, 68, 190, 57,
	-132, -132, 58, 108, 57, 56, 56, 57, 56, -116,
	-156, -107, -47, -115, 58, 158, -148, 58, -145, -34,
	73, -60, -60, -157, -37, -108, 99, -111, -36, -107,
	-119, 108, 155, 133, 153, 149, 170, 160, 175, 151,
	176, -117, -119, 205, -81, 81, -38, 79, -54, -40,
	-41, -42, -43, -51, -73, -156, -47, 27, -71, 36,
	-7, -156, -106, -106, -85, -157, -136, 229, 223, 161,
	61, 57, 56, -127, -142, 173, 8, 60, 61, 61,
	29, -60, 110, -157, -157, -127, -127, -127, -140, -127,
	143, -127, 143, -157, -157, -156, -32, 203, -38, -79,
	12, 56, -44, -45, -46, 44, 48, 50, 45, 46,
	47, 51, -114, 21, -40, -156, -113, -112, 21, -110,
	60, 8, -69, -7, 110, -116, 82, 208, -152, -143,
	128, 27, 126, 190, 57, 57, 58, 99, -131, 58,
	-60, -157, 60, -80, 13, 15, -41, -42, -41, -42,
	44, 44, 44, 49, 44, 49, 44, -45, -110, -157,
	-52, 52, 124, 53, -112, -89, -157, -106, 58, 34,
	-130, 67, 27, 27, -31, 92, 208, -38, -68, 54,
	54, 44, 44, 121, 121, 121, 35, 60, -157, 206,
	51, 209, -38, -38, -156, -156, -156, 41, 207, 210,
	-53, -106, -53, -53, 41, -157, 56, -157, -157, 208,
	-106, 209, 210,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 407, 0, 193, 193, 193, 193, 193, 0, 476,
	459, 0, 0, 0, 0, 0, 0, 645, 645, 0,
	645, 0, 645, 645, 645, 645, 645, 645, 0, 32,
	33, 643, 1, 3, 415, 0, 0, 197, 200, 195,
	459, 0, 0, 0, 40, 0, 457, 0, 457, 477,
	478, 479, 480, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 0, 460, 455, 0, 455, 0, 0, 645,
	567, 524, 498, 500, 645, 645, 0, 645, 566, 169,
	170, 171, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 499, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 521, 522, 523, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 568, 569,
	570, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 0, 188, 483, 484, 161, 162,
	645, 0, 165, 645, 167, 168, 189, 190, 191, 192,
	26, 419, 0, 0, 407, 28, 0, 193, 198, 199,
	203, 201, 202, 194, 0, 0, 253, 0, 36, 0,
	443, 38, -2, 0, 0, 481, 482, -2, 495, 449,
	498, 500, 524, 566, 567, 0, 0, 56, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, 160,
	172, 0, 185, 0, 0, 0, 178, 179, 183, 181,
	185, 645, 163, 645, 166, 27, 644, 22, 0, 0,
	416, 263, 0, 268, 270, 0, 305, 306, 307, 308,
	309, 0, 0, 0, 0, 0, 0, 331, 332, 333,
	334, 393, 394, 395, 396, 397, 398, 399, 272, 273,
	390, 0, 439, 0, 0, 0, 0, 0, 0, 0,
	381, 0, 355, 355, 355, 355, 355, 355, 355, 355,
	0, 0, 0, 0, -2, -2, 408, 409, 412, 415,
	26, 200, 0, 205, 204, 196, 0, 0, 252, 0,
	0, 261, 0, 37, 0, 125, 450, 451, 452, 448,
	0, 47, 0, 109, 105, 61, 62, 98, 64, 98,
	98, 98, 98, 122, 122, 122, 122, 90, 91, 92,
	93, 94, 0, 77, 98, 98, 98, 81, 65, 66,
	67, 68, 69, 70, 71, 100, 100, 100, 102, 102,
	42, 0, 0, 44, 0, 154, 157, 456, 0, 156,
	645, 261, 0, 645, 645, 645, 415, 0, 645, 187,
	164, 420, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 291,
	292, 293, 294, 295, 296, 269, 0, 283, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 207, 0, 26,
	0, 303, 0, 0, 0, 0, 0, 0, 203, 0,
	382, 0, 347, 0, 348, 349, 350, 351, 352, 353,
	354, 0, 207, 0, 0, 0, 411, 413, 414, 419,
	29, 203, 0, 400, 0, 0, 0, 206, 432, 0,
	0, -2, 0, 251, 261, 440, 0, 390, 0, 254,
	485, 486, 407, 0, 444, 445, 446, 0, 0, 45,
	51, 0, 57, 58, 0, 0, 0, 0, 0, 141,
	142, 112, 110, 0, 107, 106, 63, 0, 122, 122,
	84, 85, 125, 0, 125, 125, 125, 0, 78, 79,
	80, 72, 0, 73, 74, 75, 0, 76, 458, 0,
	645, 471, 0, 468, 0, 466, 0, 461, 462, 463,
	464, 465, 467, 469, 470, 0, 155, 173, 645, 186,
	175, 176, 177, 645, 0, 182, 0, 264, 265, 267,
	284, 0, 286, 288, 417, 418, 274, 275, 299, 300,
	301, 0, 0, 0, 0, 297, 279, 0, 310, 311,
	312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
	324, 366, 367, 0, 322, 323, 330, 0, 0, 208,
	209, 211, 215, 0, 391, 0, -2, 302, 0, 438,
	26, 0, 0, 0, 0, 0, 0, 388, 385, 0,
	0, 356, 0, 0, 0, 0, 410, 23, 0, 453,
	454, 401, 402, 220, 30, 0, 432, 422, 434, 436,
	0, 26, 0, 428, 407, 0, 0, 0, 415, 262,
	126, 0, 49, 0, 0, 0, 136, 0, 138, 139,
	0, 118, 0, 111, 60, 108, 0, 125, 125, 86,
	0, 87, 88, 89, 0, 96, 0, 0, 646, 146,
	0, 645, 472, 473, 474, 475, 0, 0, 0, 0,
	0, 158, 174, 180, 184, 421, 285, 287, 289, 276,
	297, 280, 0, 277, 0, 0, 271, 335, 0, 0,
	212, 216, 0, 218, 219, 0, 207, 0, 304, -2,
	338, 339, 0, 0, 0, 0, 407, 0, 386, 0,
	0, 346, 357, 358, 359, 360, 24, 261, 0, 0,
	31, 0, 437, -2, 0, 0, 0, 415, 441, 442,
	391, 35, 0, 53, 0, 0, 48, 0, 143, 98,
	137, 140, 120, 0, 113, 114, 115, 116, 117, 99,
	82, 83, 123, 124, 95, 0, 0, 103, 0, 43,
	647, 648, 147, 148, 149, 0, 151, 152, 153, 278,
	0, 298, 281, 336, 210, 217, 213, 0, 0, 392,
	0, 98, 98, 371, 98, 102, 374, 98, 376, 98,
	379, 0, 0, 0, 383, 345, 389, 0, 403, 221,
	222, 224, 225, 226, 234, 0, 236, 0, 435, 0,
	-2, 0, 430, 429, 34, 646, 46, 54, 55, 0,
	52, 134, 0, 145, 127, 121, 0, 97, 0, 0,
	0, 282, 0, 337, 340, 368, 122, 372, 373, 375,
	377, 378, 380, 342, 341, 0, 0, 0, 387, 405,
	0, 0, 0, 0, 0, 241, 0, 0, 244, 0,
	0, 0, 0, 235, 0, 0, 255, 237, 0, 239,
	240, 0, 425, 26, 0, 41, 0, 0, 144, 132,
	0, 129, 131, 119, 101, 104, 150, 214, 369, 370,
	361, 344, 384, 25, 0, 0, 223, 230, 0, 233,
	242, 243, 245, 0, 247, 0, 249, 250, 227, 228,
	229, 0, 0, 0, 238, 433, -2, 431, 50, 0,
	59, 0, 128, 130, 0, 0, 0, 406, 404, 0,
	0, 246, 248, 0, 0, 0, 135, 133, 343, 0,
	0, 0, 231, 232, 0, 0, 0, 362, 0, 365,
	0, 259, 0, 0, 363, 256, 0, 257, 258, 0,
	260, 0, 364,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	55, 57, 99, 97, 56, 98, 110, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 232,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:278
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:283
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:284
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:288
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:311
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:319
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:323
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:330
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:336
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:340
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:346
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:350
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:357
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:368
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:384
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:390
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:396
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:402
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:406
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:412
		{
			yyVAL.str = SessionStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:416
		{
			yyVAL.str = GlobalStr
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:423
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:429
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:437
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:445
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:452
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:463
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:470
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
			yyVAL.TableOptions.Type = yyDollar[4].str
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:477
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:481
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:486
		{
			yyVAL.str = ""
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:490
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:495
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:499
		{
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:503
		{
			yyVAL.str = NormalTableType
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:507
		{
			yyVAL.str = GlobalTableType
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:511
		{
			yyVAL.str = SingleTableType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:527
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:533
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:544
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:559
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:707
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:712
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:717
		{
			yyVAL.optVal = nil
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:721
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:726
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:730
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:738
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:742
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:748
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:756
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:760
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:765
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:769
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:775
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:779
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:788
		{
			yyVAL.optVal = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:796
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:800
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:804
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:808
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:813
		{
			yyVAL.optVal = nil
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:817
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:822
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:826
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:831
		{
			yyVAL.str = ""
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:835
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:839
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:844
		{
			yyVAL.str = ""
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:848
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:853
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:861
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:869
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:874
		{
			yyVAL.optVal = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:878
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:884
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:888
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:898
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:902
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:906
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:910
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:931
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:937
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:943
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:947
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:952
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:957
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:961
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:965
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:969
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:973
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:980
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:988
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:993
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1019
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.statement = &Xa{}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = &Explain{}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1069
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.tableName = TableName{}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1154
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.statement = &OtherRead{}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.statement = &OtherRead{}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1177
		{
			setAllowComments(yylex, true)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.bytes2 = nil
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.str = UnionStr
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.str = UnionAllStr
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.str = UnionDistinctStr
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.str = ""
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = SQLCacheStr
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.str = DistinctStr
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.str = ""
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.str = StraightJoinHint
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.selectExprs = nil
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1330
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1357
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1361
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.empty = struct{}{}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.empty = struct{}{}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.str = JoinStr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.str = JoinStr
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.str = JoinStr
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.str = StraightJoinStr
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.str = LeftJoinStr
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.str = LeftJoinStr
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.str = RightJoinStr
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.str = RightJoinStr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.str = NaturalJoinStr
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1432
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1452
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.indexHints = nil
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.expr = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 281:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1584
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = IsNullStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = IsNotNullStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.str = IsTrueStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = IsNotTrueStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = IsFalseStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.str = IsNotFalseStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = EqualStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.str = LessThanStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.str = GreaterThanStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.str = LessEqualStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = GreaterEqualStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = NotEqualStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.expr = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1769
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1777
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 337:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 340:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 341:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 342:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 343:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 344:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1941
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.str = BooleanModeStr
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = QueryExpansionStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.expr = nil
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.str = string("")
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2051
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.expr = &NullVal{}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2116
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2134
		{
			yyVAL.exprs = nil
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2138
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.expr = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.orderBy = nil
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.str = AscScr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.str = AscScr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.str = DescScr
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.limit = nil
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.str = ForUpdateStr
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.str = ShareModeStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2228
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2232
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2236
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 427:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2249
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.updateExprs = nil
		}
	case 433:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2309
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.bytes = []byte("charset")
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.expr = &Default{}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.byt = 0
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.byt = 1
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.byt = 0
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.byt = 1
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.str = IgnoreStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2426
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2649
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2658
		{
			decNesting(yylex)
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2663
		{
			forceEOF(yylex)
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2668
		{
			forceEOF(yylex)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			forceEOF(yylex)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2676
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
