//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const STATUS = 57513
const COLUMNS = 57514
const CURRENT_TIMESTAMP = 57515
const DATABASE = 57516
const CURRENT_DATE = 57517
const CURRENT_TIME = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const UTC_DATE = 57521
const UTC_TIME = 57522
const UTC_TIMESTAMP = 57523
const REPLACE = 57524
const CONVERT = 57525
const CAST = 57526
const GROUP_CONCAT = 57527
const SEPARATOR = 57528
const MATCH = 57529
const AGAINST = 57530
const BOOLEAN = 57531
const LANGUAGE = 57532
const WITH = 57533
const QUERY = 57534
const EXPANSION = 57535
const UNUSED = 57536
const PARTITION = 57537
const PARTITIONS = 57538
const HASH = 57539
const LIST = 57540
const XA = 57541
const DISTRIBUTED = 57542
const ENGINES = 57543
const VERSIONS = 57544
const PROCESSLIST = 57545
const QUERYZ = 57546
const TXNZ = 57547
const KILL = 57548
const ENGINE = 57549
const SINGLE = 57550
const BEGIN = 57551
const START = 57552
const TRANSACTION = 57553
const COMMIT = 57554
const ROLLBACK = 57555
const GLOBAL = 57556
const SESSION = 57557
const NAMES = 57558
const RADON = 57559
const ATTACH = 57560
const ATTACHLIST = 57561
const DETACH = 57562
const RESHARD = 57563

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 293,
	83, 659,
	-2, 40,
	-1, 298,
	83, 537,
	-2, 485,
	-1, 402,
	111, 521,
	-2, 517,
	-1, 403,
	111, 522,
	-2, 518,
	-1, 430,
	158, 56,
	161, 56,
	-2, 69,
	-1, 469,
	1, 50,
	239, 50,
	-2, 56,
	-1, 585,
	5, 27,
	-2, 461,
	-1, 606,
	158, 56,
	161, 56,
	-2, 70,
	-1, 671,
	1, 51,
	239, 51,
	-2, 56,
	-1, 755,
	111, 524,
	-2, 520,
	-1, 882,
	5, 28,
	-2, 340,
	-1, 906,
	5, 28,
	-2, 462,
	-1, 993,
	5, 27,
	-2, 464,
	-1, 1096,
	5, 28,
	-2, 465,
}

const yyNprod = 693
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 7495

var yyAct = [...]int{

	403, 491, 1099, 1052, 358, 1038, 942, 984, 380, 925,
	356, 1133, 545, 3, 588, 944, 784, 919, 785, 963,
	596, 272, 983, 667, 1049, 297, 56, 739, 654, 749,
	746, 74, 66, 867, 802, 781, 134, 310, 254, 589,
	875, 765, 716, 600, 494, 805, 614, 411, 309, 648,
	255, 672, 629, 354, 607, 345, 754, 663, 405, 623,
	291, 133, 480, 271, 254, 289, 74, 281, 312, 381,
	50, 263, 265, 264, 266, 60, 378, 55, 748, 260,
	1100, 294, 306, 602, 603, 617, 1147, 307, 1132, 257,
	256, 1146, 259, 1121, 261, 262, 1144, 267, 268, 269,
	270, 62, 63, 64, 65, 1062, 1131, 72, 1120, 976,
	1032, 118, 119, 328, 929, 333, 700, 332, 326, 826,
	50, 612, 254, 254, 647, 1069, 948, 655, 277, 816,
	817, 818, 840, 807, 1027, 852, 806, 819, 1025, 688,
	851, 850, 296, 643, 642, 24, 51, 26, 27, 1091,
	1093, 319, 556, 639, 314, 117, 849, 687, 496, 1113,
	1112, 626, 1111, 315, 847, 317, 251, 496, 46, 122,
	121, 318, 28, 1059, 324, 36, 645, 535, 536, 330,
	331, 120, 807, 329, 690, 806, 626, 1017, 909, 644,
	637, 881, 37, 686, 885, 53, 638, 1103, 512, 511,
	521, 522, 514, 515, 516, 517, 518, 519, 520, 513,
	500, 499, 523, 514, 515, 516, 517, 518, 519, 520,
	513, 1092, 811, 523, 655, 879, 601, 501, 794, 516,
	517, 518, 519, 520, 513, 751, 258, 523, 544, 418,
	683, 681, 677, 523, 680, 682, 1137, 933, 513, 641,
	498, 523, 254, 30, 31, 32, 495, 34, 820, 501,
	625, 803, 1119, 846, 886, 495, 1014, 254, 848, 35,
	47, 39, 338, 340, 48, 49, 33, 613, 616, 499,
	793, 422, 978, 685, 615, 625, 254, 766, 470, 254,
	408, 74, 321, 1012, 640, 501, 74, 934, 684, 766,
	313, 892, 407, 500, 499, 815, 294, 413, 335, 1007,
	980, 337, 1104, 1006, 254, 116, 341, 254, 254, 254,
	501, 53, 254, 500, 499, 679, 254, 1072, 254, 254,
	254, 719, 838, 339, 339, 837, 689, 964, 52, 920,
	501, 921, 343, 1013, 503, 1005, 887, 50, 740, 678,
	741, 709, 711, 712, 409, 38, 421, 710, 533, 827,
	723, 966, 40, 571, 572, 41, 42, 296, 44, 43,
	336, 316, 424, 45, 721, 722, 720, 968, 285, 972,
	918, 967, 856, 965, 502, 488, 836, 489, 970, 490,
	823, 493, 1116, 500, 499, 344, 487, 1010, 969, 1066,
	500, 499, 950, 971, 973, 860, 861, 862, 500, 499,
	501, 74, 1140, 344, 1114, 344, 254, 501, 947, 254,
	928, 74, 532, 534, 1009, 501, 927, 585, 590, 573,
	1036, 344, 312, 1003, 1002, 702, 294, 370, 369, 371,
	372, 373, 374, 812, 595, 797, 375, 742, 543, 873,
	344, 546, 547, 548, 549, 550, 551, 552, 471, 555,
	557, 557, 557, 557, 557, 557, 557, 557, 565, 566,
	567, 568, 656, 657, 658, 593, 320, 575, 254, 1065,
	618, 598, 254, 22, 586, 939, 938, 577, 650, 651,
	652, 653, 669, 1064, 591, 254, 57, 296, 930, 604,
	782, 694, 792, 660, 661, 662, 792, 699, 904, 348,
	406, 718, 936, 935, 1036, 717, 673, 908, 344, 702,
	344, 431, 430, 665, 666, 597, 901, 937, 873, 691,
	693, 420, 569, 696, 697, 698, 581, 53, 701, 873,
	649, 24, 276, 74, 558, 559, 560, 561, 562, 563,
	564, 1040, 1043, 1044, 1045, 1041, 74, 1042, 1046, 757,
	753, 1108, 24, 278, 24, 668, 67, 808, 583, 664,
	755, 792, 584, 873, 659, 492, 521, 522, 514, 515,
	516, 517, 518, 519, 520, 513, 504, 74, 523, 743,
	744, 53, 1107, 786, 590, 992, 782, 770, 783, 788,
	763, 675, 477, 1129, 50, 312, 1084, 1110, 1109, 791,
	1082, 1085, 53, 53, 53, 1083, 546, 492, 1081, 745,
	1080, 296, 1138, 795, 554, 1130, 758, 759, 773, 774,
	762, 859, 767, 1040, 1043, 1044, 1045, 1041, 705, 1042,
	1046, 412, 800, 779, 769, 778, 771, 772, 804, 1086,
	346, 1044, 1045, 1015, 787, 410, 50, 923, 599, 780,
	591, 801, 831, 790, 282, 283, 347, 427, 417, 617,
	902, 674, 798, 799, 476, 1048, 254, 279, 280, 828,
	829, 814, 810, 412, 813, 990, 822, 821, 809, 1117,
	273, 1101, 254, 1075, 429, 428, 274, 57, 830, 1074,
	832, 833, 834, 512, 511, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 1035, 777, 523, 673, 841,
	597, 481, 844, 839, 776, 718, 486, 843, 327, 717,
	325, 288, 1056, 824, 497, 706, 707, 59, 713, 714,
	61, 54, 1, 868, 953, 854, 1098, 671, 670, 628,
	855, 574, 74, 627, 924, 858, 620, 606, 605, 308,
	619, 835, 634, 863, 512, 511, 521, 522, 514, 515,
	516, 517, 518, 519, 520, 513, 254, 633, 523, 632,
	630, 825, 492, 646, 1011, 760, 761, 512, 511, 521,
	522, 514, 515, 516, 517, 518, 519, 520, 513, 312,
	312, 523, 1008, 590, 611, 406, 891, 610, 609, 74,
	913, 608, 635, 636, 631, 351, 434, 914, 910, 903,
	755, 435, 433, 880, 437, 436, 872, 432, 877, 123,
	290, 1047, 911, 796, 703, 1051, 915, 916, 874, 69,
	922, 845, 889, 74, 676, 254, 531, 775, 295, 423,
	789, 570, 404, 312, 511, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 1073, 1034, 523, 890, 591,
	553, 296, 931, 932, 764, 940, 941, 74, 357, 708,
	368, 365, 74, 949, 367, 926, 366, 576, 756, 582,
	505, 355, 349, 1090, 986, 753, 946, 962, 952, 474,
	768, 951, 254, 957, 379, 755, 987, 975, 414, 74,
	74, 961, 943, 786, 974, 1039, 977, 958, 74, 296,
	993, 981, 1037, 991, 1000, 985, 982, 900, 485, 1031,
	1102, 580, 997, 25, 58, 284, 960, 14, 857, 21,
	1001, 15, 252, 13, 12, 29, 10, 9, 8, 7,
	6, 5, 4, 877, 275, 23, 296, 2, 296, 20,
	19, 18, 17, 16, 11, 0, 0, 0, 287, 0,
	0, 988, 0, 0, 787, 0, 1004, 994, 0, 0,
	0, 0, 0, 0, 0, 995, 996, 943, 0, 254,
	254, 0, 1023, 987, 296, 0, 0, 0, 0, 74,
	0, 786, 893, 0, 74, 1060, 0, 1058, 0, 1057,
	0, 0, 0, 1063, 1020, 1021, 0, 1022, 74, 0,
	1024, 0, 1026, 492, 0, 0, 287, 287, 0, 912,
	0, 0, 0, 962, 0, 0, 0, 254, 254, 254,
	254, 987, 987, 987, 987, 1077, 1030, 1079, 254, 0,
	1068, 254, 1087, 0, 254, 987, 0, 1094, 1050, 1076,
	74, 1078, 787, 757, 50, 0, 0, 590, 943, 1061,
	0, 1095, 0, 0, 0, 296, 0, 1106, 0, 0,
	926, 0, 0, 0, 0, 870, 0, 989, 0, 871,
	0, 0, 0, 0, 296, 0, 0, 0, 0, 0,
	882, 883, 884, 0, 0, 888, 988, 988, 988, 988,
	894, 0, 895, 896, 897, 898, 74, 1127, 0, 0,
	1050, 0, 1128, 0, 0, 74, 74, 74, 979, 0,
	905, 906, 907, 591, 0, 0, 1097, 1135, 1136, 869,
	0, 74, 0, 917, 0, 0, 1143, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 287, 0, 0, 512,
	511, 521, 522, 514, 515, 516, 517, 518, 519, 520,
	513, 287, 0, 523, 0, 537, 538, 539, 540, 541,
	542, 1124, 1125, 1126, 0, 943, 0, 0, 0, 0,
	287, 0, 296, 287, 0, 0, 0, 0, 0, 0,
	0, 1134, 1134, 1134, 0, 0, 0, 339, 0, 322,
	323, 0, 0, 0, 0, 956, 1033, 1145, 469, 0,
	0, 287, 287, 287, 0, 0, 478, 0, 0, 0,
	287, 440, 287, 287, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 452, 0, 0, 998, 999,
	457, 458, 459, 460, 461, 462, 463, 0, 464, 465,
	466, 467, 468, 453, 454, 455, 456, 438, 439, 0,
	0, 441, 0, 0, 442, 443, 444, 445, 446, 447,
	448, 449, 450, 451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 1019, 0, 0, 0,
	1105, 492, 0, 0, 0, 0, 0, 1028, 1029, 0,
	287, 715, 592, 594, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 334,
	0, 0, 0, 1122, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 416, 1071, 0, 419, 0, 0, 0,
	0, 0, 287, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 287,
	0, 1096, 0, 0, 472, 473, 475, 0, 0, 0,
	507, 0, 510, 479, 0, 482, 483, 484, 524, 525,
	526, 527, 528, 529, 530, 0, 508, 509, 506, 512,
	511, 521, 522, 514, 515, 516, 517, 518, 519, 520,
	513, 1115, 0, 523, 0, 1118, 0, 0, 752, 594,
	0, 0, 752, 752, 0, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	752, 752, 752, 752, 0, 0, 1139, 0, 1141, 1142,
	0, 0, 0, 0, 0, 752, 0, 0, 592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 865, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 695,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 954, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 87, 592, 0, 594,
	0, 0, 747, 0, 353, 0, 0, 0, 82, 352,
	0, 0, 0, 0, 389, 91, 0, 0, 97, 92,
	0, 0, 0, 0, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 402, 370, 369, 371,
	372, 373, 374, 0, 0, 78, 375, 376, 377, 287,
	0, 0, 350, 363, 0, 388, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 360, 361, 750, 752, 853,
	0, 400, 0, 362, 594, 752, 359, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 398, 0, 0, 287, 0, 0, 0,
	79, 0, 96, 0, 104, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 86, 0, 0, 102, 103,
	80, 110, 0, 0, 77, 0, 0, 93, 0, 101,
	0, 0, 0, 0, 0, 0, 1070, 89, 83, 0,
	0, 0, 98, 0, 0, 0, 0, 107, 108, 109,
	0, 0, 0, 899, 0, 100, 0, 390, 399, 396,
	397, 394, 395, 393, 392, 391, 401, 384, 385, 387,
	0, 386, 75, 0, 90, 0, 95, 85, 105, 0,
	0, 0, 0, 287, 1054, 0, 0, 0, 0, 0,
	0, 84, 99, 0, 0, 0, 0, 0, 88, 0,
	0, 111, 112, 114, 113, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 287, 287, 287, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 287, 0, 0, 1054, 0,
	0, 592, 234, 221, 181, 237, 158, 173, 249, 174,
	175, 211, 143, 191, 94, 171, 87, 0, 0, 235,
	188, 0, 161, 136, 168, 137, 159, 185, 82, 157,
	223, 194, 125, 0, 243, 91, 203, 0, 97, 92,
	0, 0, 187, 226, 189, 220, 180, 212, 150, 202,
	238, 172, 208, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 205, 232, 170, 207,
	210, 135, 204, 0, 139, 144, 248, 230, 164, 165,
	0, 0, 0, 0, 0, 0, 0, 186, 190, 217,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 201, 0, 0, 0, 148, 141, 184, 0, 0,
	0, 127, 0, 163, 218, 0, 0, 0, 131, 179,
	106, 231, 177, 176, 239, 214, 0, 224, 160, 169,
	79, 167, 96, 209, 104, 76, 228, 225, 199, 182,
	183, 140, 0, 216, 81, 86, 156, 206, 102, 103,
	80, 110, 145, 245, 77, 146, 244, 93, 147, 101,
	229, 200, 196, 142, 227, 198, 195, 89, 83, 0,
	138, 0, 98, 236, 250, 155, 124, 107, 108, 109,
	128, 129, 0, 130, 0, 100, 126, 153, 154, 151,
	152, 192, 193, 240, 241, 242, 219, 149, 0, 0,
	222, 197, 75, 0, 90, 247, 95, 85, 105, 0,
	0, 0, 0, 0, 0, 166, 246, 215, 213, 233,
	0, 84, 99, 0, 0, 0, 0, 0, 88, 0,
	0, 111, 112, 114, 113, 115, 234, 221, 181, 237,
	158, 173, 249, 174, 175, 211, 143, 191, 94, 171,
	87, 0, 0, 235, 188, 0, 161, 136, 168, 137,
	159, 185, 82, 157, 223, 194, 303, 0, 243, 91,
	203, 0, 97, 92, 0, 0, 187, 226, 189, 220,
	180, 212, 150, 202, 238, 172, 208, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	205, 232, 170, 207, 210, 135, 204, 0, 139, 144,
	248, 230, 164, 165, 0, 0, 0, 0, 0, 0,
	0, 186, 190, 217, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 201, 0, 0, 0, 148,
	141, 184, 0, 0, 0, 302, 0, 163, 218, 0,
	0, 0, 304, 179, 106, 231, 177, 176, 239, 214,
	0, 224, 160, 169, 79, 167, 96, 209, 104, 76,
	228, 225, 199, 182, 183, 140, 0, 216, 81, 86,
	156, 206, 102, 103, 80, 110, 145, 245, 77, 299,
	244, 93, 298, 101, 229, 200, 196, 142, 227, 198,
	195, 89, 83, 0, 138, 0, 98, 236, 250, 155,
	305, 107, 108, 109, 0, 0, 0, 0, 0, 100,
	301, 153, 154, 151, 152, 192, 193, 240, 241, 242,
	219, 149, 0, 0, 222, 197, 75, 0, 90, 247,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 166,
	246, 215, 213, 233, 0, 84, 99, 0, 0, 0,
	0, 0, 293, 292, 300, 111, 112, 114, 113, 115,
	234, 221, 181, 237, 158, 173, 249, 174, 175, 211,
	143, 191, 94, 171, 87, 0, 0, 235, 188, 0,
	161, 136, 168, 137, 159, 185, 82, 157, 223, 194,
	303, 0, 243, 91, 203, 0, 97, 92, 0, 0,
	187, 226, 189, 220, 180, 212, 150, 202, 238, 172,
	208, 53, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 205, 232, 170, 207, 210, 135,
	204, 0, 139, 144, 248, 230, 164, 165, 0, 0,
	0, 0, 0, 0, 0, 186, 190, 217, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 201,
	0, 0, 0, 148, 141, 184, 0, 0, 0, 302,
	0, 163, 218, 0, 0, 0, 304, 179, 106, 231,
	177, 176, 239, 214, 0, 224, 160, 169, 79, 167,
	96, 209, 104, 76, 228, 225, 199, 182, 183, 140,
	0, 216, 81, 86, 156, 206, 102, 103, 80, 110,
	145, 245, 77, 146, 244, 93, 147, 101, 229, 200,
	196, 142, 227, 198, 195, 89, 83, 0, 138, 0,
	98, 236, 250, 155, 305, 107, 108, 109, 0, 0,
	0, 0, 0, 100, 301, 153, 154, 151, 152, 192,
	193, 240, 241, 242, 219, 149, 0, 0, 222, 197,
	75, 0, 90, 247, 95, 85, 105, 0, 0, 0,
	0, 0, 0, 166, 246, 215, 213, 233, 0, 84,
	99, 0, 0, 0, 0, 0, 88, 0, 0, 111,
	112, 114, 113, 115, 234, 221, 181, 237, 158, 173,
	249, 174, 175, 211, 143, 191, 94, 171, 87, 0,
	0, 235, 188, 0, 161, 136, 168, 137, 159, 185,
	82, 157, 223, 194, 303, 0, 243, 91, 203, 0,
	97, 92, 0, 0, 187, 226, 189, 220, 180, 212,
	150, 202, 238, 172, 208, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 205, 232,
	170, 207, 210, 135, 204, 0, 139, 144, 248, 230,
	164, 165, 0, 0, 0, 0, 0, 0, 0, 186,
	190, 217, 178, 0, 0, 0, 0, 0, 0, 1067,
	0, 162, 0, 201, 0, 0, 0, 148, 141, 184,
	0, 0, 0, 302, 0, 163, 218, 0, 0, 0,
	304, 179, 106, 231, 177, 176, 239, 214, 0, 224,
	160, 169, 79, 167, 96, 209, 104, 76, 228, 225,
	199, 182, 183, 140, 0, 216, 81, 86, 156, 206,
	102, 103, 80, 110, 145, 245, 77, 146, 244, 93,
	147, 101, 229, 200, 196, 142, 227, 198, 195, 89,
	83, 0, 138, 0, 98, 236, 250, 155, 305, 107,
	108, 109, 0, 0, 0, 0, 0, 100, 301, 153,
	154, 151, 152, 192, 193, 240, 241, 242, 219, 149,
	0, 0, 222, 197, 75, 0, 90, 247, 95, 85,
	105, 0, 0, 0, 0, 0, 0, 166, 246, 215,
	213, 233, 0, 84, 99, 0, 0, 0, 0, 0,
	88, 0, 0, 111, 112, 114, 113, 115, 234, 221,
	181, 237, 158, 173, 249, 174, 175, 211, 143, 191,
	94, 171, 87, 0, 0, 235, 188, 0, 161, 136,
	168, 137, 159, 185, 82, 157, 223, 194, 303, 0,
	243, 91, 203, 0, 97, 92, 0, 0, 187, 226,
	189, 220, 180, 212, 150, 202, 238, 172, 208, 0,
	0, 0, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 205, 232, 170, 207, 210, 135, 204, 0,
	139, 144, 248, 230, 164, 165, 0, 0, 0, 0,
	0, 0, 0, 186, 190, 217, 178, 0, 0, 0,
	0, 0, 0, 959, 0, 162, 0, 201, 0, 0,
	0, 148, 141, 184, 0, 0, 0, 302, 0, 163,
	218, 0, 0, 0, 304, 179, 106, 231, 177, 176,
	239, 214, 0, 224, 160, 169, 79, 167, 96, 209,
	104, 76, 228, 225, 199, 182, 183, 140, 0, 216,
	81, 86, 156, 206, 102, 103, 80, 110, 145, 245,
	77, 146, 244, 93, 147, 101, 229, 200, 196, 142,
	227, 198, 195, 89, 83, 0, 138, 0, 98, 236,
	250, 155, 305, 107, 108, 109, 0, 0, 0, 0,
	0, 100, 301, 153, 154, 151, 152, 192, 193, 240,
	241, 242, 219, 149, 0, 0, 222, 197, 75, 0,
	90, 247, 95, 85, 105, 0, 0, 0, 0, 0,
	0, 166, 246, 215, 213, 233, 0, 84, 99, 0,
	0, 0, 0, 0, 88, 0, 0, 111, 112, 114,
	113, 115, 234, 221, 181, 237, 158, 173, 249, 174,
	175, 211, 143, 191, 94, 171, 87, 0, 0, 235,
	188, 0, 161, 136, 168, 137, 159, 185, 82, 157,
	223, 194, 303, 0, 243, 91, 203, 0, 97, 92,
	0, 0, 187, 226, 189, 220, 180, 212, 150, 202,
	238, 172, 208, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 205, 232, 170, 207,
	210, 135, 204, 0, 139, 144, 248, 230, 164, 165,
	0, 0, 0, 0, 0, 0, 0, 186, 190, 217,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	0, 201, 0, 0, 0, 148, 141, 184, 0, 0,
	0, 302, 0, 163, 218, 0, 0, 0, 304, 179,
	106, 231, 177, 176, 239, 214, 0, 224, 160, 169,
	79, 167, 96, 209, 104, 76, 228, 225, 199, 182,
	183, 140, 0, 216, 81, 86, 156, 206, 102, 103,
	80, 110, 145, 245, 77, 299, 244, 93, 298, 101,
	229, 200, 196, 142, 227, 198, 195, 89, 83, 0,
	138, 0, 98, 236, 250, 155, 305, 107, 108, 109,
	0, 0, 0, 0, 0, 100, 301, 153, 154, 151,
	152, 192, 193, 240, 241, 242, 219, 149, 0, 0,
	222, 197, 75, 0, 90, 247, 95, 85, 105, 0,
	0, 0, 0, 0, 0, 166, 246, 215, 213, 233,
	0, 84, 99, 0, 0, 0, 0, 0, 88, 0,
	300, 111, 112, 114, 113, 115, 234, 221, 181, 237,
	158, 173, 249, 174, 175, 211, 143, 191, 94, 171,
	87, 0, 0, 235, 188, 0, 161, 136, 168, 137,
	159, 185, 82, 157, 223, 194, 303, 0, 243, 91,
	203, 0, 97, 92, 0, 0, 187, 226, 189, 220,
	180, 212, 150, 202, 238, 172, 208, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	205, 232, 170, 207, 210, 135, 204, 0, 139, 144,
	248, 230, 164, 165, 0, 0, 0, 0, 0, 0,
	0, 186, 190, 217, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 201, 0, 0, 0, 148,
	141, 184, 0, 0, 0, 302, 0, 163, 218, 0,
	0, 0, 304, 179, 106, 231, 177, 176, 239, 214,
	0, 224, 160, 169, 79, 167, 96, 209, 104, 76,
	228, 225, 199, 182, 183, 140, 0, 216, 81, 86,
	156, 206, 102, 103, 80, 110, 145, 245, 77, 146,
	244, 93, 147, 101, 229, 200, 196, 142, 227, 198,
	195, 89, 83, 0, 138, 0, 98, 236, 250, 155,
	305, 107, 108, 109, 0, 0, 0, 0, 0, 100,
	301, 153, 154, 151, 152, 192, 193, 240, 241, 242,
	219, 149, 0, 0, 222, 197, 75, 0, 90, 247,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 166,
	246, 215, 213, 233, 0, 84, 99, 0, 0, 0,
	0, 0, 88, 0, 0, 111, 112, 114, 113, 115,
	234, 221, 181, 237, 158, 173, 249, 174, 175, 211,
	143, 191, 94, 171, 87, 0, 0, 235, 188, 0,
	161, 136, 168, 137, 159, 185, 82, 157, 223, 194,
	303, 0, 243, 91, 203, 0, 97, 92, 0, 0,
	187, 226, 189, 220, 180, 212, 150, 202, 238, 172,
	208, 0, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 205, 232, 170, 207, 210, 135,
	204, 0, 139, 144, 248, 230, 164, 165, 0, 0,
	0, 0, 0, 0, 0, 186, 190, 217, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 201,
	0, 0, 0, 148, 141, 184, 0, 0, 0, 302,
	0, 163, 218, 0, 0, 0, 304, 179, 106, 231,
	177, 176, 239, 214, 0, 224, 160, 169, 79, 167,
	96, 209, 104, 76, 228, 225, 199, 182, 183, 140,
	0, 216, 81, 86, 156, 206, 102, 103, 80, 110,
	145, 245, 77, 146, 244, 93, 147, 101, 229, 200,
	196, 142, 227, 198, 195, 89, 83, 0, 138, 0,
	98, 236, 250, 155, 305, 107, 108, 109, 0, 0,
	0, 0, 0, 100, 301, 153, 154, 151, 152, 192,
	193, 240, 241, 242, 219, 149, 0, 0, 222, 197,
	75, 0, 90, 247, 95, 85, 105, 0, 0, 0,
	0, 0, 0, 166, 246, 215, 213, 233, 0, 84,
	99, 0, 0, 0, 0, 0, 88, 0, 0, 111,
	112, 114, 113, 115, 234, 221, 181, 237, 158, 173,
	249, 174, 175, 211, 143, 191, 94, 171, 87, 0,
	0, 235, 188, 0, 161, 136, 168, 137, 159, 185,
	82, 157, 223, 194, 303, 0, 243, 91, 203, 0,
	97, 92, 0, 0, 187, 226, 189, 220, 180, 212,
	150, 202, 238, 172, 208, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 205, 232,
	170, 207, 210, 135, 204, 0, 139, 144, 248, 230,
	164, 165, 0, 0, 0, 0, 0, 0, 0, 186,
	190, 217, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 201, 0, 0, 0, 148, 141, 184,
	0, 0, 0, 302, 0, 163, 218, 0, 0, 0,
	304, 179, 106, 231, 177, 176, 239, 214, 0, 224,
	160, 169, 79, 167, 96, 209, 104, 76, 228, 225,
	199, 182, 183, 140, 0, 216, 81, 86, 156, 206,
	102, 103, 80, 110, 145, 245, 77, 146, 244, 93,
	147, 101, 229, 200, 196, 142, 227, 198, 195, 89,
	83, 0, 138, 0, 98, 236, 250, 155, 305, 107,
	108, 109, 0, 0, 0, 0, 0, 100, 301, 153,
	154, 151, 152, 192, 193, 240, 241, 242, 219, 149,
	0, 0, 222, 197, 75, 0, 90, 247, 95, 85,
	105, 0, 0, 0, 0, 0, 0, 166, 246, 215,
	213, 233, 0, 84, 99, 0, 0, 0, 0, 94,
	88, 87, 0, 111, 112, 114, 113, 115, 0, 353,
	0, 0, 0, 82, 352, 0, 0, 0, 0, 389,
	91, 0, 0, 97, 92, 0, 0, 0, 0, 382,
	383, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 402, 370, 369, 371, 372, 373, 374, 0, 0,
	78, 375, 376, 377, 0, 0, 0, 350, 363, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	360, 361, 750, 0, 0, 0, 400, 0, 362, 0,
	0, 359, 364, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 398, 0,
	0, 0, 0, 0, 0, 79, 0, 96, 0, 104,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	86, 0, 0, 102, 103, 80, 110, 0, 0, 77,
	0, 0, 93, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 89, 83, 0, 0, 0, 98, 0, 0,
	0, 0, 107, 108, 109, 0, 0, 0, 0, 0,
	100, 0, 390, 399, 396, 397, 394, 395, 393, 392,
	391, 401, 384, 385, 387, 0, 386, 75, 0, 90,
	0, 95, 85, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 99, 0, 0,
	0, 0, 94, 88, 87, 0, 111, 112, 114, 113,
	115, 0, 353, 0, 0, 0, 82, 352, 0, 0,
	0, 0, 389, 91, 0, 0, 97, 92, 0, 0,
	0, 0, 382, 383, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 344, 402, 370, 369, 371, 372, 373,
	374, 0, 0, 78, 375, 376, 377, 0, 0, 0,
	350, 363, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 361, 0, 0, 0, 0, 400,
	0, 362, 0, 0, 359, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 398, 0, 0, 0, 0, 0, 0, 79, 0,
	96, 0, 104, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 86, 0, 0, 102, 103, 80, 110,
	0, 0, 77, 0, 0, 93, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 89, 83, 0, 0, 0,
	98, 0, 0, 0, 0, 107, 108, 109, 0, 0,
	0, 0, 0, 100, 0, 390, 399, 396, 397, 394,
	395, 393, 392, 391, 401, 384, 385, 387, 0, 386,
	75, 0, 90, 0, 95, 85, 105, 0, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 84,
	99, 0, 0, 0, 0, 94, 88, 87, 0, 111,
	112, 114, 113, 115, 0, 353, 0, 0, 0, 82,
	352, 0, 0, 0, 0, 389, 91, 0, 0, 97,
	92, 0, 0, 0, 0, 382, 383, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 402, 370, 369,
	371, 372, 373, 374, 0, 0, 78, 375, 376, 377,
	0, 0, 0, 350, 363, 0, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 360, 361, 0, 0,
	0, 0, 400, 0, 362, 0, 0, 359, 364, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 398, 0, 0, 0, 0, 0,
	0, 79, 0, 96, 0, 104, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 86, 0, 0, 102,
	103, 80, 110, 0, 0, 77, 0, 0, 93, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 89, 83,
	0, 0, 0, 98, 0, 0, 0, 0, 107, 108,
	109, 0, 0, 0, 0, 0, 100, 0, 390, 399,
	396, 397, 394, 395, 393, 392, 391, 401, 384, 385,
	387, 0, 386, 75, 0, 90, 0, 95, 85, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 99, 0, 0, 0, 0, 94, 88,
	87, 0, 111, 112, 114, 113, 115, 0, 353, 0,
	0, 0, 82, 352, 0, 0, 0, 0, 389, 91,
	0, 0, 97, 92, 0, 0, 0, 0, 382, 383,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	402, 370, 369, 371, 372, 373, 374, 0, 0, 78,
	375, 376, 377, 0, 0, 0, 350, 363, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 360,
	361, 0, 0, 0, 0, 400, 0, 362, 0, 0,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 79, 0, 96, 0, 104, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 86,
	0, 0, 102, 103, 80, 110, 0, 0, 77, 0,
	0, 93, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 89, 83, 0, 0, 0, 98, 0, 0, 0,
	0, 107, 108, 109, 0, 0, 0, 0, 0, 100,
	0, 390, 399, 396, 397, 394, 395, 393, 392, 391,
	401, 384, 385, 387, 0, 386, 75, 0, 90, 0,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 87, 0, 0, 84, 99, 0, 0, 0,
	0, 0, 88, 0, 82, 111, 112, 114, 113, 115,
	389, 91, 0, 0, 97, 92, 0, 0, 0, 0,
	382, 383, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 402, 370, 369, 371, 372, 373, 374, 0,
	0, 78, 375, 376, 377, 0, 0, 0, 0, 363,
	0, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 361, 0, 0, 0, 0, 400, 0, 362,
	0, 0, 359, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 398,
	0, 0, 0, 0, 0, 0, 79, 0, 96, 0,
	104, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 86, 0, 0, 102, 103, 80, 110, 0, 0,
	77, 0, 0, 93, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 89, 83, 0, 0, 0, 98, 0,
	0, 0, 0, 107, 108, 109, 0, 0, 0, 0,
	0, 100, 0, 390, 399, 396, 397, 394, 395, 393,
	392, 391, 401, 384, 385, 387, 0, 386, 75, 0,
	90, 0, 95, 85, 105, 0, 0, 0, 0, 0,
	0, 94, 0, 87, 0, 0, 0, 84, 99, 0,
	0, 0, 0, 0, 88, 82, 0, 111, 112, 114,
	113, 115, 91, 0, 0, 97, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 512, 511,
	521, 522, 514, 515, 516, 517, 518, 519, 520, 513,
	0, 0, 523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 96,
	0, 104, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 86, 0, 0, 102, 103, 80, 110, 0,
	0, 77, 0, 0, 93, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 89, 83, 0, 0, 0, 98,
	94, 0, 87, 0, 107, 108, 109, 0, 0, 876,
	0, 0, 100, 0, 82, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 97, 92, 0, 0, 0, 75,
	0, 90, 0, 95, 85, 105, 0, 0, 0, 0,
	0, 0, 73, 0, 878, 0, 0, 0, 84, 99,
	0, 78, 0, 0, 0, 88, 500, 499, 111, 112,
	114, 113, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 96, 0,
	104, 76, 0, 0, 0, 0, 0, 94, 0, 624,
	81, 86, 622, 626, 102, 103, 80, 110, 0, 0,
	77, 82, 0, 93, 0, 101, 0, 0, 91, 0,
	0, 97, 92, 89, 83, 0, 0, 0, 98, 0,
	0, 0, 0, 107, 108, 109, 0, 0, 0, 311,
	0, 100, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	90, 0, 95, 85, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 99, 0,
	0, 0, 0, 0, 88, 0, 0, 111, 112, 114,
	113, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 625, 106, 0, 0, 0, 0, 621, 0,
	0, 0, 0, 79, 0, 96, 0, 104, 76, 0,
	0, 0, 0, 0, 94, 0, 87, 81, 86, 71,
	0, 102, 103, 80, 110, 0, 0, 77, 82, 0,
	93, 0, 101, 0, 0, 91, 0, 0, 97, 92,
	89, 83, 0, 0, 0, 98, 0, 0, 0, 0,
	107, 108, 109, 0, 0, 0, 73, 0, 100, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 90, 0, 95,
	85, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 99, 0, 0, 0, 0,
	0, 88, 0, 0, 111, 112, 114, 113, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 96, 0, 104, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 86, 0, 0, 102, 103,
	80, 110, 0, 0, 77, 0, 0, 93, 0, 101,
	0, 0, 24, 0, 0, 0, 0, 89, 83, 0,
	0, 0, 98, 94, 0, 87, 0, 107, 108, 109,
	0, 0, 0, 0, 0, 100, 0, 82, 68, 0,
	0, 0, 0, 0, 91, 0, 0, 97, 92, 0,
	0, 0, 75, 0, 90, 0, 95, 85, 105, 0,
	0, 0, 53, 0, 0, 253, 0, 0, 0, 0,
	0, 84, 99, 0, 78, 0, 0, 0, 88, 0,
	0, 111, 112, 114, 113, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 96, 0, 104, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 86, 0, 0, 102, 103, 80,
	110, 0, 0, 77, 0, 0, 93, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 89, 83, 0, 0,
	0, 98, 94, 0, 87, 0, 107, 108, 109, 0,
	0, 1053, 0, 0, 100, 0, 82, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 97, 92, 0, 0,
	0, 75, 0, 90, 0, 95, 85, 105, 0, 0,
	0, 0, 0, 0, 253, 0, 1055, 0, 0, 0,
	84, 99, 0, 78, 0, 0, 0, 88, 0, 0,
	111, 112, 114, 113, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	96, 0, 104, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 86, 0, 0, 102, 103, 80, 110,
	0, 0, 77, 0, 0, 93, 0, 101, 0, 0,
	24, 0, 0, 0, 0, 89, 83, 0, 0, 0,
	98, 94, 0, 87, 0, 107, 108, 109, 0, 0,
	0, 0, 0, 100, 0, 82, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 97, 92, 0, 0, 0,
	75, 0, 90, 0, 95, 85, 105, 0, 0, 0,
	53, 0, 0, 73, 0, 0, 0, 0, 0, 84,
	99, 0, 78, 0, 0, 0, 88, 0, 0, 111,
	112, 114, 113, 115, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 96,
	0, 104, 76, 0, 0, 0, 94, 0, 87, 0,
	0, 81, 86, 0, 0, 102, 103, 80, 110, 0,
	82, 77, 0, 0, 93, 0, 101, 91, 0, 0,
	97, 92, 0, 0, 89, 83, 0, 0, 0, 98,
	0, 0, 0, 0, 107, 108, 109, 0, 73, 0,
	0, 578, 100, 0, 579, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 90, 0, 95, 85, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 99,
	0, 0, 0, 0, 0, 88, 0, 0, 111, 112,
	114, 113, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 96, 0, 104, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 86, 0, 0,
	102, 103, 80, 110, 0, 0, 77, 0, 0, 93,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 89,
	83, 94, 0, 87, 98, 0, 0, 0, 0, 107,
	108, 109, 0, 0, 0, 82, 426, 100, 0, 0,
	0, 0, 91, 0, 0, 97, 92, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 90, 0, 95, 85,
	105, 0, 0, 73, 0, 425, 0, 0, 0, 0,
	0, 0, 78, 84, 99, 0, 0, 0, 0, 0,
	88, 0, 0, 111, 112, 114, 113, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 96,
	0, 104, 76, 0, 0, 0, 94, 0, 87, 0,
	0, 81, 86, 0, 0, 102, 103, 80, 110, 0,
	82, 77, 0, 0, 93, 0, 101, 91, 0, 0,
	97, 92, 0, 0, 89, 83, 0, 0, 0, 98,
	0, 0, 0, 0, 107, 108, 109, 0, 253, 0,
	1055, 0, 100, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 90, 0, 95, 85, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 99,
	0, 0, 0, 0, 0, 88, 0, 0, 111, 112,
	114, 113, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 96, 0, 104, 76, 0, 0,
	0, 0, 0, 94, 0, 87, 81, 86, 0, 0,
	102, 103, 80, 110, 0, 0, 77, 82, 0, 93,
	0, 101, 0, 0, 91, 0, 0, 97, 92, 89,
	83, 0, 0, 0, 98, 0, 0, 0, 0, 107,
	108, 109, 53, 0, 0, 253, 0, 100, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 90, 0, 95, 85,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 99, 0, 0, 0, 0, 0,
	88, 0, 0, 111, 112, 114, 113, 115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 96, 0, 104, 76, 0, 0, 0, 94, 0,
	87, 0, 0, 81, 86, 0, 0, 102, 103, 80,
	110, 0, 82, 77, 0, 0, 93, 0, 101, 91,
	0, 0, 97, 92, 0, 0, 89, 83, 0, 0,
	0, 98, 0, 0, 0, 0, 107, 108, 109, 0,
	73, 0, 878, 0, 100, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 90, 0, 95, 85, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 99, 0, 0, 0, 0, 0, 88, 0, 0,
	111, 112, 114, 113, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 96, 0, 104, 76,
	0, 0, 0, 94, 0, 87, 0, 0, 81, 86,
	0, 0, 102, 103, 80, 110, 415, 82, 77, 0,
	0, 93, 0, 101, 91, 0, 0, 97, 92, 0,
	0, 89, 83, 0, 0, 0, 98, 0, 0, 0,
	0, 107, 108, 109, 0, 253, 0, 0, 0, 100,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 90, 0,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 99, 0, 0, 0,
	0, 0, 88, 0, 0, 111, 112, 114, 113, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 96, 0, 104, 76, 0, 0, 0, 94, 0,
	87, 0, 0, 81, 86, 0, 0, 102, 103, 80,
	110, 0, 82, 77, 0, 0, 93, 0, 101, 91,
	0, 0, 97, 92, 0, 0, 89, 83, 0, 0,
	0, 98, 0, 0, 0, 0, 107, 108, 109, 0,
	73, 0, 0, 0, 100, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 90, 0, 95, 85, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 99, 0, 0, 0, 0, 0, 88, 0, 0,
	111, 112, 114, 113, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 96, 0, 104, 76,
	0, 0, 0, 94, 0, 87, 0, 0, 81, 86,
	0, 0, 102, 103, 80, 110, 0, 82, 77, 0,
	0, 93, 0, 101, 91, 0, 0, 97, 92, 0,
	0, 89, 83, 0, 0, 0, 98, 0, 0, 0,
	0, 107, 108, 109, 0, 402, 0, 0, 0, 100,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 90, 0,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 99, 0, 0, 0,
	0, 0, 88, 0, 0, 111, 112, 114, 113, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 96, 0, 104, 76, 0, 0, 0, 94, 0,
	87, 0, 0, 81, 86, 0, 0, 102, 103, 80,
	110, 0, 82, 77, 0, 0, 93, 0, 101, 91,
	0, 0, 97, 92, 0, 0, 89, 83, 0, 0,
	0, 98, 0, 0, 0, 0, 107, 108, 109, 0,
	253, 0, 0, 0, 100, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 90, 0, 95, 85, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 99, 0, 0, 0, 0, 0, 88, 0, 0,
	111, 112, 114, 113, 115, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 96, 0, 104, 76,
	0, 0, 0, 94, 0, 87, 0, 0, 81, 86,
	0, 0, 102, 103, 80, 110, 0, 82, 77, 0,
	0, 93, 0, 101, 91, 0, 0, 97, 92, 0,
	0, 89, 83, 0, 0, 0, 98, 0, 0, 0,
	0, 107, 108, 109, 0, 311, 0, 0, 0, 100,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 90, 0,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 99, 0, 0, 0,
	0, 0, 88, 0, 0, 111, 112, 114, 113, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 96, 0, 104, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 86, 0, 0, 102, 103, 80,
	110, 0, 0, 77, 0, 0, 93, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 89, 83, 0, 0,
	0, 98, 0, 0, 0, 0, 107, 108, 109, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 90, 0, 95, 85, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 99, 0, 0, 0, 0, 0, 88, 0, 0,
	111, 112, 114, 113, 115,
}
var yyPact = [...]int{

	139, -1000, -162, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 683, 732, -1000, -1000, -1000, -1000, -1000, 510,
	5497, 30, -10, 49, 48, 1957, 45, 7131, -1000, -1000,
	27, -1000, -149, -1000, -1000, -164, -1000, -1000, -1000, -1000,
	556, -1000, -1000, -1000, -1000, -1000, 674, 681, 557, 653,
	621, -1000, 30, 7131, 721, 2191, -130, 7256, 28, 41,
	28, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 44, -1000, 25, 417,
	25, 7131, 7131, -1000, 720, -61, 718, -8, -1000, -1000,
	-68, -73, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7131, -1000, -1000, -1000, -1000, -1000, -1000, 308, -1000,
	-1000, -1000, -1000, 481, 481, -1000, 7131, -1000, -1000, -1000,
	-1000, 337, 632, 4681, 4681, 683, -1000, 556, -1000, -1000,
	-1000, 616, -1000, -1000, 240, 6756, 635, 128, 7131, 474,
	3127, -1000, -1000, -1000, 198, 6254, -1000, -1000, -1000, 634,
	-1000, -1000, -1000, -1000, -1000, -1000, 680, 679, 464, -1000,
	1122, -1000, -1000, 7131, 213, 399, 7131, 7131, 7131, 647,
	547, 7131, -1000, -1000, -1000, 7131, 711, 7131, 7131, 7131,
	-1000, -1000, 716, 711, -1000, -1000, -1000, -1000, -1000, 4681,
	-1000, -1000, 132, -1000, -1000, -1000, 726, 157, 327, -1000,
	4681, 1335, 481, 481, -1000, -1000, 65, -1000, -1000, 4883,
	4883, 4883, 4883, 4883, 4883, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 481, 127,
	-1000, 4468, 481, 481, 481, 481, 481, 481, 4681, 481,
	481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
	481, 481, -1000, -1000, 475, -1000, 335, 674, 337, 621,
	6099, 490, -1000, -1000, 535, 7131, -1000, 7006, 3829, 709,
	3127, 474, 4681, 118, -1000, -1000, -1000, -1000, -131, 481,
	53, 5370, 121, -52, -1000, -1000, 484, -1000, 484, 484,
	484, 484, -31, -31, -31, -31, -1000, -1000, -1000, -1000,
	-1000, 518, -1000, 484, 484, 484, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 513, 513, 513, 509, 509, 637,
	644, 546, -1000, 125, 472, -1000, -1000, 7131, -1000, -1000,
	709, 7131, -1000, -1000, -1000, 674, -71, -1000, -1000, -1000,
	-1000, 462, 250, -1000, 7131, -1000, -1000, -1000, 597, 4681,
	4681, 282, 4681, 4681, 169, 4883, 265, 283, 4883, 4883,
	4883, 4883, 4883, 4883, 4883, 4883, 4883, 4883, 4883, 4883,
	4883, 4883, 4883, 289, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 388, -1000, 556, 377, 377, 135, 135, 135,
	135, 135, 5084, 1677, 3595, 337, 4468, 4042, 4042, 4681,
	4681, 4042, 658, 208, 250, 6881, -1000, 337, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4042, 4042, 4042, 4042, 4681,
	-1000, -1000, -1000, 632, -1000, 658, 706, -1000, 608, 606,
	4042, -1000, 541, 7006, 481, -1000, 5974, -1000, 514, -1000,
	197, -1000, 117, -1000, -1000, -1000, 683, 4681, -1000, 250,
	-1000, 386, 481, 481, 7256, -1000, 53, -1000, -1000, -1000,
	-1000, -1000, 178, 178, -25, -1000, -1000, -1000, -1000, -1000,
	511, 665, 163, 384, 138, -1000, -1000, -1000, 121, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 236, 68,
	-1000, 664, -1000, 663, 329, 725, -58, -1000, -1000, 297,
	-31, -31, -1000, -1000, 118, 629, 118, 118, 118, 325,
	-1000, -1000, -1000, -1000, 273, -1000, -1000, -1000, 270, -1000,
	-1000, 637, -1000, 24, -1000, 7131, -1000, 141, 185, 32,
	12, 11, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7131, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	321, -1000, 4681, -1000, -1000, 589, 169, 205, -1000, -1000,
	336, -1000, -1000, 250, 250, 693, -1000, -1000, -1000, -1000,
	265, 4883, 4883, 4883, 609, 693, 1065, 480, 759, 135,
	129, 129, 143, 143, 143, 143, 143, 115, 115, -1000,
	-1000, -1000, 337, -1000, -1000, -1000, 337, 4042, 471, -1000,
	-1000, 5243, 114, 481, 80, -1000, -1000, 337, 392, 392,
	137, 320, 392, 4042, 220, -1000, 4681, 337, -1000, 392,
	337, 392, 392, -1000, -1000, 7131, -1000, -1000, -1000, -1000,
	516, -1000, 639, 445, 451, -1000, -1000, 4255, 337, 460,
	77, 683, 7006, 4681, 3595, 674, 250, -1000, 7256, 7256,
	337, -1000, 319, -1000, 280, 178, -1000, 624, 6881, -1000,
	367, -1000, -1000, 361, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -76, -1000, -1000, 440, 118, 118,
	-1000, 188, -1000, -1000, -1000, 455, -1000, 470, 428, -1000,
	178, 178, 2425, -1000, 7131, -1000, -1000, -1000, 359, -32,
	510, 343, 7256, -1000, -1000, -1000, -1000, 250, -1000, -1000,
	-1000, -1000, -1000, -1000, 609, 693, 670, -1000, 4883, 4883,
	-1000, -1000, 392, 4042, -1000, -1000, 6631, -1000, -1000, 2893,
	4042, 3361, -1000, -1000, -1000, 228, 289, 228, -96, 482,
	200, -1000, 4681, 230, -1000, -1000, -1000, -1000, -1000, -1000,
	709, 6506, 662, -1000, 481, -1000, -1000, 558, 6881, 6881,
	674, -1000, 250, -1000, -1000, 337, 337, 2425, -1000, -1000,
	-1000, -1000, 280, -1000, 376, -1000, 484, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 284, 251, -1000, 247,
	365, 234, -1000, -1000, -1000, -1000, -1000, -1000, 620, -1000,
	-1000, -1000, -1000, 4883, 693, 693, -1000, -1000, -1000, -1000,
	76, 337, -1000, 337, 484, 484, -1000, 484, 509, -1000,
	484, -5, 484, -9, 337, 337, 481, -93, -1000, 250,
	4681, 703, 457, 588, -1000, -1000, -1000, 649, 5656, 5815,
	724, -1000, 481, -1000, 556, 62, -1000, -1000, 2425, 481,
	-1000, -1000, -103, 6881, -1000, -1000, 435, 421, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 340, 693, 2659, -1000, -1000,
	-1000, 66, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4883, 337, 266, 250, 686, 678, 6506, 6506, 6506, 6506,
	-1000, 575, 573, -1000, 565, 561, 604, 7131, -1000, 373,
	5656, 96, -1000, 6379, -1000, -1000, 7006, 451, 337, 6881,
	-1000, -132, 671, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	104, -1000, -1000, -1000, 4681, 4681, 588, 537, 506, -1000,
	-1000, -1000, -1000, 563, -1000, 562, -1000, -1000, -1000, -1000,
	-1000, 40, 38, 37, -1000, 449, -1000, -1000, 357, -1000,
	333, 668, 337, 56, -116, 250, 378, 4681, 4681, -1000,
	-1000, 481, 481, 481, -132, 2425, 566, -1000, -1000, 583,
	-101, -122, 250, 250, 6881, 6881, 6881, -1000, -1000, 153,
	-1000, 580, -1000, 355, -1000, 355, 355, 481, -112, -1000,
	6881, -1000, -1000, -1000, -118, -1000, -124, -1000,
}
var yyPgo = [...]int{

	0, 964, 963, 962, 961, 960, 959, 957, 12, 483,
	955, 954, 952, 951, 950, 949, 948, 947, 946, 945,
	944, 943, 941, 939, 937, 75, 935, 934, 933, 47,
	931, 67, 930, 929, 928, 33, 78, 30, 29, 235,
	927, 24, 22, 7, 925, 922, 5, 915, 1087, 908,
	62, 899, 894, 893, 11, 20, 892, 891, 890, 889,
	53, 815, 887, 886, 884, 881, 880, 879, 42, 1,
	16, 8, 18, 878, 4, 10, 874, 41, 870, 868,
	866, 865, 26, 852, 58, 851, 21, 55, 850, 35,
	14, 39, 65, 60, 849, 848, 847, 315, 846, 171,
	300, 844, 44, 841, 839, 25, 0, 76, 15, 40,
	838, 37, 904, 56, 3, 835, 831, 50, 6, 27,
	830, 19, 829, 827, 825, 824, 822, 821, 816, 49,
	814, 813, 812, 811, 808, 807, 804, 28, 43, 17,
	802, 45, 34, 46, 784, 783, 781, 57, 23, 780,
	779, 777, 762, 761, 48, 760, 59, 32, 759, 758,
	757, 54, 756, 9, 754, 753, 749, 52, 748, 747,
	51, 2, 746, 742, 741, 69, 342, 740, 152,
}
var yyR1 = [...]int{

	0, 173, 174, 174, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 120,
	120, 172, 172, 171, 16, 16, 16, 16, 16, 16,
	168, 168, 169, 169, 170, 170, 143, 143, 142, 142,
	141, 141, 140, 140, 144, 144, 144, 19, 157, 159,
	159, 160, 160, 161, 161, 161, 161, 139, 139, 133,
	134, 135, 136, 136, 158, 158, 158, 154, 111, 111,
	123, 123, 123, 165, 165, 166, 166, 167, 167, 167,
	167, 167, 167, 167, 126, 126, 124, 124, 124, 124,
	124, 124, 124, 125, 125, 125, 125, 125, 127, 127,
	127, 127, 127, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 153, 153, 129,
	129, 147, 147, 148, 148, 148, 145, 145, 146, 146,
	149, 149, 130, 130, 130, 130, 130, 131, 150, 137,
	137, 137, 138, 138, 151, 151, 152, 152, 132, 155,
	155, 162, 162, 162, 162, 162, 156, 156, 164, 164,
	163, 17, 17, 17, 17, 17, 17, 17, 17, 18,
	18, 18, 51, 51, 1, 20, 2, 3, 4, 4,
	5, 5, 5, 5, 6, 6, 6, 6, 122, 122,
	122, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 34, 34, 50, 50, 24, 22, 23, 23, 23,
	23, 177, 25, 26, 26, 27, 27, 27, 31, 31,
	31, 29, 29, 30, 30, 37, 37, 36, 36, 38,
	38, 38, 38, 110, 110, 110, 109, 109, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 52, 44, 44,
	44, 44, 116, 116, 115, 115, 115, 114, 114, 45,
	45, 45, 45, 46, 46, 46, 46, 47, 47, 49,
	49, 48, 48, 53, 53, 53, 53, 54, 54, 55,
	55, 39, 39, 39, 39, 39, 39, 39, 98, 98,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 35, 35, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 178, 178, 66, 66, 66, 66, 32,
	32, 32, 32, 32, 119, 119, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 78,
	78, 33, 33, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	89, 89, 70, 70, 72, 72, 71, 73, 90, 90,
	91, 92, 92, 93, 93, 95, 95, 95, 94, 94,
	94, 96, 96, 99, 99, 100, 100, 97, 97, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 102,
	102, 102, 103, 103, 104, 104, 104, 107, 107, 108,
	108, 112, 112, 113, 113, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 175, 176, 117,
	118, 118, 118,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 2, 9, 12, 8, 5, 7,
	0, 1, 1, 2, 4, 4, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 3,
	3, 4, 1, 1, 1, 3, 3, 3, 1, 1,
	3, 1, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 4, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	1, 2, 2, 2, 2, 2, 2, 3, 1, 0,
	3, 3, 0, 2, 2, 1, 2, 1, 2, 4,
	7, 2, 3, 2, 2, 3, 1, 1, 1, 3,
	2, 6, 7, 7, 7, 9, 7, 7, 7, 4,
	5, 4, 1, 3, 3, 3, 2, 2, 3, 4,
	2, 3, 2, 2, 4, 4, 3, 6, 1, 1,
	1, 3, 5, 6, 5, 5, 5, 3, 3, 6,
	5, 0, 3, 0, 2, 4, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}
var yyChk = [...]int{

	-1000, -173, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 216, 132,
	223, 226, 227, 230, 229, 234, 29, 131, 135, 136,
	-175, 7, 199, 56, -174, 239, -82, 14, -27, 5,
	-25, -177, -25, -25, -25, -25, -157, 56, 191, -104,
	121, 22, -107, 59, -106, 205, 138, 157, 68, 133,
	153, 147, 31, 171, 224, 210, 148, 19, 231, 170,
	207, 38, 42, 160, 17, 209, 135, 41, 175, 225,
	188, 162, 151, 152, 137, 211, 123, 180, 181, 182,
	154, 234, 235, 237, 236, 238, -97, 125, 121, 122,
	191, 121, 121, -122, 179, 35, 189, 114, 183, 184,
	186, 121, 59, -105, -106, 74, 26, 28, 173, 77,
	144, 109, 166, 15, 78, 155, 158, 161, 108, 200,
	51, 192, 193, 190, 191, 178, 149, 32, 9, 29,
	131, 25, 102, 116, 81, 82, 218, 134, 27, 132,
	71, 18, 54, 10, 12, 13, 126, 125, 93, 122,
	49, 7, 142, 143, 110, 30, 90, 45, 23, 47,
	91, 16, 194, 195, 34, 169, 165, 204, 168, 141,
	164, 104, 52, 39, 75, 69, 150, 72, 55, 136,
	73, 14, 50, 221, 128, 220, 146, 92, 117, 199,
	48, 6, 203, 33, 130, 140, 46, 167, 139, 163,
	80, 124, 70, 222, 5, 22, 176, 8, 53, 127,
	196, 197, 198, 37, 159, 156, 219, 208, 79, 11,
	177, 121, -112, 59, -106, -117, -117, 62, 209, -117,
	228, -117, -117, 235, 237, 236, 238, -117, -117, -117,
	-117, -8, -86, 16, 15, -11, -9, -175, 6, 24,
	25, -31, 43, 44, -26, -97, -48, -112, 10, -92,
	-120, -93, 232, 231, -108, -95, -107, -105, 161, 158,
	233, 189, 114, 35, 121, 179, 212, 217, -158, -154,
	-111, 59, -106, -100, 126, 122, -100, 121, -99, 126,
	59, -99, -48, -48, -117, 10, 179, 10, 121, 191,
	-117, -117, 185, 188, -48, -117, 62, -117, -71, -175,
	-71, -117, -48, -176, 58, -87, 18, 34, -39, -56,
	75, -61, 32, 27, -60, -57, -75, -73, -74, 109,
	98, 99, 106, 76, 110, -65, -63, -64, -66, 61,
	60, 62, 63, 64, 65, 69, 70, 71, -107, -112,
	-71, -175, 47, 48, 200, 201, 204, 202, 78, 37,
	190, 198, 197, 196, 194, 195, 192, 193, 126, 191,
	104, 199, 59, -106, -83, -84, -39, -82, -8, -25,
	39, -29, 25, 67, -49, 30, -48, 33, 111, -48,
	57, -92, 83, -94, -107, 61, 32, 33, 15, 15,
	58, 57, -123, -126, -128, -127, -124, -125, 155, 156,
	109, 159, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 133, 151, 152, 153, 154, 138, 139, 140,
	141, 142, 143, 144, 146, 147, 148, 149, 150, -112,
	75, 59, -48, -48, -51, -48, 27, 55, -112, -48,
	-50, 10, -48, -48, -48, -34, 10, -50, -117, -117,
	-117, -69, -39, -117, -102, 124, 26, 8, 93, 74,
	73, 90, 57, 17, -39, -58, 93, 75, 91, 92,
	77, 95, 94, 105, 98, 99, 100, 101, 102, 103,
	104, 96, 97, 108, 83, 84, 85, 86, 87, 88,
	89, -98, -175, -74, -175, 112, 113, -61, -61, -61,
	-61, -61, -61, -175, 111, -8, -175, -175, -175, -175,
	-175, -175, -175, -78, -39, -175, -178, -175, -178, -178,
	-178, -178, -178, -178, -178, -175, -175, -175, -175, 57,
	-85, 28, 29, -86, -176, -31, -62, -107, 62, 65,
	-30, 46, -59, 33, 37, -8, -175, -48, -90, -91,
	-75, -107, -112, -113, -112, -105, -55, 11, -93, -39,
	-138, 108, 214, 215, -175, -159, -160, -161, -133, -134,
	-135, -136, 68, 224, -143, 231, 225, 32, -154, -155,
	-162, 128, 22, -156, 19, 122, 23, -165, -166, -167,
	-149, -130, -150, -151, -152, -132, -131, 69, 75, 32,
	173, 128, 23, 22, 68, 55, -145, 176, -129, 56,
	-129, -129, -129, -129, -137, 158, -137, -137, -137, 56,
	-129, -129, -129, -147, 56, -147, -147, -148, 56, -148,
	-168, -169, -170, -143, 27, 55, -101, 117, 224, 200,
	119, 116, 120, 115, 173, 158, 68, 32, 14, 211,
	59, 57, -48, -117, -55, -48, -117, -117, -117, -86,
	187, -117, 57, -176, -48, 41, -39, -39, -67, 69,
	75, 70, 71, -39, -39, -61, -68, -71, -74, 66,
	93, 91, 92, 77, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -119,
	59, 61, 59, -60, -60, -107, -37, 25, -36, -38,
	100, -39, -112, -108, -113, -105, -176, -8, -36, -36,
	-39, -39, -36, -29, -76, -77, 79, -107, -176, -36,
	-37, -36, -36, -84, -87, -96, 18, 10, 37, 37,
	-36, -89, 55, -90, -70, -72, -71, -175, -8, -88,
	-107, -55, 57, 83, 111, -82, -39, 59, -175, -175,
	-111, -161, -142, 83, -142, -141, 161, 158, 56, 23,
	-156, 59, 59, -156, -167, 69, 61, 62, 63, 69,
	190, 23, 23, 61, 8, -146, 177, 62, -137, -137,
	-138, 33, -138, -138, -138, -153, 61, 62, 62, -170,
	108, -141, -48, -117, -102, -103, 122, 23, 83, 124,
	129, 129, 129, -48, -117, -117, 61, -39, -117, 42,
	69, 70, 71, -68, -61, -61, -61, -35, 134, 74,
	-176, -176, -36, 57, -110, -109, 26, -107, 61, 111,
	-175, 111, -176, -176, -176, 57, 127, 26, -176, -36,
	-79, -77, 81, -39, -176, -176, -176, -176, -176, -48,
	-40, 10, 31, -89, 57, -176, -176, -176, 57, 111,
	-82, -91, -39, -108, -86, -111, -111, -176, 61, -139,
	59, 61, -142, 33, -164, -163, -107, 59, 59, 190,
	58, -138, -138, 59, 109, 58, 57, 57, 58, 57,
	-142, -142, -118, -175, -108, -48, -117, 59, 158, -157,
	59, -154, -35, 74, -61, -61, -176, -38, -109, 100,
	-113, -37, -108, -121, 109, 155, 133, 153, 149, 170,
	160, 175, 151, 176, -119, -121, 205, -82, 82, -39,
	80, -55, -41, -42, -43, -44, -52, -74, -175, -48,
	23, -72, 37, -8, -175, -107, -107, -86, -176, -176,
	-118, -139, 58, 57, -129, 61, 62, 62, -140, 59,
	32, -144, 59, 109, 32, 33, -61, 111, -176, -176,
	-129, -129, -129, -148, -129, 143, -129, 143, -176, -176,
	-175, -33, 203, -39, -80, 12, 57, -45, -46, -47,
	45, 49, 51, 46, 47, 48, 52, -116, 26, -41,
	-175, -115, -114, 26, -112, 61, 8, -70, -8, 111,
	-118, -175, 208, -163, 58, 58, 59, 100, -137, 59,
	-61, -176, 61, -81, 13, 15, -42, -43, -42, -43,
	45, 45, 45, 50, 45, 50, 45, -46, -112, -176,
	-53, 53, 125, 54, -114, -90, -176, -107, -172, -171,
	212, 20, -32, 93, 208, -39, -69, 55, 55, 45,
	45, 122, 122, 122, 57, -176, 59, 21, -176, 206,
	52, 209, -39, -39, -175, -175, -175, -171, -118, 37,
	42, 207, 210, -54, -107, -54, -54, 93, 42, -176,
	57, -176, -176, -71, 208, -107, 209, 210,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 445, 0, 231, 231, 231, 231, 231, 0,
	514, 497, 0, 0, 0, 0, 0, 0, 689, 689,
	0, 689, 0, 689, 689, 0, 689, 689, 689, 689,
	0, 33, 34, 687, 1, 3, 453, 0, 0, 235,
	238, 233, 497, 0, 0, 0, 44, 0, 495, 0,
	495, 515, 516, 517, 518, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 0, 498, 493, 0,
	493, 0, 0, 689, 621, 566, 539, 541, 689, 689,
	0, 620, 208, 209, 210, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 540,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 567, 568, 569, 570, 571, 572,
	573, 574, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 0, 226, 521, 522, 196, 197, 689, 0, 200,
	689, 202, 203, 0, 0, 689, 0, 227, 228, 229,
	230, 27, 457, 0, 0, 445, 29, 0, 231, 236,
	237, 241, 239, 240, 232, 0, 0, 291, 0, 37,
	0, 481, 39, -2, 0, 0, 519, 520, -2, 536,
	487, 539, 541, 566, 620, 621, 0, 0, 0, 84,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 194, 195, 211, 0, 223, 0, 0, 0,
	217, 218, 221, 223, 689, 198, 689, 201, 689, 0,
	689, 206, 509, 28, 688, 23, 0, 0, 454, 301,
	0, 306, 308, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 369, 370, 371, 372, 431,
	432, 433, 434, 435, 436, 437, 310, 311, 428, 0,
	477, 0, 0, 0, 0, 0, 0, 0, 419, 0,
	393, 393, 393, 393, 393, 393, 393, 393, 0, 0,
	0, 0, -2, -2, 446, 447, 450, 453, 27, 238,
	0, 243, 242, 234, 0, 0, 290, 0, 0, 299,
	0, 38, 0, 162, 488, 489, 490, 486, 0, 0,
	-2, 0, 93, 146, 91, 92, 139, 105, 139, 139,
	139, 139, 159, 159, 159, 159, 131, 132, 133, 134,
	135, 0, 118, 139, 139, 139, 122, 106, 107, 108,
	109, 110, 111, 112, 141, 141, 141, 143, 143, -2,
	0, 0, 67, 0, 189, 192, 494, 0, 191, 689,
	299, 0, 689, 689, 689, 453, 0, 689, 225, 199,
	204, 0, 341, 205, 0, 510, 511, 458, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 328, 329, 330, 331, 332, 333,
	334, 307, 0, 321, 0, 0, 0, 363, 364, 365,
	366, 367, 0, 245, 0, 27, 0, 0, 0, 0,
	0, 0, 241, 0, 420, 0, 385, 0, 386, 387,
	388, 389, 390, 391, 392, 0, 245, 0, 0, 0,
	449, 451, 452, 457, 30, 241, 0, 438, 0, 0,
	0, 244, 470, 0, 0, -2, 0, 289, 299, 478,
	0, 428, 0, 292, 523, 524, 445, 0, 482, 483,
	484, 0, 0, 0, 0, 68, -2, 71, 73, 74,
	75, 76, 58, 58, 0, 82, 83, 57, 85, 86,
	0, 0, 0, 0, 658, 176, 177, 87, 94, 95,
	97, 98, 99, 100, 101, 102, 103, 150, 0, 0,
	158, 0, 165, 167, 0, 0, 148, 147, 104, 0,
	159, 159, 125, 126, 162, 0, 162, 162, 162, 0,
	119, 120, 121, 113, 0, 114, 115, 116, 0, 117,
	48, -2, 52, 0, 496, 0, 689, 509, 0, 506,
	0, 504, 0, 499, 500, 501, 502, 503, 505, 507,
	508, 0, 190, 212, 689, 224, 214, 215, 216, 689,
	0, 220, 0, 476, 689, 0, 302, 303, 305, 322,
	0, 324, 326, 455, 456, 312, 313, 337, 338, 339,
	0, 0, 0, 0, 335, 317, 0, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 362,
	404, 405, 0, 360, 361, 368, 0, 0, 246, 247,
	249, 253, 0, 429, 0, -2, 340, 27, 0, 0,
	0, 0, 0, 0, 426, 423, 0, 0, 394, 0,
	0, 0, 0, 448, 24, 0, 491, 492, 439, 440,
	258, 31, 0, 470, 460, 472, 474, 0, 27, 0,
	466, 445, 0, 0, 0, 453, 300, 163, 0, 0,
	0, 72, 0, 59, 0, 58, 60, 0, 0, 171,
	0, 173, 174, 0, 96, 151, 152, 153, 154, 155,
	156, 164, 166, 168, 0, 90, 149, 0, 162, 162,
	127, 0, 128, 129, 130, 0, 137, 0, 0, 53,
	58, 58, 690, 181, 0, 689, 512, 513, 0, 0,
	0, 0, 0, 193, 213, 219, 222, 342, 207, 459,
	323, 325, 327, 314, 335, 318, 0, 315, 0, 0,
	309, 373, 0, 0, 250, 254, 0, 256, 257, 0,
	245, 0, -2, 376, 377, 0, 0, 0, 0, 445,
	0, 424, 0, 0, 384, 395, 396, 397, 398, 25,
	299, 0, 0, 32, 0, 475, -2, 0, 0, 0,
	453, 479, 480, 429, 36, 0, 0, 690, 79, 80,
	77, 78, 0, 61, 0, 178, 139, 172, 175, 157,
	140, 123, 124, 160, 161, 136, 0, 0, 144, 0,
	0, 0, 49, 691, 692, 182, 183, 184, 0, 186,
	187, 188, 316, 0, 336, 319, 374, 248, 255, 251,
	0, 0, 430, 0, 139, 139, 409, 139, 143, 412,
	139, 414, 139, 417, 0, 0, 0, 421, 383, 427,
	0, 441, 259, 260, 262, 263, 264, 272, 0, 274,
	0, 473, 0, -2, 0, 468, 467, 35, 690, 0,
	47, 81, 169, 0, 180, 138, 0, 0, 54, 62,
	63, 55, 64, 65, 66, 0, 320, 0, 375, 378,
	406, 159, 410, 411, 413, 415, 416, 418, 380, 379,
	0, 0, 0, 425, 443, 0, 0, 0, 0, 0,
	279, 0, 0, 282, 0, 0, 0, 0, 273, 0,
	0, 293, 275, 0, 277, 278, 0, 463, 27, 0,
	45, 0, 0, 179, 142, 145, 185, 252, 407, 408,
	399, 382, 422, 26, 0, 0, 261, 268, 0, 271,
	280, 281, 283, 0, 285, 0, 287, 288, 265, 266,
	267, 0, 0, 0, 276, 471, -2, 469, 0, 41,
	0, 0, 0, 0, 0, 444, 442, 0, 0, 284,
	286, 0, 0, 0, 0, 690, 0, 170, 381, 0,
	0, 0, 269, 270, 0, 0, 0, 42, 46, 0,
	400, 0, 403, 0, 297, 0, 0, 0, 401, 294,
	0, 295, 296, 43, 0, 298, 0, 402,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 239,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:312
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:317
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:318
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:322
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:346
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:354
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:358
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:365
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:371
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:375
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:381
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:392
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:403
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:419
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:425
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:437
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:441
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:447
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:451
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:457
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:461
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:467
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:473
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:479
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:492
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:501
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:514
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:522
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:528
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:542
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:548
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:555
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:563
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:565
		{
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:568
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:570
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:578
		{
			yyVAL.str = "character set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:584
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:588
		{
			yyVAL.str = "default"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:594
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:598
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:602
		{
			yyVAL.str = "default"
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:608
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:619
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:646
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:650
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:656
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:660
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:666
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:673
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:687
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:696
		{
			// Normal str as a identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:701
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:708
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:714
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:720
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:730
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:741
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:745
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:751
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:764
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:768
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:783
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:803
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:854
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.optVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1038
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1146
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1165
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1171
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 170:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1234
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1239
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1252
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 187:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1267
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1275
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1280
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.statement = &Xa{}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &Explain{}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1374
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.str = ShowUnsupportedStr
			switch v := string(yyDollar[1].bytes); v {
			case ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1436
		{
			yyVAL.str = ""
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.tableName = TableName{}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1461
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.statement = &OtherRead{}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.statement = &OtherRead{}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1484
		{
			setAllowComments(yylex, true)
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.bytes2 = nil
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = UnionStr
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.str = UnionAllStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.str = UnionDistinctStr
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.str = ""
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1525
		{
			yyVAL.str = SQLCacheStr
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.str = ""
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.str = DistinctStr
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.str = StraightJoinHint
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.selectExprs = nil
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1562
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1572
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1580
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1609
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1629
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.empty = struct{}{}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.empty = struct{}{}
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.str = JoinStr
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.str = JoinStr
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.str = JoinStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.str = StraightJoinStr
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.str = LeftJoinStr
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.str = LeftJoinStr
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.str = RightJoinStr
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.str = RightJoinStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1735
		{
			yyVAL.str = NaturalJoinStr
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1739
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.indexHints = nil
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.expr = nil
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1829
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.str = IsNullStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.str = IsNotNullStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.str = IsTrueStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1909
		{
			yyVAL.str = IsNotTrueStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.str = IsFalseStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.str = IsNotFalseStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.str = EqualStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.str = LessThanStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.str = GreaterThanStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.str = LessEqualStr
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.str = GreaterEqualStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.str = NotEqualStr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1982
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1992
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2076
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2084
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2106
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 375:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2142
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 378:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 379:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 380:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 381:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 382:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2242
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.str = ""
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.str = BooleanModeStr
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 402:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.str = QueryExpansionStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.expr = nil
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.str = string("")
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.expr = nil
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = &NullVal{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2423
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.exprs = nil
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.expr = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2459
		{
			yyVAL.orderBy = nil
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.str = AscScr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.str = AscScr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.str = DescScr
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.limit = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.str = ForUpdateStr
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.str = ShareModeStr
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2543
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2556
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2563
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2567
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2575
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2580
		{
			yyVAL.updateExprs = nil
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2584
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2616
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2663
		{
			yyVAL.bytes = []byte("charset")
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.expr = &Default{}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.byt = 0
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.byt = 1
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2693
		{
			yyVAL.byt = 0
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.byt = 1
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2700
		{
			yyVAL.str = IgnoreStr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2706
		{
			yyVAL.empty = struct{}{}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.empty = struct{}{}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2710
		{
			yyVAL.empty = struct{}{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2714
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2716
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2720
		{
			yyVAL.empty = struct{}{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.empty = struct{}{}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.empty = struct{}{}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2727
		{
			yyVAL.empty = struct{}{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2729
		{
			yyVAL.empty = struct{}{}
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2733
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2735
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2738
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2746
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2962
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2971
		{
			decNesting(yylex)
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2976
		{
			forceEOF(yylex)
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2981
		{
			forceEOF(yylex)
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2985
		{
			forceEOF(yylex)
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2989
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
