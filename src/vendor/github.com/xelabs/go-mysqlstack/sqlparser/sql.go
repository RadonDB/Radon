// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const WARNINGS = 57505
const VARIABLES = 57506
const EVENTS = 57507
const BINLOG = 57508
const GTID = 57509
const STATUS = 57510
const COLUMNS = 57511
const FIELDS = 57512
const CURRENT_TIMESTAMP = 57513
const DATABASE = 57514
const CURRENT_DATE = 57515
const CURRENT_TIME = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const UTC_DATE = 57519
const UTC_TIME = 57520
const UTC_TIMESTAMP = 57521
const REPLACE = 57522
const CONVERT = 57523
const CAST = 57524
const GROUP_CONCAT = 57525
const SEPARATOR = 57526
const MATCH = 57527
const AGAINST = 57528
const BOOLEAN = 57529
const LANGUAGE = 57530
const WITH = 57531
const QUERY = 57532
const EXPANSION = 57533
const UNUSED = 57534
const PARTITION = 57535
const PARTITIONS = 57536
const HASH = 57537
const LIST = 57538
const XA = 57539
const DISTRIBUTED = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556
const RADON = 57557
const ATTACH = 57558
const ATTACHLIST = 57559
const DETACH = 57560
const RESHARD = 57561
const CLEANUP = 57562

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:3667

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 180,
	83, 675,
	-2, 40,
	-1, 185,
	83, 552,
	-2, 500,
	-1, 413,
	111, 536,
	-2, 532,
	-1, 414,
	111, 537,
	-2, 533,
	-1, 441,
	158, 56,
	161, 56,
	-2, 69,
	-1, 480,
	1, 50,
	238, 50,
	-2, 56,
	-1, 596,
	5, 27,
	-2, 476,
	-1, 619,
	158, 56,
	161, 56,
	-2, 70,
	-1, 686,
	1, 51,
	238, 51,
	-2, 56,
	-1, 771,
	111, 539,
	-2, 535,
	-1, 901,
	5, 28,
	-2, 355,
	-1, 925,
	5, 28,
	-2, 477,
	-1, 1013,
	5, 27,
	-2, 479,
	-1, 1116,
	5, 28,
	-2, 480,
}

const yyPrivate = 57344

const yyLast = 6868

var yyAct = [...]int{

	414, 962, 501, 1153, 1119, 599, 1058, 1072, 391, 1004,
	945, 367, 389, 1003, 800, 938, 964, 983, 801, 755,
	184, 770, 1069, 762, 66, 886, 600, 781, 310, 818,
	894, 74, 613, 797, 159, 732, 712, 765, 140, 682,
	628, 556, 3, 72, 56, 504, 369, 821, 311, 609,
	687, 644, 638, 356, 178, 620, 422, 678, 168, 416,
	494, 365, 55, 146, 140, 1120, 74, 669, 313, 149,
	151, 150, 152, 153, 632, 307, 615, 616, 183, 1167,
	308, 1152, 181, 143, 1166, 1141, 1164, 1082, 1151, 996,
	1052, 949, 158, 764, 337, 709, 330, 325, 117, 118,
	1140, 326, 362, 332, 333, 392, 50, 833, 834, 835,
	626, 176, 843, 662, 968, 836, 823, 703, 1089, 822,
	670, 140, 140, 869, 1047, 1045, 868, 867, 1111, 1113,
	320, 864, 857, 567, 506, 702, 315, 506, 140, 116,
	1123, 523, 522, 532, 533, 525, 526, 527, 528, 529,
	530, 531, 524, 140, 140, 534, 50, 866, 347, 349,
	641, 1133, 705, 95, 164, 88, 119, 1132, 641, 327,
	60, 701, 354, 140, 1131, 316, 140, 82, 74, 318,
	1079, 137, 823, 74, 92, 822, 121, 98, 93, 136,
	183, 120, 904, 663, 181, 435, 62, 63, 64, 65,
	1112, 1037, 319, 767, 828, 73, 419, 418, 511, 510,
	546, 547, 928, 135, 78, 631, 900, 670, 698, 696,
	692, 898, 695, 697, 810, 512, 555, 429, 144, 614,
	863, 534, 505, 1034, 837, 505, 953, 1157, 512, 819,
	523, 522, 532, 533, 525, 526, 527, 528, 529, 530,
	531, 524, 1139, 1124, 534, 348, 348, 509, 739, 640,
	1032, 700, 905, 524, 627, 630, 534, 640, 123, 107,
	50, 629, 737, 738, 736, 130, 699, 714, 865, 79,
	510, 97, 809, 105, 76, 433, 954, 511, 510, 432,
	998, 782, 481, 81, 87, 424, 512, 103, 104, 80,
	108, 694, 832, 77, 512, 782, 94, 911, 102, 1027,
	1033, 1026, 704, 314, 53, 140, 90, 83, 140, 140,
	140, 99, 322, 140, 735, 693, 943, 140, 140, 855,
	854, 101, 124, 86, 134, 132, 420, 122, 115, 129,
	525, 526, 527, 528, 529, 530, 531, 524, 1092, 75,
	534, 91, 844, 96, 85, 106, 939, 713, 940, 511,
	510, 756, 984, 757, 359, 417, 1000, 906, 84, 100,
	125, 133, 127, 128, 131, 89, 512, 345, 109, 110,
	112, 111, 113, 114, 317, 1025, 986, 522, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 497, 937,
	534, 172, 988, 873, 992, 872, 987, 853, 985, 840,
	1136, 544, 1030, 990, 511, 510, 527, 528, 529, 530,
	531, 524, 74, 989, 534, 1160, 355, 140, 991, 993,
	140, 512, 74, 1086, 588, 355, 725, 727, 728, 1029,
	601, 602, 726, 313, 183, 879, 880, 881, 181, 970,
	606, 604, 967, 584, 523, 522, 532, 533, 525, 526,
	527, 528, 529, 530, 531, 524, 948, 596, 534, 543,
	545, 633, 947, 548, 549, 550, 551, 552, 553, 586,
	1134, 355, 582, 583, 1056, 355, 611, 1023, 1022, 140,
	892, 355, 959, 958, 887, 554, 140, 140, 557, 558,
	559, 560, 561, 562, 563, 140, 566, 568, 568, 568,
	568, 568, 568, 568, 568, 576, 577, 578, 579, 684,
	829, 688, 671, 672, 673, 708, 733, 511, 510, 956,
	955, 597, 927, 355, 680, 681, 569, 570, 571, 572,
	573, 574, 575, 813, 512, 1085, 617, 758, 718, 355,
	57, 482, 502, 321, 74, 442, 441, 1084, 950, 798,
	973, 808, 718, 808, 734, 515, 761, 74, 183, 923,
	1056, 957, 769, 892, 706, 431, 771, 580, 53, 783,
	523, 522, 532, 533, 525, 526, 527, 528, 529, 530,
	531, 524, 585, 892, 534, 920, 502, 664, 74, 773,
	799, 786, 610, 565, 802, 22, 601, 602, 759, 760,
	806, 683, 381, 380, 382, 383, 384, 385, 313, 731,
	779, 386, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 612, 790, 804,
	789, 1127, 892, 665, 666, 667, 668, 24, 808, 807,
	24, 50, 774, 775, 811, 67, 778, 820, 675, 676,
	677, 824, 825, 557, 163, 679, 816, 674, 798, 24,
	785, 690, 787, 788, 719, 817, 488, 594, 1012, 658,
	657, 595, 1104, 514, 592, 796, 721, 1105, 1130, 654,
	827, 140, 830, 165, 1102, 831, 1129, 53, 1101, 1103,
	53, 803, 847, 50, 849, 850, 851, 140, 357, 1100,
	169, 170, 660, 1158, 722, 723, 1150, 729, 730, 53,
	878, 814, 815, 513, 358, 659, 652, 688, 1106, 772,
	1064, 1065, 653, 845, 846, 1149, 858, 856, 861, 511,
	510, 784, 795, 53, 794, 733, 423, 1035, 1060, 1063,
	1064, 1065, 1061, 875, 1062, 1066, 512, 942, 1128, 848,
	421, 502, 438, 632, 776, 777, 428, 921, 74, 689,
	487, 1068, 882, 888, 423, 1060, 1063, 1064, 1065, 1061,
	896, 1062, 1066, 734, 417, 656, 166, 167, 1010, 839,
	838, 826, 140, 523, 522, 532, 533, 525, 526, 527,
	528, 529, 530, 531, 524, 1137, 1121, 534, 910, 793,
	160, 1095, 440, 439, 812, 313, 313, 792, 161, 57,
	601, 602, 1094, 183, 1055, 610, 74, 932, 495, 496,
	655, 771, 491, 922, 175, 930, 1076, 841, 946, 508,
	883, 884, 885, 59, 61, 54, 933, 1, 1118, 686,
	685, 941, 929, 643, 642, 944, 635, 891, 619, 618,
	74, 309, 140, 934, 935, 634, 852, 649, 648, 647,
	313, 645, 183, 908, 842, 899, 661, 1031, 951, 952,
	1028, 625, 624, 623, 622, 621, 650, 960, 961, 651,
	646, 445, 969, 446, 444, 448, 74, 447, 971, 443,
	177, 74, 1067, 1071, 893, 69, 862, 691, 896, 972,
	542, 183, 791, 183, 182, 769, 434, 982, 874, 771,
	980, 140, 876, 981, 995, 994, 978, 805, 74, 74,
	977, 889, 802, 581, 415, 890, 1093, 74, 1020, 1054,
	1015, 1016, 1011, 1002, 909, 564, 901, 902, 903, 183,
	780, 907, 368, 997, 724, 379, 913, 1021, 914, 915,
	916, 917, 376, 378, 1017, 963, 377, 1007, 1013, 1001,
	587, 593, 516, 366, 360, 1110, 924, 925, 926, 1006,
	485, 331, 126, 425, 1059, 1057, 912, 1005, 919, 936,
	974, 975, 523, 522, 532, 533, 525, 526, 527, 528,
	529, 530, 531, 524, 490, 1051, 534, 502, 1122, 140,
	140, 591, 25, 931, 58, 171, 14, 21, 15, 74,
	1080, 802, 13, 12, 74, 29, 1008, 1077, 1043, 803,
	10, 183, 1014, 9, 1083, 8, 946, 7, 74, 6,
	5, 4, 963, 162, 23, 2, 352, 20, 19, 390,
	183, 18, 17, 16, 982, 1007, 1078, 140, 140, 140,
	140, 11, 0, 0, 976, 0, 0, 1097, 140, 1099,
	1096, 140, 1098, 1107, 140, 0, 1036, 0, 0, 0,
	74, 1114, 1115, 0, 0, 0, 0, 138, 601, 602,
	0, 1009, 1117, 0, 0, 0, 0, 0, 1126, 0,
	0, 0, 1050, 1007, 1007, 1007, 1007, 1018, 1019, 1088,
	0, 0, 773, 174, 1070, 999, 0, 1007, 803, 0,
	50, 0, 0, 0, 963, 1081, 532, 533, 525, 526,
	527, 528, 529, 530, 531, 524, 74, 1148, 534, 1147,
	1024, 0, 0, 0, 0, 74, 74, 74, 183, 1155,
	1156, 0, 0, 1090, 1038, 173, 1039, 1154, 1154, 1154,
	0, 74, 1008, 1008, 1008, 1008, 1163, 1048, 1049, 0,
	174, 174, 0, 1165, 0, 0, 1070, 0, 1040, 1041,
	0, 1042, 0, 0, 1044, 0, 1046, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 174, 1053, 0, 0, 0, 0, 0,
	0, 0, 323, 324, 0, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 1091, 174, 141, 0, 0, 343,
	0, 0, 0, 0, 0, 0, 0, 1144, 1145, 1146,
	0, 963, 1109, 0, 351, 353, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 348, 427, 0, 142, 430, 145, 0,
	147, 148, 0, 154, 155, 156, 157, 24, 51, 26,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1135, 0, 0, 0, 1138, 0, 0, 1125, 502,
	46, 0, 0, 0, 28, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 1159, 53, 1161, 1162,
	0, 1142, 1143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 328, 329, 0, 334, 335, 336, 0, 338, 339,
	340, 341, 342, 0, 480, 0, 0, 174, 174, 174,
	344, 0, 489, 346, 0, 0, 174, 174, 350, 0,
	0, 0, 0, 0, 0, 30, 31, 32, 0, 34,
	0, 451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 35, 47, 39, 0, 0, 48, 49, 33, 483,
	484, 486, 0, 0, 0, 463, 0, 0, 492, 493,
	468, 469, 470, 471, 472, 473, 474, 0, 475, 476,
	477, 478, 479, 464, 465, 466, 467, 449, 450, 0,
	0, 452, 0, 0, 453, 454, 455, 456, 457, 458,
	459, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 603, 605,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 41, 42, 0, 44, 43,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 95, 0, 88, 174, 174, 0, 0, 0,
	0, 895, 0, 0, 174, 0, 82, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 98, 93, 0, 0,
	498, 0, 499, 0, 500, 0, 503, 0, 0, 507,
	707, 0, 0, 0, 73, 0, 897, 715, 716, 0,
	0, 0, 0, 78, 0, 0, 720, 0, 511, 510,
	0, 0, 0, 0, 768, 605, 0, 0, 768, 768,
	0, 0, 768, 0, 0, 512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 768, 768, 768, 768,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 768, 0, 0, 603, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 0, 0, 0, 0, 0, 0, 710,
	711, 0, 0, 0, 717, 0, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 174, 109, 110, 112,
	111, 113, 114, 0, 0, 0, 0, 518, 0, 521,
	0, 0, 0, 0, 0, 535, 536, 537, 538, 539,
	540, 541, 859, 519, 520, 517, 523, 522, 532, 533,
	525, 526, 527, 528, 529, 530, 531, 524, 870, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 768, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 768,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 88, 0, 0, 0, 0, 603, 763,
	605, 364, 0, 0, 0, 82, 363, 0, 0, 0,
	0, 400, 92, 0, 0, 98, 93, 0, 0, 0,
	0, 393, 394, 918, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 413, 381, 380, 382, 383, 384, 385,
	0, 0, 78, 386, 387, 388, 0, 0, 0, 361,
	374, 174, 399, 0, 0, 0, 0, 0, 860, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 766, 871, 0, 0, 411, 0,
	373, 0, 768, 370, 375, 0, 0, 877, 605, 768,
	0, 0, 0, 965, 0, 0, 0, 107, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	174, 105, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	0, 77, 0, 0, 94, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 86, 401, 410, 407, 408, 405, 406, 404, 403,
	402, 412, 395, 396, 398, 0, 397, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 174, 1074,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 174, 174, 174, 174,
	0, 0, 0, 0, 0, 0, 0, 1108, 0, 0,
	174, 0, 0, 1074, 0, 0, 603, 290, 275, 235,
	293, 211, 226, 305, 228, 229, 265, 196, 245, 95,
	224, 88, 0, 0, 291, 242, 0, 214, 189, 221,
	190, 212, 239, 82, 210, 277, 248, 227, 0, 299,
	92, 257, 0, 98, 93, 0, 0, 241, 280, 243,
	274, 234, 266, 203, 256, 294, 225, 262, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 259, 288, 223, 261, 264, 188, 258, 0, 192,
	197, 304, 286, 217, 218, 0, 0, 0, 0, 0,
	0, 0, 240, 244, 271, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 255, 0, 0, 0,
	199, 194, 238, 0, 0, 0, 202, 0, 216, 272,
	0, 0, 0, 281, 233, 107, 287, 231, 230, 295,
	268, 0, 278, 213, 222, 79, 220, 97, 263, 105,
	76, 284, 279, 253, 236, 237, 193, 0, 270, 81,
	87, 209, 260, 103, 104, 80, 108, 198, 301, 77,
	186, 300, 94, 185, 102, 285, 254, 250, 195, 283,
	252, 249, 90, 83, 0, 191, 0, 99, 292, 306,
	208, 282, 0, 0, 0, 0, 0, 101, 200, 86,
	206, 207, 204, 205, 246, 247, 296, 297, 298, 273,
	201, 0, 0, 276, 251, 75, 0, 91, 303, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 219, 302,
	269, 267, 289, 0, 84, 100, 0, 0, 0, 0,
	0, 180, 179, 187, 109, 110, 112, 111, 113, 114,
	290, 275, 235, 293, 211, 226, 305, 228, 229, 265,
	196, 245, 95, 224, 88, 0, 0, 291, 242, 0,
	214, 189, 221, 190, 212, 239, 82, 210, 277, 248,
	227, 0, 299, 92, 257, 0, 98, 93, 0, 0,
	241, 280, 243, 274, 234, 266, 203, 256, 294, 225,
	262, 53, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 259, 288, 223, 261, 264, 188,
	258, 0, 192, 197, 304, 286, 217, 218, 0, 0,
	0, 0, 0, 0, 0, 240, 244, 271, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 255,
	0, 0, 0, 199, 194, 238, 0, 0, 0, 202,
	0, 216, 272, 0, 0, 0, 281, 233, 107, 287,
	231, 230, 295, 268, 0, 278, 213, 222, 79, 220,
	97, 263, 105, 76, 284, 279, 253, 236, 237, 193,
	0, 270, 81, 87, 209, 260, 103, 104, 80, 108,
	198, 301, 77, 607, 300, 94, 608, 102, 285, 254,
	250, 195, 283, 252, 249, 90, 83, 0, 191, 0,
	99, 292, 306, 208, 282, 0, 0, 0, 0, 0,
	101, 200, 86, 206, 207, 204, 205, 246, 247, 296,
	297, 298, 273, 201, 0, 0, 276, 251, 75, 0,
	91, 303, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 219, 302, 269, 267, 289, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 114, 290, 275, 235, 293, 211, 226, 305,
	228, 229, 265, 196, 245, 95, 224, 88, 0, 0,
	291, 242, 0, 214, 189, 221, 190, 212, 239, 82,
	210, 277, 248, 227, 0, 299, 92, 257, 0, 98,
	93, 0, 0, 241, 280, 243, 274, 234, 266, 203,
	256, 294, 225, 262, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 259, 288, 223,
	261, 264, 188, 258, 0, 192, 197, 304, 286, 217,
	218, 0, 0, 0, 0, 0, 0, 0, 240, 244,
	271, 232, 0, 0, 0, 0, 0, 0, 1087, 0,
	215, 0, 255, 0, 0, 0, 199, 194, 238, 0,
	0, 0, 202, 0, 216, 272, 0, 0, 0, 281,
	233, 107, 287, 231, 230, 295, 268, 0, 278, 213,
	222, 79, 220, 97, 263, 105, 76, 284, 279, 253,
	236, 237, 193, 0, 270, 81, 87, 209, 260, 103,
	104, 80, 108, 198, 301, 77, 607, 300, 94, 608,
	102, 285, 254, 250, 195, 283, 252, 249, 90, 83,
	0, 191, 0, 99, 292, 306, 208, 282, 0, 0,
	0, 0, 0, 101, 200, 86, 206, 207, 204, 205,
	246, 247, 296, 297, 298, 273, 201, 0, 0, 276,
	251, 75, 0, 91, 303, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 219, 302, 269, 267, 289, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 0,
	109, 110, 112, 111, 113, 114, 290, 275, 235, 293,
	211, 226, 305, 228, 229, 265, 196, 245, 95, 224,
	88, 0, 0, 291, 242, 0, 214, 189, 221, 190,
	212, 239, 82, 210, 277, 248, 227, 0, 299, 92,
	257, 0, 98, 93, 0, 0, 241, 280, 243, 274,
	234, 266, 203, 256, 294, 225, 262, 0, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	259, 288, 223, 261, 264, 188, 258, 0, 192, 197,
	304, 286, 217, 218, 0, 0, 0, 0, 0, 0,
	0, 240, 244, 271, 232, 0, 0, 0, 0, 0,
	0, 979, 0, 215, 0, 255, 0, 0, 0, 199,
	194, 238, 0, 0, 0, 202, 0, 216, 272, 0,
	0, 0, 281, 233, 107, 287, 231, 230, 295, 268,
	0, 278, 213, 222, 79, 220, 97, 263, 105, 76,
	284, 279, 253, 236, 237, 193, 0, 270, 81, 87,
	209, 260, 103, 104, 80, 108, 198, 301, 77, 607,
	300, 94, 608, 102, 285, 254, 250, 195, 283, 252,
	249, 90, 83, 0, 191, 0, 99, 292, 306, 208,
	282, 0, 0, 0, 0, 0, 101, 200, 86, 206,
	207, 204, 205, 246, 247, 296, 297, 298, 273, 201,
	0, 0, 276, 251, 75, 0, 91, 303, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 219, 302, 269,
	267, 289, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 114, 290,
	275, 235, 293, 211, 226, 305, 228, 229, 265, 196,
	245, 95, 224, 88, 0, 0, 291, 242, 0, 214,
	189, 221, 190, 212, 239, 82, 210, 277, 248, 227,
	0, 299, 92, 257, 0, 98, 93, 0, 0, 241,
	280, 243, 274, 234, 266, 203, 256, 294, 225, 262,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 259, 288, 223, 261, 264, 188, 258,
	0, 192, 197, 304, 286, 217, 218, 0, 0, 0,
	0, 0, 0, 0, 240, 244, 271, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 255, 0,
	0, 0, 199, 194, 238, 0, 0, 0, 202, 0,
	216, 272, 0, 0, 0, 281, 233, 107, 287, 231,
	230, 295, 268, 0, 278, 213, 222, 79, 220, 97,
	263, 105, 76, 284, 279, 253, 236, 237, 193, 0,
	270, 81, 87, 209, 260, 103, 104, 80, 108, 198,
	301, 77, 186, 300, 94, 185, 102, 285, 254, 250,
	195, 283, 252, 249, 90, 83, 0, 191, 0, 99,
	292, 306, 208, 282, 0, 0, 0, 0, 0, 101,
	200, 86, 206, 207, 204, 205, 246, 247, 296, 297,
	298, 273, 201, 0, 0, 276, 251, 75, 0, 91,
	303, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	219, 302, 269, 267, 289, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 187, 109, 110, 112, 111,
	113, 114, 290, 275, 235, 293, 211, 226, 305, 228,
	229, 265, 196, 245, 95, 224, 88, 0, 0, 291,
	242, 0, 214, 189, 221, 190, 212, 239, 82, 210,
	277, 248, 227, 0, 299, 92, 257, 0, 98, 93,
	0, 0, 241, 280, 243, 274, 234, 266, 203, 256,
	294, 225, 262, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 259, 288, 223, 261,
	264, 188, 258, 0, 192, 197, 304, 286, 217, 218,
	0, 0, 0, 0, 0, 0, 0, 240, 244, 271,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	0, 255, 0, 0, 0, 199, 194, 238, 0, 0,
	0, 202, 0, 216, 272, 0, 0, 0, 281, 233,
	107, 287, 231, 230, 295, 268, 0, 278, 213, 222,
	79, 220, 97, 263, 105, 76, 284, 279, 253, 236,
	237, 193, 0, 270, 81, 87, 209, 260, 103, 104,
	80, 108, 198, 301, 77, 607, 300, 94, 608, 102,
	285, 254, 250, 195, 283, 252, 249, 90, 83, 0,
	191, 0, 99, 292, 306, 208, 282, 0, 0, 0,
	0, 0, 101, 200, 86, 206, 207, 204, 205, 246,
	247, 296, 297, 298, 273, 201, 0, 0, 276, 251,
	75, 0, 91, 303, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 219, 302, 269, 267, 289, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 114, 290, 275, 235, 293, 211,
	226, 305, 228, 229, 265, 196, 245, 95, 224, 88,
	0, 0, 291, 242, 0, 214, 189, 221, 190, 212,
	239, 82, 210, 277, 248, 227, 0, 299, 92, 257,
	0, 98, 93, 0, 0, 241, 280, 243, 274, 234,
	266, 203, 256, 294, 225, 262, 0, 0, 0, 413,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 259,
	288, 223, 261, 264, 188, 258, 0, 192, 197, 304,
	286, 217, 218, 0, 0, 0, 0, 0, 0, 0,
	240, 244, 271, 232, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 0, 255, 0, 0, 0, 199, 194,
	238, 0, 0, 0, 202, 0, 216, 272, 0, 0,
	0, 281, 233, 107, 287, 231, 230, 295, 268, 0,
	278, 213, 222, 79, 220, 97, 263, 105, 76, 284,
	279, 253, 236, 237, 193, 0, 270, 81, 87, 209,
	260, 103, 104, 80, 108, 198, 301, 77, 607, 300,
	94, 608, 102, 285, 254, 250, 195, 283, 252, 249,
	90, 83, 0, 191, 0, 99, 292, 306, 208, 282,
	0, 0, 0, 0, 0, 101, 200, 86, 206, 207,
	204, 205, 246, 247, 296, 297, 298, 273, 201, 0,
	0, 276, 251, 75, 0, 91, 303, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 219, 302, 269, 267,
	289, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 114, 290, 275,
	235, 293, 211, 226, 305, 228, 229, 265, 196, 245,
	95, 224, 88, 0, 0, 291, 242, 0, 214, 189,
	221, 190, 212, 239, 82, 210, 277, 248, 227, 0,
	299, 92, 257, 0, 98, 93, 0, 0, 241, 280,
	243, 274, 234, 266, 203, 256, 294, 225, 262, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 259, 288, 223, 261, 264, 188, 258, 0,
	192, 197, 304, 286, 217, 218, 0, 0, 0, 0,
	0, 0, 0, 240, 244, 271, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 255, 0, 0,
	0, 199, 194, 238, 0, 0, 0, 202, 0, 216,
	272, 0, 0, 0, 281, 233, 107, 287, 231, 230,
	295, 268, 0, 278, 213, 222, 79, 220, 97, 263,
	105, 76, 284, 279, 253, 236, 237, 193, 0, 270,
	81, 87, 209, 260, 103, 104, 80, 108, 198, 301,
	77, 607, 300, 94, 608, 102, 285, 254, 250, 195,
	283, 252, 249, 90, 83, 0, 191, 0, 99, 292,
	306, 208, 282, 0, 0, 0, 0, 0, 101, 200,
	86, 206, 207, 204, 205, 246, 247, 296, 297, 298,
	273, 201, 0, 0, 276, 251, 75, 0, 91, 303,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 219,
	302, 269, 267, 289, 0, 84, 100, 0, 0, 0,
	0, 95, 89, 88, 0, 109, 110, 112, 111, 113,
	114, 364, 0, 0, 0, 82, 363, 0, 0, 0,
	0, 400, 92, 0, 0, 98, 93, 0, 0, 0,
	0, 393, 394, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 413, 381, 380, 382, 383, 384, 385,
	0, 0, 78, 386, 387, 388, 0, 0, 0, 361,
	374, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 766, 0, 0, 0, 411, 0,
	373, 0, 0, 370, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	0, 77, 0, 0, 94, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 86, 401, 410, 407, 408, 405, 406, 404, 403,
	402, 412, 395, 396, 398, 0, 397, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 95, 89, 88, 0, 109, 110, 112, 111,
	113, 114, 364, 0, 0, 0, 82, 363, 0, 0,
	0, 0, 400, 92, 0, 0, 98, 93, 0, 0,
	0, 0, 393, 394, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 355, 413, 381, 380, 382, 383, 384,
	385, 0, 0, 78, 386, 387, 388, 0, 0, 0,
	361, 374, 0, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 371, 372, 0, 0, 0, 0, 411,
	0, 373, 0, 0, 370, 375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 409, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 401, 410, 407, 408, 405, 406, 404,
	403, 402, 412, 395, 396, 398, 0, 397, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 24, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 95, 89, 88, 0, 109, 110, 112,
	111, 113, 114, 364, 0, 0, 0, 82, 363, 0,
	0, 0, 0, 400, 92, 0, 0, 98, 93, 0,
	0, 0, 0, 393, 394, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 413, 381, 380, 382, 383,
	384, 385, 0, 0, 78, 386, 387, 388, 0, 0,
	0, 361, 374, 0, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 0, 0, 0, 0,
	411, 0, 373, 0, 0, 370, 375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 409, 0, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 401, 410, 407, 408, 405, 406,
	404, 403, 402, 412, 395, 396, 398, 0, 397, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 95, 89, 88, 0, 109, 110,
	112, 111, 113, 114, 364, 0, 0, 0, 82, 363,
	0, 0, 0, 0, 400, 92, 0, 0, 98, 93,
	0, 0, 0, 0, 393, 394, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 413, 381, 380, 382,
	383, 384, 385, 0, 0, 78, 386, 387, 388, 0,
	0, 0, 361, 374, 0, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 371, 372, 0, 0, 0,
	0, 411, 0, 373, 0, 0, 370, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 409, 0, 0, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 87, 0, 0, 103, 104,
	80, 108, 0, 0, 77, 0, 0, 94, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 90, 83, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 86, 401, 410, 407, 408, 405,
	406, 404, 403, 402, 412, 395, 396, 398, 0, 397,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 95, 0, 88, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 114, 82, 0, 0, 0, 0,
	0, 400, 92, 0, 0, 98, 93, 0, 0, 0,
	0, 393, 394, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 413, 381, 380, 382, 383, 384, 385,
	0, 0, 78, 386, 387, 388, 0, 0, 0, 0,
	374, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 0, 0, 0, 0, 411, 0,
	373, 0, 0, 370, 375, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	409, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	0, 77, 0, 95, 94, 639, 102, 0, 637, 641,
	0, 0, 0, 0, 90, 83, 0, 82, 0, 99,
	0, 0, 0, 0, 92, 0, 0, 98, 93, 101,
	0, 86, 401, 410, 407, 408, 405, 406, 404, 403,
	402, 412, 395, 396, 398, 312, 397, 75, 0, 91,
	0, 96, 85, 106, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 640, 107,
	0, 0, 0, 0, 636, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	95, 0, 88, 81, 87, 71, 0, 103, 104, 80,
	108, 0, 0, 77, 82, 0, 94, 0, 102, 0,
	0, 92, 0, 0, 98, 93, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 73, 86, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 70, 0, 107, 0, 95, 0,
	88, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 82, 0, 0, 0, 0, 0, 0, 92,
	81, 87, 98, 93, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 53, 0, 0,
	139, 0, 0, 90, 83, 0, 0, 0, 99, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 107, 109, 110, 112, 111, 113,
	114, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 87,
	0, 0, 103, 104, 80, 108, 0, 0, 77, 0,
	0, 94, 0, 102, 0, 0, 0, 0, 0, 0,
	0, 90, 83, 0, 0, 95, 99, 88, 0, 0,
	0, 0, 0, 0, 1073, 0, 101, 0, 86, 82,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 98,
	93, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 139, 0, 1075,
	0, 0, 0, 84, 100, 0, 78, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 95, 0, 88, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 82, 0, 0,
	0, 0, 0, 0, 92, 81, 87, 98, 93, 103,
	104, 80, 108, 0, 0, 77, 0, 0, 94, 0,
	102, 0, 53, 0, 0, 73, 0, 0, 90, 83,
	0, 0, 0, 99, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 107,
	109, 110, 112, 111, 113, 114, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	95, 0, 88, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 82, 0, 94, 0, 102, 0,
	0, 92, 0, 0, 98, 93, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 73, 86, 0, 589, 0, 0, 590, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 95, 0,
	88, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 82, 437, 0, 0, 0, 0, 0, 92,
	81, 87, 98, 93, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 0, 0, 0,
	73, 0, 436, 90, 83, 0, 0, 0, 99, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 107, 109, 110, 112, 111, 113,
	114, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 95, 0, 88, 0, 0, 81, 87,
	0, 0, 103, 104, 80, 108, 0, 82, 77, 0,
	0, 94, 0, 102, 92, 0, 0, 98, 93, 0,
	0, 90, 83, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 101, 1075, 86, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 95, 0, 88, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 82, 0, 0, 0, 0,
	0, 0, 92, 81, 87, 98, 93, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	53, 0, 0, 139, 0, 0, 90, 83, 0, 0,
	0, 99, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 107, 109, 110,
	112, 111, 113, 114, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 95, 0, 88, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	82, 77, 0, 0, 94, 0, 102, 92, 0, 0,
	98, 93, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 101,
	897, 86, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 95, 0, 88, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 426, 82, 77, 0, 0, 94,
	0, 102, 92, 0, 0, 98, 93, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 101, 0, 86, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 95,
	0, 88, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 82, 0, 0, 0, 0, 0, 0,
	92, 81, 87, 98, 93, 103, 104, 80, 108, 0,
	0, 77, 0, 0, 94, 0, 102, 0, 0, 0,
	0, 73, 0, 0, 90, 83, 0, 0, 0, 99,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 107, 109, 110, 112, 111,
	113, 114, 0, 0, 0, 79, 0, 97, 0, 105,
	76, 0, 0, 0, 95, 0, 88, 0, 0, 81,
	87, 0, 0, 103, 104, 80, 108, 0, 82, 77,
	0, 0, 94, 0, 102, 92, 0, 0, 98, 93,
	0, 0, 90, 83, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 413, 101, 0, 86,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 91, 0, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 0, 109, 110, 112, 111, 113, 114,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 95, 0, 88, 0, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 82, 0, 0, 0,
	0, 0, 0, 92, 81, 87, 98, 93, 103, 104,
	80, 108, 0, 0, 77, 0, 0, 94, 0, 102,
	0, 0, 0, 0, 139, 0, 0, 90, 83, 0,
	0, 0, 99, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 107, 109,
	110, 112, 111, 113, 114, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 95, 0, 88,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 82, 77, 0, 0, 94, 0, 102, 92, 0,
	0, 98, 93, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	101, 0, 86, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 87, 0,
	0, 103, 104, 80, 108, 0, 0, 77, 0, 0,
	94, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	90, 83, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 91, 0, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 114,
}
var yyPact = [...]int{

	1271, -1000, -176, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 805, 838, -1000, -1000, -1000, -1000, -1000, 599,
	5073, 14, -23, 70, 65, 154, 60, 6505, -1000, -1000,
	21, -1000, -163, -1000, -1000, -164, -1000, -1000, -1000, -1000,
	663, -1000, -1000, -1000, -1000, -1000, 794, 803, 687, 762,
	667, -1000, 14, 6505, 824, 2122, -135, 6630, 10, 53,
	10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 58, -1000, 4, 494, 4,
	6505, 6505, -85, -20, -1000, -1000, -83, -1000, -1000, -1000,
	-91, -1000, -1000, -1000, -1000, -1000, -1000, 6505, -1000, -1000,
	-1000, -1000, -1000, -1000, 315, -1000, -1000, -1000, -1000, 522,
	522, -1000, 6505, 6505, -1000, -1000, -1000, -1000, 377, 690,
	4597, 4597, 805, -1000, 663, -1000, -1000, -1000, 721, -1000,
	-1000, 228, 6164, 733, 116, 6505, 518, 3054, -1000, -1000,
	-1000, 202, 5681, -1000, -1000, -1000, 729, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 798, 797, 498,
	-1000, 1282, -1000, -1000, 6505, 217, 492, 6505, 6505, 6505,
	743, 621, 6505, -1000, -1000, 822, 6505, 6505, -1000, -1000,
	818, 819, -1000, -1000, -1000, -1000, -1000, 818, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4597, -1000,
	-1000, 111, -1000, -1000, -1000, -1000, -1000, 831, 164, 666,
	-1000, 4597, 1692, 522, 522, -1000, -1000, 98, -1000, -1000,
	4804, 4804, 4804, 4804, 4804, 4804, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 522,
	115, -1000, 4386, 522, 522, 522, 522, 522, 522, 4597,
	522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
	522, 522, 522, -1000, -1000, 520, -1000, 454, 794, 377,
	667, 5573, 638, -1000, -1000, 644, 6505, -1000, 6397, 3753,
	814, 3054, 518, 4597, 121, -1000, -1000, -1000, -1000, -136,
	522, 42, 4946, 657, -63, -1000, -1000, 541, -1000, 541,
	541, 541, 541, -38, -38, -38, -38, -1000, -1000, -1000,
	-1000, -1000, 611, -1000, 541, 541, 541, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 609, 609, 609, 555, 555,
	731, 742, 616, -1000, 103, 517, -1000, -1000, 6505, -1000,
	794, -89, -1000, -1000, 266, 6505, 6505, -1000, -1000, -1000,
	-1000, 491, 214, -1000, 6505, -1000, -1000, -1000, -1000, 645,
	4597, 4597, 367, 4597, 4597, 148, 4804, 258, 181, 4804,
	4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804,
	4804, 4804, 4804, 4804, 302, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 488, -1000, 663, 552, 552, 123, 123,
	123, 123, 123, 146, 1834, 3520, 377, 4386, 3964, 3964,
	4597, 4597, 3964, 749, 212, 214, 6272, -1000, 377, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3964, 3964, 3964, 3964,
	4597, -1000, -1000, -1000, 690, -1000, 749, 799, -1000, 707,
	705, 3964, -1000, 613, 6397, 522, -1000, 5446, -1000, 591,
	-1000, 199, -1000, 113, -1000, -1000, -1000, -1000, -1000, 805,
	4597, -1000, 214, -1000, 484, 522, 522, 6630, -1000, 42,
	-1000, -1000, -1000, -1000, -1000, -1000, 156, 156, -42, -1000,
	-1000, 156, -1000, -1000, -1000, 606, 768, 145, 461, 137,
	-1000, -1000, -1000, 657, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 233, 46, -1000, 767, -1000, 766, 348,
	829, -65, -1000, -1000, 290, -38, -38, -1000, -1000, 121,
	726, 121, 121, 121, 346, -1000, -1000, -1000, -1000, 268,
	-1000, -1000, -1000, 267, -1000, -1000, 731, -1000, 24, -1000,
	6505, -1000, 108, 195, 33, -2, -3, -6, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6505, -1000, -1000, 344,
	-1000, -1000, -1000, 342, 4597, -1000, 266, -1000, 4597, -1000,
	-1000, 678, 148, 206, -1000, -1000, 376, -1000, -1000, 214,
	214, 898, -1000, -1000, -1000, -1000, 258, 4804, 4804, 4804,
	360, 898, 699, 1030, 292, 123, 316, 316, 158, 158,
	158, 158, 158, 242, 242, -1000, -1000, -1000, 377, -1000,
	-1000, -1000, 377, 3964, 516, -1000, -1000, 1525, 110, 522,
	105, -1000, -1000, 377, 433, 433, 135, 341, 433, 3964,
	226, -1000, 4597, 377, -1000, 433, 377, 433, 433, -1000,
	-1000, 6505, -1000, -1000, -1000, -1000, 585, -1000, 736, 504,
	512, -1000, -1000, 4175, 377, 475, 101, 805, 6397, 4597,
	3520, 794, 214, -1000, 6630, 6630, 377, -1000, 338, -1000,
	297, 156, -1000, 724, 264, 6272, -1000, 413, -1000, -1000,
	407, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -97, -1000, -1000, 500, 121, 121, -1000, 177, -1000,
	-1000, -1000, 472, -1000, 514, 435, -1000, 156, 156, 2355,
	-1000, 6505, -1000, -1000, -1000, 393, -44, 599, 390, 6630,
	-1000, -1000, -1000, -1000, 214, -1000, 214, -1000, -1000, -1000,
	-1000, -1000, -1000, 360, 898, 486, -1000, 4804, 4804, -1000,
	-1000, 433, 3964, -1000, -1000, 6039, -1000, -1000, 2821, 3964,
	3287, -1000, -1000, -1000, 253, 302, 253, -114, 536, 208,
	-1000, 4597, 286, -1000, -1000, -1000, -1000, -1000, -1000, 814,
	5914, 765, -1000, 522, -1000, -1000, 641, 6272, 6272, 794,
	-1000, 214, -1000, -1000, 377, 377, 2355, -1000, -1000, -1000,
	-1000, 297, -1000, -1000, 430, -1000, 541, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 324, 249, -1000, 247,
	380, 201, -1000, -1000, -1000, -1000, -1000, -1000, 714, -1000,
	-1000, -1000, -1000, 4804, 898, 898, -1000, -1000, -1000, -1000,
	90, 377, -1000, 377, 541, 541, -1000, 541, 555, -1000,
	541, -18, 541, -19, 377, 377, 522, -111, -1000, 214,
	4597, 812, 513, 730, -1000, -1000, -1000, 745, 5181, 5338,
	828, -1000, 522, -1000, 663, 69, -1000, -1000, 2355, 522,
	-1000, -1000, -119, 6272, -1000, -1000, 499, 487, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 374, 898, 2588, -1000, -1000,
	-1000, 59, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	4804, 377, 287, 214, 809, 796, 5914, 5914, 5914, 5914,
	-1000, 664, 653, -1000, 649, 637, 683, 6505, -1000, 427,
	5181, 75, -1000, 5806, -1000, -1000, 6397, 512, 377, 6272,
	-1000, -145, 786, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	47, -1000, -1000, -1000, 4597, 4597, 730, 586, 703, -1000,
	-1000, -1000, -1000, 651, -1000, 643, -1000, -1000, -1000, -1000,
	-1000, 52, 45, 39, -1000, 506, -1000, -1000, 423, -1000,
	351, 784, 377, 48, -122, 214, 505, 4597, 4597, -1000,
	-1000, 522, 522, 522, -145, 2355, 698, -1000, -1000, 674,
	-117, -127, 214, 214, 6272, 6272, 6272, -1000, -1000, 144,
	-1000, 671, -1000, 368, -1000, 368, 368, 522, -120, -1000,
	6272, -1000, -1000, -1000, -123, -1000, -129, -1000,
}
var yyPgo = [...]int{

	0, 1061, 1053, 1052, 1051, 1048, 1047, 1046, 1045, 41,
	605, 1044, 1043, 1041, 1040, 1039, 1037, 1035, 1033, 1030,
	1025, 1023, 1022, 1018, 1017, 1016, 170, 1015, 1014, 1012,
	56, 1011, 58, 1008, 1005, 1004, 25, 93, 23, 37,
	203, 988, 22, 13, 9, 987, 985, 6, 984, 1091,
	983, 60, 982, 981, 36, 980, 979, 975, 3, 49,
	974, 973, 972, 971, 61, 102, 970, 966, 963, 962,
	955, 954, 35, 2, 14, 8, 18, 952, 46, 11,
	950, 27, 945, 944, 939, 936, 44, 934, 59, 933,
	34, 53, 927, 33, 5, 26, 111, 54, 916, 914,
	912, 338, 910, 202, 313, 907, 45, 906, 905, 20,
	0, 12, 16, 30, 904, 48, 1049, 21, 7, 903,
	902, 1226, 1, 19, 900, 17, 899, 897, 895, 894,
	893, 891, 193, 890, 889, 886, 885, 884, 883, 882,
	881, 67, 32, 15, 880, 47, 29, 40, 877, 876,
	874, 57, 39, 871, 869, 868, 867, 866, 28, 865,
	52, 24, 861, 859, 858, 55, 856, 10, 855, 854,
	853, 51, 850, 849, 50, 4, 848, 847, 845, 105,
	172, 844, 133,
}
var yyR1 = [...]int{

	0, 177, 178, 178, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 9, 9, 9, 10, 11, 11, 12,
	12, 13, 13, 29, 29, 14, 15, 16, 16, 124,
	124, 176, 176, 175, 17, 17, 17, 17, 17, 17,
	172, 172, 173, 173, 174, 174, 147, 147, 146, 146,
	145, 145, 144, 144, 148, 148, 148, 20, 161, 163,
	163, 164, 164, 165, 165, 165, 165, 165, 140, 143,
	143, 136, 137, 138, 139, 139, 162, 162, 162, 158,
	115, 115, 126, 126, 126, 169, 169, 170, 170, 171,
	171, 171, 171, 171, 171, 171, 129, 129, 127, 127,
	127, 127, 127, 127, 127, 128, 128, 128, 128, 128,
	130, 130, 130, 130, 130, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 157,
	157, 132, 132, 151, 151, 152, 152, 152, 149, 149,
	150, 150, 153, 153, 133, 133, 133, 133, 133, 134,
	154, 141, 141, 141, 142, 142, 155, 155, 156, 156,
	135, 159, 159, 166, 166, 166, 166, 166, 160, 160,
	168, 168, 167, 18, 18, 18, 18, 18, 18, 18,
	18, 19, 19, 19, 55, 55, 1, 21, 2, 3,
	4, 4, 5, 5, 5, 5, 6, 6, 6, 6,
	6, 7, 7, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 35,
	35, 51, 51, 52, 52, 53, 53, 54, 54, 54,
	25, 23, 24, 24, 24, 24, 181, 26, 27, 27,
	28, 28, 28, 32, 32, 32, 30, 30, 31, 31,
	38, 38, 37, 37, 39, 39, 39, 39, 114, 114,
	114, 113, 113, 41, 41, 42, 42, 43, 43, 44,
	44, 44, 56, 45, 45, 45, 45, 120, 120, 119,
	119, 119, 118, 118, 46, 46, 46, 46, 47, 47,
	47, 47, 48, 48, 50, 50, 49, 49, 57, 57,
	57, 57, 58, 58, 59, 59, 40, 40, 40, 40,
	40, 40, 40, 102, 102, 61, 61, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 71, 71, 71,
	71, 71, 71, 62, 62, 62, 62, 62, 62, 62,
	36, 36, 72, 72, 72, 78, 73, 73, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 69, 69,
	69, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	68, 68, 68, 68, 68, 68, 68, 68, 182, 182,
	70, 70, 70, 70, 33, 33, 33, 33, 33, 123,
	123, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 82, 82, 34, 34, 80, 80,
	81, 83, 83, 79, 79, 79, 64, 64, 64, 64,
	64, 64, 64, 66, 66, 66, 84, 84, 85, 85,
	86, 86, 87, 87, 88, 89, 89, 89, 90, 90,
	90, 90, 91, 91, 91, 63, 63, 63, 63, 63,
	63, 92, 92, 92, 92, 93, 93, 74, 74, 76,
	76, 75, 77, 94, 94, 95, 96, 96, 97, 97,
	99, 99, 99, 98, 98, 98, 100, 100, 103, 103,
	104, 104, 101, 101, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 106, 106, 106, 107, 107, 108,
	108, 108, 111, 111, 112, 112, 116, 116, 117, 117,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 179, 180, 121, 122, 122, 122,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 2, 9, 12, 8, 5, 7,
	0, 1, 1, 2, 4, 4, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 1,
	1, 3, 3, 4, 1, 1, 1, 3, 3, 3,
	1, 1, 3, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 1, 2, 1,
	2, 4, 7, 2, 3, 2, 2, 3, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 5, 4, 1, 3, 3, 3, 2, 2,
	3, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	4, 0, 1, 6, 5, 5, 3, 3, 5, 6,
	3, 3, 3, 5, 3, 3, 3, 3, 3, 0,
	3, 0, 2, 0, 1, 1, 1, 0, 2, 2,
	4, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -177, -8, -9, -13, -14, -15, -16, -17, -18,
	-19, -1, -21, -22, -25, -23, -2, -3, -4, -5,
	-6, -24, -10, -11, 6, -29, 8, 9, 33, -20,
	114, 115, 116, 137, 118, 130, 36, 53, 214, 132,
	221, 224, 225, 228, 227, 232, 29, 131, 135, 136,
	-179, 7, 197, 56, -178, 238, -86, 14, -28, 5,
	-26, -181, -26, -26, -26, -26, -161, 56, 189, -108,
	121, 22, -111, 59, -110, 203, 138, 157, 68, 133,
	153, 147, 31, 171, 222, 208, 187, 148, 19, 229,
	170, 205, 38, 42, 160, 17, 207, 135, 41, 175,
	223, 185, 162, 151, 152, 137, 209, 123, 154, 232,
	233, 235, 234, 236, 237, -101, 125, 121, 122, 189,
	121, 121, 183, 114, 178, 216, -52, 218, 219, 185,
	121, 220, 181, 217, 180, 59, 35, 121, -116, 59,
	-110, -121, -121, 62, 207, -121, 226, -121, -121, 233,
	235, 234, 236, 237, -121, -121, -121, -121, -9, -90,
	16, 15, -12, -10, -179, 6, 24, 25, -32, 43,
	44, -27, -101, -49, -116, 10, -96, -124, -97, 230,
	229, -112, -99, -111, -109, 161, 158, 231, 74, 26,
	28, 173, 77, 144, 109, 166, 15, 78, 155, 108,
	186, 198, 114, 51, 190, 191, 188, 189, 178, 149,
	32, 9, 29, 131, 25, 102, 116, 81, 82, 216,
	134, 27, 132, 71, 18, 54, 10, 35, 12, 13,
	126, 125, 93, 122, 49, 7, 142, 143, 110, 30,
	90, 45, 23, 47, 91, 16, 192, 193, 34, 169,
	165, 202, 168, 141, 164, 104, 52, 39, 75, 69,
	150, 72, 55, 136, 73, 14, 50, 219, 128, 218,
	146, 92, 117, 197, 48, 6, 201, 33, 130, 140,
	46, 121, 179, 167, 139, 163, 80, 124, 70, 220,
	5, 22, 176, 8, 53, 127, 194, 195, 196, 37,
	159, 156, 217, 206, 79, 11, 177, 210, 215, -162,
	-158, -115, 59, -110, -104, 126, 122, -104, 121, -103,
	126, 59, -103, -49, -49, 182, 121, 189, -121, -121,
	179, -53, 186, 187, -121, -121, -121, 185, -121, -121,
	-121, -121, -121, -49, -121, 62, -121, -75, -179, -75,
	-121, -49, -7, -49, -180, 58, -91, 18, 34, -40,
	-60, 75, -65, 32, 27, -64, -61, -79, -77, -78,
	109, 98, 99, 106, 76, 110, -69, -67, -68, -70,
	61, 60, 62, 63, 64, 65, 69, 70, 71, -111,
	-116, -75, -179, 47, 48, 198, 199, 202, 200, 78,
	37, 188, 196, 195, 194, 192, 193, 190, 191, 126,
	189, 104, 197, 59, -110, -87, -88, -40, -86, -9,
	-26, 39, -30, 25, 67, -50, 30, -49, 33, 111,
	-49, 57, -96, 83, -98, -111, 61, 32, 33, 15,
	15, 58, 57, -126, -129, -131, -130, -127, -128, 155,
	156, 109, 159, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 133, 151, 152, 153, 154, 138, 139,
	140, 141, 142, 143, 144, 146, 147, 148, 149, 150,
	-116, 75, 59, -49, -49, -55, -49, 27, 55, -116,
	-35, 10, -49, -49, -51, 10, 10, -51, -121, -121,
	-121, -73, -40, -121, -106, 124, 26, -121, 8, 93,
	74, 73, 90, 57, 17, -40, -62, 93, 75, 91,
	92, 77, 95, 94, 105, 98, 99, 100, 101, 102,
	103, 104, 96, 97, 108, 83, 84, 85, 86, 87,
	88, 89, -102, -179, -78, -179, 112, 113, -65, -65,
	-65, -65, -65, -65, -179, 111, -9, -179, -179, -179,
	-179, -179, -179, -179, -82, -40, -179, -182, -179, -182,
	-182, -182, -182, -182, -182, -182, -179, -179, -179, -179,
	57, -89, 28, 29, -90, -180, -32, -66, -111, 62,
	65, -31, 46, -63, 33, 37, -9, -179, -49, -94,
	-95, -79, -111, -116, -117, -116, -109, 158, 161, -59,
	11, -97, -40, -142, 108, 212, 213, -179, -163, -164,
	-165, -136, -137, -138, -139, -140, 68, 222, -147, 229,
	223, 173, 32, -158, -159, -166, 128, 22, -160, 19,
	122, 23, -169, -170, -171, -153, -133, -154, -155, -156,
	-135, -134, 69, 75, 32, 173, 128, 23, 22, 68,
	55, -149, 176, -132, 56, -132, -132, -132, -132, -141,
	158, -141, -141, -141, 56, -132, -132, -132, -151, 56,
	-151, -151, -152, 56, -152, -172, -173, -174, -147, 27,
	55, -105, 117, 222, 198, 119, 116, 120, 115, 173,
	158, 68, 32, 14, 209, 59, 57, -49, -90, 184,
	-121, -121, -54, 91, 11, -49, -49, -121, 57, -180,
	-49, 41, -40, -40, -71, 69, 75, 70, 71, -40,
	-40, -65, -72, -75, -78, 66, 93, 91, 92, 77,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -123, 59, 61, 59, -64,
	-64, -111, -38, 25, -37, -39, 100, -40, -116, -112,
	-117, -109, -180, -9, -37, -37, -40, -40, -37, -30,
	-80, -81, 79, -111, -180, -37, -38, -37, -37, -88,
	-91, -100, 18, 10, 37, 37, -37, -93, 55, -94,
	-74, -76, -75, -179, -9, -92, -111, -59, 57, 83,
	111, -86, -40, 59, -179, -179, -115, -165, -146, 83,
	-146, -145, 161, 158, -146, 56, 23, -160, 59, 59,
	-160, -171, 69, 61, 62, 63, 69, 188, 23, 23,
	61, 8, -150, 177, 62, -141, -141, -142, 33, -142,
	-142, -142, -157, 61, 62, 62, -174, 108, -145, -49,
	-121, -106, -107, 122, 23, 83, 124, 129, 129, 129,
	-49, -121, 61, 61, -40, -54, -40, -121, 42, 69,
	70, 71, -72, -65, -65, -65, -36, 134, 74, -180,
	-180, -37, 57, -114, -113, 26, -111, 61, 111, -179,
	111, -180, -180, -180, 57, 127, 26, -180, -37, -83,
	-81, 81, -40, -180, -180, -180, -180, -180, -49, -41,
	10, 31, -93, 57, -180, -180, -180, 57, 111, -86,
	-95, -40, -112, -90, -115, -115, -180, 61, -143, 59,
	61, -146, 33, 62, -168, -167, -111, 59, 59, 188,
	58, -142, -142, 59, 109, 58, 57, 57, 58, 57,
	-146, -146, -122, -179, -112, -49, -121, 59, 158, -161,
	59, -158, -36, 74, -65, -65, -180, -39, -113, 100,
	-117, -38, -112, -125, 109, 155, 133, 153, 149, 170,
	160, 175, 151, 176, -123, -125, 203, -86, 82, -40,
	80, -59, -42, -43, -44, -45, -56, -78, -179, -49,
	23, -76, 37, -9, -179, -111, -111, -90, -180, -180,
	-122, -143, 58, 57, -132, 61, 62, 62, -144, 59,
	32, -148, 59, 109, 32, 33, -65, 111, -180, -180,
	-132, -132, -132, -152, -132, 143, -132, 143, -180, -180,
	-179, -34, 201, -40, -84, 12, 57, -46, -47, -48,
	45, 49, 51, 46, 47, 48, 52, -120, 26, -42,
	-179, -119, -118, 26, -116, 61, 8, -74, -9, 111,
	-122, -179, 206, -167, 58, 58, 59, 100, -141, 59,
	-65, -180, 61, -85, 13, 15, -43, -44, -43, -44,
	45, 45, 45, 50, 45, 50, 45, -47, -116, -180,
	-57, 53, 125, 54, -118, -94, -180, -111, -176, -175,
	210, 20, -33, 93, 206, -40, -73, 55, 55, 45,
	45, 122, 122, 122, 57, -180, 59, 21, -180, 204,
	52, 207, -40, -40, -179, -179, -179, -175, -122, 37,
	42, 205, 208, -58, -111, -58, -58, 93, 42, -180,
	57, -180, -180, -75, 206, -111, 207, 208,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 460, 0, 246, 246, 246, 246, 246, 0,
	529, 512, 0, 0, 0, 233, 0, 0, 703, 703,
	0, 703, 0, 703, 703, 0, 703, 703, 703, 703,
	0, 33, 34, 701, 1, 3, 468, 0, 0, 250,
	253, 248, 512, 0, 0, 0, 44, 0, 510, 0,
	510, 530, 531, 532, 533, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 0, 513, 508, 0, 508,
	0, 0, 0, 0, 703, 703, 0, 703, 703, 703,
	0, 703, 703, 703, 703, 703, 234, 0, 241, 536,
	537, 198, 199, 703, 0, 202, 703, 204, 205, 0,
	0, 703, 0, 211, 242, 243, 244, 245, 27, 472,
	0, 0, 460, 29, 0, 246, 251, 252, 256, 254,
	255, 247, 0, 0, 306, 0, 37, 0, 496, 39,
	-2, 0, 0, 534, 535, -2, 551, 502, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 0, 0, 0,
	86, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 229, 0, 0, 216, 217,
	231, 0, 235, 236, 220, 221, 222, 231, 224, 225,
	226, 227, 228, 703, 200, 703, 203, 703, 0, 703,
	208, 524, 703, 212, 28, 702, 23, 0, 0, 469,
	316, 0, 321, 323, 0, 358, 359, 360, 361, 362,
	0, 0, 0, 0, 0, 0, 384, 385, 386, 387,
	446, 447, 448, 449, 450, 451, 452, 325, 326, 443,
	0, 492, 0, 0, 0, 0, 0, 0, 0, 434,
	0, 408, 408, 408, 408, 408, 408, 408, 408, 0,
	0, 0, 0, -2, -2, 461, 462, 465, 468, 27,
	253, 0, 258, 257, 249, 0, 0, 305, 0, 0,
	314, 0, 38, 0, 164, 503, 504, 505, 501, 0,
	0, -2, 0, 95, 148, 93, 94, 141, 107, 141,
	141, 141, 141, 161, 161, 161, 161, 133, 134, 135,
	136, 137, 0, 120, 141, 141, 141, 124, 108, 109,
	110, 111, 112, 113, 114, 143, 143, 143, 145, 145,
	-2, 0, 0, 67, 0, 191, 194, 509, 0, 193,
	468, 0, 703, 703, 237, 0, 0, 703, 240, 201,
	206, 0, 356, 207, 0, 525, 526, 210, 473, 0,
	0, 0, 0, 0, 0, 319, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	348, 349, 322, 0, 336, 0, 0, 0, 378, 379,
	380, 381, 382, 0, 260, 0, 27, 0, 0, 0,
	0, 0, 0, 256, 0, 435, 0, 400, 0, 401,
	402, 403, 404, 405, 406, 407, 0, 260, 0, 0,
	0, 464, 466, 467, 472, 30, 256, 0, 453, 0,
	0, 0, 259, 485, 0, 0, -2, 0, 304, 314,
	493, 0, 443, 0, 307, 538, 539, 551, 552, 460,
	0, 497, 498, 499, 0, 0, 0, 0, 68, -2,
	71, 73, 74, 75, 76, 77, 58, 58, 0, 84,
	85, 58, 57, 87, 88, 0, 0, 0, 0, 674,
	178, 179, 89, 96, 97, 99, 100, 101, 102, 103,
	104, 105, 152, 0, 0, 160, 0, 167, 169, 0,
	0, 150, 149, 106, 0, 161, 161, 127, 128, 164,
	0, 164, 164, 164, 0, 121, 122, 123, 115, 0,
	116, 117, 118, 0, 119, 48, -2, 52, 0, 511,
	0, 703, 524, 0, 521, 0, 519, 0, 514, 515,
	516, 517, 518, 520, 522, 523, 0, 192, 703, 0,
	214, 215, 218, 0, 0, 232, 237, 223, 0, 491,
	703, 0, 317, 318, 320, 337, 0, 339, 341, 470,
	471, 327, 328, 352, 353, 354, 0, 0, 0, 0,
	350, 332, 0, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 377, 419, 420, 0, 375,
	376, 383, 0, 0, 261, 262, 264, 268, 0, 444,
	0, -2, 355, 27, 0, 0, 0, 0, 0, 0,
	441, 438, 0, 0, 409, 0, 0, 0, 0, 463,
	24, 0, 506, 507, 454, 455, 273, 31, 0, 485,
	475, 487, 489, 0, 27, 0, 481, 460, 0, 0,
	0, 468, 315, 165, 0, 0, 0, 72, 0, 59,
	0, 58, 60, 0, 0, 0, 173, 0, 175, 176,
	0, 98, 153, 154, 155, 156, 157, 158, 166, 168,
	170, 0, 92, 151, 0, 164, 164, 129, 0, 130,
	131, 132, 0, 139, 0, 0, 53, 58, 58, 704,
	183, 0, 703, 527, 528, 0, 0, 0, 0, 0,
	195, 213, 230, 238, 239, 219, 357, 209, 474, 338,
	340, 342, 329, 350, 333, 0, 330, 0, 0, 324,
	388, 0, 0, 265, 269, 0, 271, 272, 0, 260,
	0, -2, 391, 392, 0, 0, 0, 0, 460, 0,
	439, 0, 0, 399, 410, 411, 412, 413, 25, 314,
	0, 0, 32, 0, 490, -2, 0, 0, 0, 468,
	494, 495, 444, 36, 0, 0, 704, 81, 82, 79,
	80, 0, 61, 78, 0, 180, 141, 174, 177, 159,
	142, 125, 126, 162, 163, 138, 0, 0, 146, 0,
	0, 0, 49, 705, 706, 184, 185, 186, 0, 188,
	189, 190, 331, 0, 351, 334, 389, 263, 270, 266,
	0, 0, 445, 0, 141, 141, 424, 141, 145, 427,
	141, 429, 141, 432, 0, 0, 0, 436, 398, 442,
	0, 456, 274, 275, 277, 278, 279, 287, 0, 289,
	0, 488, 0, -2, 0, 483, 482, 35, 704, 0,
	47, 83, 171, 0, 182, 140, 0, 0, 54, 62,
	63, 55, 64, 65, 66, 0, 335, 0, 390, 393,
	421, 161, 425, 426, 428, 430, 431, 433, 395, 394,
	0, 0, 0, 440, 458, 0, 0, 0, 0, 0,
	294, 0, 0, 297, 0, 0, 0, 0, 288, 0,
	0, 308, 290, 0, 292, 293, 0, 478, 27, 0,
	45, 0, 0, 181, 144, 147, 187, 267, 422, 423,
	414, 397, 437, 26, 0, 0, 276, 283, 0, 286,
	295, 296, 298, 0, 300, 0, 302, 303, 280, 281,
	282, 0, 0, 0, 291, 486, -2, 484, 0, 41,
	0, 0, 0, 0, 0, 459, 457, 0, 0, 299,
	301, 0, 0, 0, 0, 704, 0, 172, 396, 0,
	0, 0, 284, 285, 0, 0, 0, 42, 46, 0,
	415, 0, 418, 0, 312, 0, 0, 0, 416, 309,
	0, 310, 311, 43, 0, 313, 0, 417,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 238,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:880
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:886
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:888
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:892
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:916
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:924
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:928
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:935
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:945
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:951
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:955
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:961
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:972
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:994
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1000
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1006
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1010
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1016
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1020
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1030
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1036
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1042
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1048
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1061
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1070
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1083
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1091
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1097
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1101
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1107
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1111
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1117
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1124
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1132
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1137
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1139
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1143
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = "character set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1153
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1157
		{
			yyVAL.str = "default"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1171
		{
			yyVAL.str = "default"
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1177
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1188
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1215
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1219
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1225
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1229
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1235
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1263
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			// Normal str as a identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1281
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1288
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1294
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1300
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1316
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1321
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1325
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1331
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1344
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1348
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1354
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1363
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1367
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1373
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1377
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1383
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1390
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1397
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1411
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1418
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1425
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1434
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1439
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1445
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1449
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1587
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1592
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1597
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1601
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1606
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1610
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1618
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1622
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1628
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1636
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1640
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1645
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1649
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1656
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1660
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1670
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1674
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1678
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1682
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1688
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1694
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1703
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1707
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1712
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1716
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1722
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1726
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1735
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1745
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1751
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1755
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1761
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1765
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1769
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1773
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1777
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1783
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1793
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1797
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1803
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1809
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1813
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1818
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1823
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1827
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1831
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1835
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1839
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1845
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1853
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1858
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1868
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1872
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1878
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1884
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.statement = &Xa{}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &Explain{}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1902
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1906
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1916
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1920
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1924
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1930
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1934
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1938
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1942
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1946
		{
			yyVAL.statement = &Radon{Action: CleanupStr, Table: yyDollar[3].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1951
		{
			yyVAL.tableName = TableName{}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1955
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1981
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2001
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2013
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2021
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			yyVAL.str = ""
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2030
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2035
		{
			yyVAL.tableName = TableName{}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2039
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2045
		{
			yyVAL.str = ""
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2049
		{
			yyVAL.str = "full "
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2055
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2065
		{
			yyVAL.showFilter = nil
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2069
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2079
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2085
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2091
		{
			yyVAL.statement = &OtherRead{}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.statement = &OtherRead{}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2103
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2108
		{
			setAllowComments(yylex, true)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2111
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2117
		{
			yyVAL.bytes2 = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2121
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2127
		{
			yyVAL.str = UnionStr
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2131
		{
			yyVAL.str = UnionAllStr
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2135
		{
			yyVAL.str = UnionDistinctStr
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = SQLCacheStr
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2153
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2157
		{
			yyVAL.str = DistinctStr
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2162
		{
			yyVAL.str = ""
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.str = StraightJoinHint
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2171
		{
			yyVAL.selectExprs = nil
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2175
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2181
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2185
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2195
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2203
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2208
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2216
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2223
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2228
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2232
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2238
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2242
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2256
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2279
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2283
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2287
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2291
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2296
		{
			yyVAL.empty = struct{}{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.empty = struct{}{}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2305
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2313
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.str = JoinStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = JoinStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = JoinStr
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = StraightJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2344
		{
			yyVAL.str = LeftJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2348
		{
			yyVAL.str = LeftJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2352
		{
			yyVAL.str = RightJoinStr
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2356
		{
			yyVAL.str = RightJoinStr
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2362
		{
			yyVAL.str = NaturalJoinStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2366
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2376
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2380
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2386
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2390
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2395
		{
			yyVAL.indexHints = nil
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2399
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2403
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2407
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2417
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2452
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2456
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2462
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2466
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2472
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2476
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2510
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2514
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2518
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = IsNullStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2528
		{
			yyVAL.str = IsNotNullStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2532
		{
			yyVAL.str = IsTrueStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2536
		{
			yyVAL.str = IsNotTrueStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2540
		{
			yyVAL.str = IsFalseStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2544
		{
			yyVAL.str = IsNotFalseStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.str = EqualStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.str = LessThanStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.str = GreaterThanStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.str = LessEqualStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2566
		{
			yyVAL.str = GreaterEqualStr
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2570
		{
			yyVAL.str = NotEqualStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2574
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = nil
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2603
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2711
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2733
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2759
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 396:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 397:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2793
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2797
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2833
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2876
		{
			yyVAL.str = ""
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2880
		{
			yyVAL.str = BooleanModeStr
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2884
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2888
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2892
		{
			yyVAL.str = QueryExpansionStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2950
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2954
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.expr = nil
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2972
		{
			yyVAL.str = string("")
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2976
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2986
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2992
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2997
		{
			yyVAL.expr = nil
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3015
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3037
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3045
		{
			yyVAL.expr = &NullVal{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3051
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3060
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3069
		{
			yyVAL.exprs = nil
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3073
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3078
		{
			yyVAL.expr = nil
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3082
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3087
		{
			yyVAL.orderBy = nil
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3091
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3097
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3101
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3107
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3112
		{
			yyVAL.str = AscScr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3116
		{
			yyVAL.str = AscScr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			yyVAL.str = DescScr
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3125
		{
			yyVAL.limit = nil
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3129
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3133
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3137
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3142
		{
			yyVAL.str = ""
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3146
		{
			yyVAL.str = ForUpdateStr
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3150
		{
			yyVAL.str = ShareModeStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 478:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3176
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3180
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3184
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3191
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3195
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3199
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3203
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3208
		{
			yyVAL.updateExprs = nil
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3212
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3222
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3232
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3238
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3258
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3264
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3274
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3280
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3284
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3291
		{
			yyVAL.bytes = []byte("charset")
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3302
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3306
		{
			yyVAL.expr = &Default{}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3315
		{
			yyVAL.byt = 0
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3319
		{
			yyVAL.byt = 1
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3324
		{
			yyVAL.byt = 0
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3328
		{
			yyVAL.byt = 1
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3333
		{
			yyVAL.str = ""
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3337
		{
			yyVAL.str = IgnoreStr
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3367
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3371
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3375
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3379
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3384
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3388
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3392
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3398
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3402
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3407
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3415
		{
			yyVAL.empty = struct{}{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3421
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3425
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3438
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3442
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3637
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3646
		{
			decNesting(yylex)
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3651
		{
			forceEOF(yylex)
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3656
		{
			forceEOF(yylex)
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3660
		{
			forceEOF(yylex)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3664
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
