// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       IndexOptionList
	indexOption           *IndexOption
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const FULLTEXT = 57363
const KEY_BLOCK_SIZE = 57364
const NGRAM = 57365
const PARSER = 57366
const SPATIAL = 57367
const UNIQUE = 57368
const KEY = 57369
const ALL = 57370
const DISTINCT = 57371
const AS = 57372
const EXISTS = 57373
const ASC = 57374
const DESC = 57375
const INTO = 57376
const DUPLICATE = 57377
const DEFAULT = 57378
const SET = 57379
const LOCK = 57380
const FULL = 57381
const CHECKSUM = 57382
const VALUES = 57383
const LAST_INSERT_ID = 57384
const NEXT = 57385
const VALUE = 57386
const SHARE = 57387
const MODE = 57388
const SQL_NO_CACHE = 57389
const SQL_CACHE = 57390
const JOIN = 57391
const STRAIGHT_JOIN = 57392
const LEFT = 57393
const RIGHT = 57394
const INNER = 57395
const OUTER = 57396
const CROSS = 57397
const NATURAL = 57398
const USE = 57399
const FORCE = 57400
const ON = 57401
const ID = 57402
const HEX = 57403
const STRING = 57404
const INTEGRAL = 57405
const FLOAT = 57406
const HEXNUM = 57407
const VALUE_ARG = 57408
const LIST_ARG = 57409
const COMMENT = 57410
const COMMENT_KEYWORD = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const INTERVAL = 57440
const JSON_EXTRACT_OP = 57441
const JSON_UNQUOTE_EXTRACT_OP = 57442
const CREATE = 57443
const ALTER = 57444
const DROP = 57445
const RENAME = 57446
const ANALYZE = 57447
const ADD = 57448
const MODIFY = 57449
const TABLE = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const USING = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const BIT = 57467
const TINYINT = 57468
const SMALLINT = 57469
const MEDIUMINT = 57470
const INT = 57471
const INTEGER = 57472
const BIGINT = 57473
const INTNUM = 57474
const REAL = 57475
const DOUBLE = 57476
const FLOAT_TYPE = 57477
const DECIMAL = 57478
const NUMERIC = 57479
const TIME = 57480
const TIMESTAMP = 57481
const DATETIME = 57482
const YEAR = 57483
const CHAR = 57484
const VARCHAR = 57485
const BOOL = 57486
const CHARACTER = 57487
const VARBINARY = 57488
const NCHAR = 57489
const CHARSET = 57490
const TEXT = 57491
const TINYTEXT = 57492
const MEDIUMTEXT = 57493
const LONGTEXT = 57494
const BLOB = 57495
const TINYBLOB = 57496
const MEDIUMBLOB = 57497
const LONGBLOB = 57498
const JSON = 57499
const ENUM = 57500
const NULLX = 57501
const AUTO_INCREMENT = 57502
const APPROXNUM = 57503
const SIGNED = 57504
const UNSIGNED = 57505
const ZEROFILL = 57506
const DATABASES = 57507
const TABLES = 57508
const WARNINGS = 57509
const VARIABLES = 57510
const EVENTS = 57511
const BINLOG = 57512
const GTID = 57513
const STATUS = 57514
const COLUMNS = 57515
const FIELDS = 57516
const CURRENT_TIMESTAMP = 57517
const DATABASE = 57518
const CURRENT_DATE = 57519
const CURRENT_TIME = 57520
const LOCALTIME = 57521
const LOCALTIMESTAMP = 57522
const UTC_DATE = 57523
const UTC_TIME = 57524
const UTC_TIMESTAMP = 57525
const REPLACE = 57526
const CONVERT = 57527
const CAST = 57528
const GROUP_CONCAT = 57529
const SEPARATOR = 57530
const MATCH = 57531
const AGAINST = 57532
const BOOLEAN = 57533
const LANGUAGE = 57534
const WITH = 57535
const QUERY = 57536
const EXPANSION = 57537
const UNUSED = 57538
const PARTITION = 57539
const PARTITIONS = 57540
const HASH = 57541
const LIST = 57542
const XA = 57543
const DISTRIBUTED = 57544
const ENGINES = 57545
const VERSIONS = 57546
const PROCESSLIST = 57547
const QUERYZ = 57548
const TXNZ = 57549
const KILL = 57550
const ENGINE = 57551
const SINGLE = 57552
const BEGIN = 57553
const START = 57554
const TRANSACTION = 57555
const COMMIT = 57556
const ROLLBACK = 57557
const GLOBAL = 57558
const SESSION = 57559
const NAMES = 57560
const RADON = 57561
const ATTACH = 57562
const ATTACHLIST = 57563
const DETACH = 57564
const RESHARD = 57565
const CLEANUP = 57566

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"NGRAM",
	"PARSER",
	"SPATIAL",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:3841

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 180,
	87, 696,
	-2, 40,
	-1, 185,
	87, 571,
	-2, 520,
	-1, 416,
	115, 555,
	-2, 551,
	-1, 417,
	115, 556,
	-2, 552,
	-1, 444,
	162, 81,
	165, 81,
	-2, 92,
	-1, 483,
	1, 75,
	242, 75,
	-2, 81,
	-1, 600,
	5, 27,
	-2, 496,
	-1, 623,
	162, 81,
	165, 81,
	-2, 93,
	-1, 690,
	1, 76,
	242, 76,
	-2, 81,
	-1, 777,
	115, 558,
	-2, 554,
	-1, 909,
	5, 28,
	-2, 375,
	-1, 933,
	5, 28,
	-2, 497,
	-1, 1022,
	5, 27,
	-2, 499,
	-1, 1145,
	5, 28,
	-2, 500,
}

const yyPrivate = 57344

const yyLast = 7049

var yyAct = [...]int{

	417, 1044, 1216, 1029, 1160, 1178, 1150, 824, 1185, 1034,
	394, 506, 392, 1159, 603, 1077, 686, 1013, 370, 560,
	3, 673, 1091, 806, 992, 946, 761, 1154, 807, 1012,
	768, 613, 1088, 1033, 181, 894, 66, 184, 99, 159,
	776, 604, 902, 787, 141, 56, 312, 617, 738, 771,
	718, 509, 313, 827, 803, 648, 632, 691, 624, 419,
	359, 425, 178, 168, 99, 499, 189, 770, 315, 682,
	158, 55, 368, 636, 146, 641, 1151, 309, 183, 1208,
	99, 99, 310, 1100, 142, 1236, 145, 1215, 147, 148,
	1180, 154, 155, 156, 157, 619, 620, 99, 149, 151,
	150, 152, 153, 1235, 1195, 143, 372, 1233, 1214, 630,
	1005, 1071, 330, 70, 958, 395, 50, 71, 73, 1194,
	341, 76, 77, 715, 329, 849, 666, 176, 332, 333,
	60, 338, 339, 340, 1118, 342, 343, 344, 345, 346,
	1181, 829, 773, 334, 828, 571, 977, 839, 840, 841,
	336, 337, 863, 99, 674, 842, 62, 63, 64, 65,
	351, 353, 1066, 95, 1064, 877, 50, 876, 875, 511,
	1180, 1140, 1142, 99, 164, 324, 99, 709, 189, 317,
	331, 75, 874, 189, 422, 1098, 1172, 94, 348, 78,
	183, 350, 645, 645, 993, 438, 354, 322, 356, 708,
	1171, 872, 829, 1170, 511, 828, 912, 618, 421, 320,
	319, 318, 96, 80, 635, 79, 1056, 72, 995, 936,
	1181, 908, 515, 514, 550, 551, 711, 906, 833, 538,
	1050, 816, 667, 674, 997, 707, 1001, 559, 996, 516,
	994, 432, 82, 1141, 122, 999, 101, 962, 642, 89,
	144, 1220, 643, 640, 645, 998, 528, 1048, 513, 538,
	1000, 1002, 109, 631, 634, 352, 352, 510, 720, 119,
	633, 1193, 125, 120, 843, 1207, 913, 514, 1189, 1182,
	50, 516, 704, 702, 698, 68, 701, 703, 586, 587,
	314, 644, 644, 516, 914, 518, 423, 963, 825, 105,
	871, 873, 510, 362, 420, 435, 83, 1049, 93, 91,
	815, 81, 436, 88, 745, 1007, 484, 99, 788, 515,
	514, 323, 99, 99, 99, 706, 1009, 99, 743, 744,
	742, 99, 99, 515, 514, 838, 516, 357, 427, 517,
	705, 515, 514, 1221, 84, 92, 86, 87, 90, 788,
	516, 919, 719, 644, 134, 515, 514, 53, 516, 639,
	515, 514, 1148, 1205, 106, 700, 124, 741, 132, 102,
	316, 1121, 516, 887, 888, 889, 710, 516, 108, 114,
	1043, 1180, 130, 131, 107, 135, 1042, 951, 103, 699,
	861, 121, 503, 129, 504, 947, 505, 948, 508, 860,
	326, 117, 110, 762, 850, 763, 126, 502, 349, 531,
	532, 533, 534, 535, 528, 1041, 128, 538, 113, 945,
	731, 733, 734, 881, 1046, 189, 732, 880, 859, 846,
	99, 1181, 1175, 99, 100, 189, 118, 592, 123, 112,
	133, 1227, 358, 321, 606, 1115, 315, 183, 600, 979,
	605, 1045, 976, 111, 127, 1173, 358, 1103, 1157, 358,
	116, 588, 957, 136, 137, 139, 138, 140, 104, 956,
	610, 1103, 1156, 608, 548, 1103, 1153, 1075, 358, 675,
	676, 677, 547, 549, 1103, 358, 1111, 590, 1103, 1107,
	1103, 1106, 637, 953, 99, 507, 834, 615, 819, 688,
	764, 99, 99, 1103, 1102, 900, 358, 519, 558, 487,
	99, 561, 562, 563, 564, 565, 566, 567, 486, 570,
	572, 572, 572, 572, 572, 572, 572, 572, 580, 581,
	582, 583, 739, 968, 967, 714, 965, 964, 507, 485,
	692, 325, 716, 717, 601, 569, 74, 723, 1110, 684,
	685, 573, 574, 575, 576, 577, 578, 579, 189, 621,
	384, 383, 385, 386, 387, 388, 935, 358, 57, 389,
	767, 189, 183, 724, 358, 445, 444, 959, 804, 616,
	814, 779, 724, 789, 536, 537, 529, 530, 531, 532,
	533, 534, 535, 528, 775, 928, 538, 777, 24, 814,
	931, 24, 189, 1075, 614, 966, 900, 712, 24, 172,
	808, 606, 792, 805, 812, 900, 434, 605, 584, 165,
	53, 810, 315, 765, 766, 668, 687, 1040, 740, 785,
	780, 781, 598, 1021, 784, 813, 599, 662, 661, 826,
	1039, 1036, 67, 830, 795, 1166, 900, 658, 791, 796,
	793, 794, 53, 804, 814, 53, 955, 728, 729, 817,
	735, 736, 53, 802, 954, 50, 952, 683, 678, 696,
	664, 695, 22, 53, 822, 694, 493, 561, 1135, 1169,
	1083, 1084, 823, 663, 656, 669, 670, 671, 672, 1133,
	657, 851, 852, 1131, 1134, 99, 99, 99, 1132, 596,
	679, 680, 681, 837, 507, 1168, 1130, 782, 783, 1225,
	1129, 169, 170, 99, 1213, 809, 832, 50, 835, 836,
	886, 853, 727, 855, 856, 857, 426, 420, 1203, 801,
	800, 163, 1211, 1054, 360, 820, 821, 950, 854, 441,
	424, 431, 868, 660, 636, 929, 864, 692, 862, 693,
	869, 1210, 492, 739, 361, 1087, 426, 818, 1019, 879,
	589, 845, 529, 530, 531, 532, 533, 534, 535, 528,
	844, 885, 538, 883, 189, 1079, 1082, 1083, 1084, 1080,
	831, 1081, 1085, 166, 167, 1167, 904, 1212, 659, 1224,
	160, 890, 1124, 443, 442, 161, 57, 1123, 99, 1074,
	1162, 527, 526, 536, 537, 529, 530, 531, 532, 533,
	534, 535, 528, 614, 500, 538, 799, 501, 496, 175,
	1095, 315, 315, 847, 798, 512, 59, 606, 61, 183,
	918, 54, 1, 605, 1149, 949, 690, 899, 689, 1079,
	1082, 1083, 1084, 1080, 725, 1081, 1085, 647, 646, 740,
	1206, 940, 69, 916, 777, 1177, 938, 941, 1209, 937,
	930, 1179, 1187, 882, 623, 622, 311, 884, 638, 858,
	99, 969, 970, 942, 943, 653, 652, 651, 315, 649,
	848, 665, 1047, 1099, 629, 365, 628, 627, 626, 625,
	654, 907, 655, 650, 448, 449, 447, 451, 778, 960,
	961, 450, 446, 177, 189, 1086, 1090, 901, 870, 189,
	790, 697, 978, 1163, 546, 975, 904, 797, 182, 183,
	437, 183, 811, 585, 980, 418, 1122, 981, 1073, 99,
	917, 920, 568, 786, 371, 730, 189, 189, 990, 1004,
	1003, 775, 808, 991, 777, 189, 987, 989, 1024, 1025,
	986, 382, 507, 189, 1022, 189, 189, 183, 939, 1010,
	1020, 1011, 1006, 379, 381, 1035, 380, 1035, 1035, 591,
	597, 520, 189, 189, 189, 1032, 369, 1026, 363, 1031,
	1139, 971, 972, 973, 1035, 1035, 1035, 1015, 1037, 1038,
	490, 335, 85, 428, 1078, 1076, 1014, 927, 495, 1070,
	393, 1161, 595, 25, 58, 1051, 1052, 1053, 171, 14,
	21, 15, 13, 12, 1062, 29, 10, 9, 99, 99,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 808, 8, 538, 1016, 7, 189, 97, 6,
	189, 189, 5, 1097, 1017, 1096, 4, 809, 162, 1035,
	1023, 23, 1035, 1035, 2, 20, 19, 189, 18, 17,
	1030, 16, 1008, 11, 174, 0, 0, 0, 0, 183,
	1105, 0, 0, 1108, 1109, 0, 99, 99, 99, 99,
	174, 174, 1117, 0, 0, 0, 0, 99, 0, 0,
	99, 991, 0, 99, 1126, 0, 1128, 174, 0, 189,
	189, 1136, 897, 1147, 189, 1125, 898, 1127, 606, 779,
	1144, 1146, 183, 1152, 605, 1143, 1035, 909, 910, 911,
	0, 1069, 915, 0, 1016, 0, 0, 921, 0, 922,
	923, 924, 925, 1089, 1031, 1155, 1165, 809, 0, 50,
	1158, 0, 1018, 0, 1101, 0, 0, 932, 933, 934,
	0, 0, 1072, 174, 0, 0, 0, 0, 0, 0,
	944, 0, 1184, 0, 0, 1188, 1191, 0, 1186, 1190,
	1183, 0, 0, 174, 0, 189, 174, 0, 1202, 0,
	1201, 1176, 1016, 1016, 1016, 1016, 0, 183, 1204, 1188,
	1191, 1017, 1017, 1017, 1017, 0, 1016, 0, 0, 189,
	189, 189, 1218, 1219, 0, 1089, 173, 0, 0, 1031,
	0, 1217, 1217, 1217, 0, 1030, 0, 0, 1222, 1223,
	0, 0, 327, 328, 1231, 1232, 1059, 1060, 189, 1061,
	0, 1230, 1063, 0, 1065, 0, 0, 985, 0, 347,
	1234, 0, 527, 526, 536, 537, 529, 530, 531, 532,
	533, 534, 535, 528, 0, 0, 538, 0, 0, 552,
	553, 554, 555, 556, 557, 0, 1164, 507, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	1027, 1028, 895, 0, 0, 0, 1198, 1199, 1200, 0,
	1030, 0, 0, 0, 0, 355, 0, 527, 526, 536,
	537, 529, 530, 531, 532, 533, 534, 535, 528, 1196,
	1197, 538, 0, 0, 454, 430, 0, 483, 433, 0,
	0, 0, 174, 174, 174, 0, 0, 494, 1057, 0,
	1058, 174, 174, 0, 0, 0, 352, 0, 466, 0,
	0, 1067, 1068, 471, 472, 473, 474, 475, 476, 477,
	0, 478, 479, 480, 481, 482, 467, 468, 469, 470,
	452, 453, 0, 0, 455, 0, 0, 456, 457, 458,
	459, 460, 461, 462, 463, 464, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	1113, 1114, 526, 536, 537, 529, 530, 531, 532, 533,
	534, 535, 528, 0, 0, 538, 737, 0, 1120, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 0, 0, 1138, 0, 0, 522,
	174, 525, 607, 609, 0, 1145, 0, 539, 540, 541,
	542, 543, 544, 545, 0, 523, 524, 521, 527, 526,
	536, 537, 529, 530, 531, 532, 533, 534, 535, 528,
	0, 0, 538, 0, 488, 489, 491, 0, 0, 0,
	0, 0, 0, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1174, 0, 0,
	0, 0, 0, 0, 174, 0, 0, 0, 0, 1192,
	896, 174, 174, 0, 24, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 122, 0, 101, 0, 115,
	527, 526, 536, 537, 529, 530, 531, 532, 533, 534,
	535, 528, 0, 109, 538, 0, 0, 0, 0, 0,
	119, 0, 0, 125, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1226, 0, 1228, 1229, 53, 774,
	609, 98, 0, 774, 774, 0, 0, 774, 0, 0,
	105, 0, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 774, 774, 774, 774, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 607,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 891,
	892, 893, 0, 0, 0, 106, 713, 124, 0, 132,
	102, 0, 0, 721, 722, 0, 0, 0, 0, 108,
	114, 0, 726, 130, 131, 107, 135, 0, 0, 103,
	0, 0, 121, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 117, 110, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 0, 113,
	0, 0, 0, 0, 0, 174, 174, 174, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 118, 0, 123,
	112, 133, 0, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 127, 0, 0, 0, 0,
	0, 116, 0, 0, 136, 137, 139, 138, 140, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	774, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 984, 0, 0, 0, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 609, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 866, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 122, 0,
	101, 0, 115, 0, 0, 878, 0, 0, 0, 0,
	769, 0, 367, 0, 0, 0, 109, 366, 1055, 0,
	174, 0, 403, 119, 0, 0, 125, 120, 0, 0,
	0, 0, 396, 397, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 416, 384, 383, 385, 386, 387,
	388, 774, 0, 105, 389, 390, 391, 609, 774, 0,
	364, 377, 0, 402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 374, 375, 772, 0, 0, 0, 414,
	926, 376, 0, 0, 373, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 134, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 106, 0,
	124, 0, 132, 102, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 114, 0, 0, 130, 131, 107, 135,
	0, 0, 103, 0, 0, 121, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 117, 110, 0, 0, 0,
	126, 0, 974, 0, 0, 0, 0, 0, 174, 1093,
	128, 0, 113, 404, 413, 410, 411, 408, 409, 407,
	406, 405, 415, 398, 399, 401, 0, 400, 100, 0,
	118, 0, 123, 112, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 127, 0,
	0, 0, 0, 0, 116, 0, 0, 136, 137, 139,
	138, 140, 104, 0, 0, 0, 174, 174, 174, 174,
	0, 0, 0, 0, 0, 0, 0, 1137, 0, 0,
	174, 0, 0, 1093, 0, 0, 607, 292, 277, 237,
	295, 213, 228, 307, 230, 231, 267, 198, 247, 122,
	226, 101, 0, 115, 0, 0, 0, 0, 293, 244,
	0, 216, 191, 223, 192, 214, 241, 109, 212, 279,
	250, 229, 0, 301, 119, 259, 0, 125, 120, 0,
	0, 243, 282, 245, 276, 236, 268, 205, 258, 296,
	227, 264, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 261, 290, 225, 263, 266,
	190, 260, 0, 194, 199, 306, 288, 219, 220, 0,
	0, 0, 0, 0, 0, 0, 242, 246, 273, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	257, 0, 0, 0, 201, 196, 240, 0, 0, 0,
	204, 0, 218, 274, 0, 0, 0, 283, 235, 134,
	289, 233, 232, 297, 270, 0, 280, 215, 224, 106,
	222, 124, 265, 132, 102, 286, 281, 255, 238, 239,
	195, 0, 272, 108, 114, 211, 262, 130, 131, 107,
	135, 200, 303, 103, 186, 302, 121, 185, 129, 287,
	256, 252, 197, 285, 254, 251, 117, 110, 0, 193,
	0, 126, 294, 308, 210, 284, 0, 0, 0, 0,
	0, 128, 202, 113, 208, 209, 206, 207, 248, 249,
	298, 299, 300, 275, 203, 0, 0, 278, 253, 100,
	0, 118, 305, 123, 112, 133, 0, 0, 0, 0,
	0, 0, 221, 304, 271, 269, 291, 0, 111, 127,
	0, 0, 0, 0, 0, 180, 179, 187, 136, 137,
	139, 138, 140, 104, 292, 277, 237, 295, 213, 228,
	307, 230, 231, 267, 198, 247, 122, 226, 101, 0,
	115, 0, 0, 0, 0, 293, 244, 0, 216, 191,
	223, 192, 214, 241, 109, 212, 279, 250, 229, 0,
	301, 119, 259, 0, 125, 120, 0, 0, 243, 282,
	245, 276, 236, 268, 205, 258, 296, 227, 264, 53,
	0, 0, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 261, 290, 225, 263, 266, 190, 260, 0,
	194, 199, 306, 288, 219, 220, 0, 0, 0, 0,
	0, 0, 0, 242, 246, 273, 234, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 257, 0, 0,
	0, 201, 196, 240, 0, 0, 0, 204, 0, 218,
	274, 0, 0, 0, 283, 235, 134, 289, 233, 232,
	297, 270, 0, 280, 215, 224, 106, 222, 124, 265,
	132, 102, 286, 281, 255, 238, 239, 195, 0, 272,
	108, 114, 211, 262, 130, 131, 107, 135, 200, 303,
	103, 611, 302, 121, 612, 129, 287, 256, 252, 197,
	285, 254, 251, 117, 110, 0, 193, 0, 126, 294,
	308, 210, 284, 0, 0, 0, 0, 0, 128, 202,
	113, 208, 209, 206, 207, 248, 249, 298, 299, 300,
	275, 203, 0, 0, 278, 253, 100, 0, 118, 305,
	123, 112, 133, 0, 0, 0, 0, 0, 0, 221,
	304, 271, 269, 291, 0, 111, 127, 0, 0, 0,
	0, 0, 116, 0, 0, 136, 137, 139, 138, 140,
	104, 292, 277, 237, 295, 213, 228, 307, 230, 231,
	267, 198, 247, 122, 226, 101, 0, 115, 0, 0,
	0, 0, 293, 244, 0, 216, 191, 223, 192, 214,
	241, 109, 212, 279, 250, 229, 0, 301, 119, 259,
	0, 125, 120, 0, 0, 243, 282, 245, 276, 236,
	268, 205, 258, 296, 227, 264, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 261,
	290, 225, 263, 266, 190, 260, 0, 194, 199, 306,
	288, 219, 220, 0, 0, 0, 0, 0, 0, 0,
	242, 246, 273, 234, 0, 0, 0, 0, 0, 0,
	1116, 0, 217, 0, 257, 0, 0, 0, 201, 196,
	240, 0, 0, 0, 204, 0, 218, 274, 0, 0,
	0, 283, 235, 134, 289, 233, 232, 297, 270, 0,
	280, 215, 224, 106, 222, 124, 265, 132, 102, 286,
	281, 255, 238, 239, 195, 0, 272, 108, 114, 211,
	262, 130, 131, 107, 135, 200, 303, 103, 611, 302,
	121, 612, 129, 287, 256, 252, 197, 285, 254, 251,
	117, 110, 0, 193, 0, 126, 294, 308, 210, 284,
	0, 0, 0, 0, 0, 128, 202, 113, 208, 209,
	206, 207, 248, 249, 298, 299, 300, 275, 203, 0,
	0, 278, 253, 100, 0, 118, 305, 123, 112, 133,
	0, 0, 0, 0, 0, 0, 221, 304, 271, 269,
	291, 0, 111, 127, 0, 0, 0, 0, 0, 116,
	0, 0, 136, 137, 139, 138, 140, 104, 292, 277,
	237, 295, 213, 228, 307, 230, 231, 267, 198, 247,
	122, 226, 101, 0, 115, 0, 0, 0, 0, 293,
	244, 0, 216, 191, 223, 192, 214, 241, 109, 212,
	279, 250, 229, 0, 301, 119, 259, 0, 125, 120,
	0, 0, 243, 282, 245, 276, 236, 268, 205, 258,
	296, 227, 264, 0, 0, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 261, 290, 225, 263,
	266, 190, 260, 0, 194, 199, 306, 288, 219, 220,
	0, 0, 0, 0, 0, 0, 0, 242, 246, 273,
	234, 0, 0, 0, 0, 0, 0, 988, 0, 217,
	0, 257, 0, 0, 0, 201, 196, 240, 0, 0,
	0, 204, 0, 218, 274, 0, 0, 0, 283, 235,
	134, 289, 233, 232, 297, 270, 0, 280, 215, 224,
	106, 222, 124, 265, 132, 102, 286, 281, 255, 238,
	239, 195, 0, 272, 108, 114, 211, 262, 130, 131,
	107, 135, 200, 303, 103, 611, 302, 121, 612, 129,
	287, 256, 252, 197, 285, 254, 251, 117, 110, 0,
	193, 0, 126, 294, 308, 210, 284, 0, 0, 0,
	0, 0, 128, 202, 113, 208, 209, 206, 207, 248,
	249, 298, 299, 300, 275, 203, 0, 0, 278, 253,
	100, 0, 118, 305, 123, 112, 133, 0, 0, 0,
	0, 0, 0, 221, 304, 271, 269, 291, 0, 111,
	127, 0, 0, 0, 0, 0, 116, 0, 0, 136,
	137, 139, 138, 140, 104, 292, 277, 237, 295, 213,
	228, 307, 230, 231, 267, 198, 247, 122, 226, 101,
	0, 115, 0, 0, 0, 0, 293, 244, 0, 216,
	191, 223, 192, 214, 241, 109, 212, 279, 250, 229,
	0, 301, 119, 259, 0, 125, 120, 0, 0, 243,
	282, 245, 276, 236, 268, 205, 258, 296, 227, 264,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 261, 290, 225, 263, 266, 190, 260,
	0, 194, 199, 306, 288, 219, 220, 0, 0, 0,
	0, 0, 0, 0, 242, 246, 273, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 257, 0,
	0, 0, 201, 196, 240, 0, 0, 0, 204, 0,
	218, 274, 0, 0, 0, 283, 235, 134, 289, 233,
	232, 297, 270, 0, 280, 215, 224, 106, 222, 124,
	265, 132, 102, 286, 281, 255, 238, 239, 195, 0,
	272, 108, 114, 211, 262, 130, 131, 107, 135, 200,
	303, 103, 186, 302, 121, 185, 129, 287, 256, 252,
	197, 285, 254, 251, 117, 110, 0, 193, 0, 126,
	294, 308, 210, 284, 0, 0, 0, 0, 0, 128,
	202, 113, 208, 209, 206, 207, 248, 249, 298, 299,
	300, 275, 203, 0, 0, 278, 253, 100, 0, 118,
	305, 123, 112, 133, 0, 0, 0, 0, 0, 0,
	221, 304, 271, 269, 291, 0, 111, 127, 0, 0,
	0, 0, 0, 116, 0, 187, 136, 137, 139, 138,
	140, 104, 292, 277, 237, 295, 213, 228, 307, 230,
	231, 267, 198, 247, 122, 226, 101, 0, 115, 0,
	0, 0, 0, 293, 244, 0, 216, 191, 223, 192,
	214, 241, 109, 212, 279, 250, 229, 0, 301, 119,
	259, 0, 125, 120, 0, 0, 243, 282, 245, 276,
	236, 268, 205, 258, 296, 227, 264, 0, 0, 0,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	261, 290, 225, 263, 266, 190, 260, 0, 194, 199,
	306, 288, 219, 220, 0, 0, 0, 0, 0, 0,
	0, 242, 246, 273, 234, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 257, 0, 0, 0, 201,
	196, 240, 0, 0, 0, 204, 0, 218, 274, 0,
	0, 0, 283, 235, 134, 289, 233, 232, 297, 270,
	0, 280, 215, 224, 106, 222, 124, 265, 132, 102,
	286, 281, 255, 238, 239, 195, 0, 272, 108, 114,
	211, 262, 130, 131, 107, 135, 200, 303, 103, 611,
	302, 121, 612, 129, 287, 256, 252, 197, 285, 254,
	251, 117, 110, 0, 193, 0, 126, 294, 308, 210,
	284, 0, 0, 0, 0, 0, 128, 202, 113, 208,
	209, 206, 207, 248, 249, 298, 299, 300, 275, 203,
	0, 0, 278, 253, 100, 0, 118, 305, 123, 112,
	133, 0, 0, 0, 0, 0, 0, 221, 304, 271,
	269, 291, 0, 111, 127, 0, 0, 0, 0, 0,
	116, 0, 0, 136, 137, 139, 138, 140, 104, 292,
	277, 237, 295, 213, 228, 307, 230, 231, 267, 198,
	247, 122, 226, 101, 0, 115, 0, 0, 0, 0,
	293, 244, 0, 216, 191, 223, 192, 214, 241, 109,
	212, 279, 250, 229, 0, 301, 119, 259, 0, 125,
	120, 0, 0, 243, 282, 245, 276, 236, 268, 205,
	258, 296, 227, 264, 0, 0, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 261, 290, 225,
	263, 266, 190, 260, 0, 194, 199, 306, 288, 219,
	220, 0, 0, 0, 0, 0, 0, 0, 242, 246,
	273, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 257, 0, 0, 0, 201, 196, 240, 0,
	0, 0, 204, 0, 218, 274, 0, 0, 0, 283,
	235, 134, 289, 233, 232, 297, 270, 0, 280, 215,
	224, 106, 222, 124, 265, 132, 102, 286, 281, 255,
	238, 239, 195, 0, 272, 108, 114, 211, 262, 130,
	131, 107, 135, 200, 303, 103, 611, 302, 121, 612,
	129, 287, 256, 252, 197, 285, 254, 251, 117, 110,
	0, 193, 0, 126, 294, 308, 210, 284, 0, 0,
	0, 0, 0, 128, 202, 113, 208, 209, 206, 207,
	248, 249, 298, 299, 300, 275, 203, 0, 0, 278,
	253, 100, 0, 118, 305, 123, 112, 133, 0, 0,
	0, 0, 0, 0, 221, 304, 271, 269, 291, 0,
	111, 127, 0, 0, 0, 0, 0, 116, 0, 0,
	136, 137, 139, 138, 140, 104, 292, 277, 237, 295,
	213, 228, 307, 230, 231, 267, 198, 247, 122, 226,
	101, 0, 115, 0, 0, 0, 0, 293, 244, 0,
	216, 191, 223, 192, 214, 241, 109, 212, 279, 250,
	229, 0, 301, 119, 259, 0, 125, 120, 0, 0,
	243, 282, 245, 276, 236, 268, 205, 258, 296, 227,
	264, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 261, 290, 225, 263, 266, 190,
	260, 0, 194, 199, 306, 288, 219, 220, 0, 0,
	0, 0, 0, 0, 0, 242, 246, 273, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 257,
	0, 0, 0, 201, 196, 240, 0, 0, 0, 204,
	0, 218, 274, 0, 0, 0, 283, 235, 134, 289,
	233, 232, 297, 270, 0, 280, 215, 224, 106, 222,
	124, 265, 132, 102, 286, 281, 255, 238, 239, 195,
	0, 272, 108, 114, 211, 262, 130, 131, 107, 135,
	200, 303, 103, 611, 302, 121, 612, 129, 287, 256,
	252, 197, 285, 254, 251, 117, 110, 0, 193, 0,
	126, 294, 308, 210, 284, 0, 0, 0, 0, 0,
	128, 202, 113, 208, 209, 206, 207, 248, 249, 298,
	299, 300, 275, 203, 0, 0, 278, 253, 100, 0,
	118, 305, 123, 112, 133, 0, 0, 0, 0, 0,
	0, 221, 304, 271, 269, 291, 0, 111, 127, 122,
	0, 101, 0, 115, 116, 0, 0, 136, 137, 139,
	138, 140, 104, 367, 0, 0, 0, 109, 366, 0,
	0, 0, 0, 403, 119, 0, 0, 125, 120, 0,
	0, 0, 0, 396, 397, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 416, 384, 383, 385, 386,
	387, 388, 0, 0, 105, 389, 390, 391, 0, 0,
	0, 364, 377, 0, 402, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 374, 375, 772, 0, 0, 0,
	414, 0, 376, 0, 0, 373, 378, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 412, 0, 0, 0, 0, 0, 0, 106,
	0, 124, 0, 132, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 114, 0, 0, 130, 131, 107,
	135, 0, 0, 103, 0, 0, 121, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 117, 110, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 0, 113, 404, 413, 410, 411, 408, 409,
	407, 406, 405, 415, 398, 399, 401, 0, 400, 100,
	0, 118, 0, 123, 112, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 127,
	122, 0, 101, 0, 115, 116, 0, 0, 136, 137,
	139, 138, 140, 104, 367, 0, 0, 0, 109, 366,
	0, 0, 0, 0, 403, 119, 0, 0, 125, 120,
	0, 0, 0, 0, 396, 397, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 358, 416, 384, 383, 385,
	386, 387, 388, 0, 0, 105, 389, 390, 391, 0,
	0, 0, 364, 377, 0, 402, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 374, 375, 0, 0, 0,
	0, 414, 0, 376, 0, 0, 373, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	106, 0, 124, 0, 132, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 114, 0, 0, 130, 131,
	107, 135, 0, 0, 103, 0, 0, 121, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 117, 110, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 0, 113, 404, 413, 410, 411, 408,
	409, 407, 406, 405, 415, 398, 399, 401, 0, 400,
	100, 0, 118, 0, 123, 112, 133, 0, 0, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	127, 122, 0, 101, 0, 115, 116, 0, 0, 136,
	137, 139, 138, 140, 104, 367, 0, 0, 0, 109,
	366, 0, 0, 0, 0, 403, 119, 0, 0, 125,
	120, 0, 0, 0, 0, 396, 397, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 416, 384, 383,
	385, 386, 387, 388, 0, 0, 105, 389, 390, 391,
	0, 0, 0, 364, 377, 0, 402, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 374, 375, 0, 0,
	0, 0, 414, 0, 376, 0, 0, 373, 378, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 412, 0, 0, 0, 0, 0,
	0, 106, 0, 124, 0, 132, 102, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 114, 0, 0, 130,
	131, 107, 135, 0, 0, 103, 0, 0, 121, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 117, 110,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 0, 113, 404, 413, 410, 411,
	408, 409, 407, 406, 405, 415, 398, 399, 401, 0,
	400, 100, 0, 118, 0, 123, 112, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 127, 122, 0, 101, 0, 115, 116, 0, 0,
	136, 137, 139, 138, 140, 104, 367, 0, 0, 0,
	109, 366, 0, 0, 0, 0, 403, 119, 0, 0,
	125, 120, 0, 0, 0, 0, 396, 397, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 416, 384,
	383, 385, 386, 387, 388, 0, 0, 105, 389, 390,
	391, 0, 0, 0, 364, 377, 0, 402, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 374, 375, 0,
	0, 0, 0, 414, 0, 376, 0, 0, 373, 378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 412, 0, 0, 0, 0,
	0, 0, 106, 0, 124, 0, 132, 102, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 114, 0, 0,
	130, 131, 107, 135, 0, 0, 103, 0, 0, 121,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 117,
	110, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 113, 404, 413, 410,
	411, 408, 409, 407, 406, 405, 415, 398, 399, 401,
	0, 400, 100, 0, 118, 0, 123, 112, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 127, 122, 0, 101, 0, 115, 116, 0,
	0, 136, 137, 139, 138, 140, 104, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 403, 119, 0,
	0, 125, 120, 0, 0, 0, 0, 396, 397, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 416,
	384, 383, 385, 386, 387, 388, 0, 0, 105, 389,
	390, 391, 0, 0, 0, 0, 377, 0, 402, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 374, 375,
	0, 0, 0, 0, 414, 0, 376, 0, 0, 373,
	378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 412, 0, 0, 0,
	0, 0, 0, 106, 0, 124, 0, 132, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 114, 0,
	0, 130, 131, 107, 135, 0, 0, 103, 0, 0,
	121, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	117, 110, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 113, 404, 413,
	410, 411, 408, 409, 407, 406, 405, 415, 398, 399,
	401, 0, 400, 100, 0, 118, 0, 123, 112, 133,
	0, 0, 0, 122, 0, 101, 0, 115, 0, 0,
	0, 0, 111, 127, 0, 0, 0, 0, 0, 116,
	0, 109, 136, 137, 139, 138, 140, 104, 119, 0,
	0, 125, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 527, 526, 536, 537, 529, 530,
	531, 532, 533, 534, 535, 528, 0, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 124, 0, 132, 102, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 114, 0,
	0, 130, 131, 107, 135, 0, 0, 103, 0, 0,
	121, 0, 129, 0, 122, 0, 101, 0, 115, 0,
	117, 110, 0, 0, 0, 126, 0, 903, 0, 0,
	0, 0, 109, 0, 0, 128, 0, 113, 0, 119,
	0, 0, 125, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 118, 0, 123, 112, 133,
	188, 0, 905, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 111, 127, 515, 514, 0, 0, 0, 116,
	0, 0, 136, 137, 139, 138, 140, 104, 0, 0,
	0, 516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 124, 0, 132, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 114,
	0, 0, 130, 131, 107, 135, 0, 0, 103, 0,
	0, 121, 0, 129, 0, 122, 0, 101, 0, 115,
	0, 117, 110, 0, 0, 0, 126, 0, 1092, 0,
	0, 0, 0, 109, 0, 0, 128, 0, 113, 0,
	119, 0, 0, 125, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 118, 0, 123, 112,
	133, 98, 0, 1094, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 111, 127, 0, 0, 0, 0, 0,
	116, 0, 0, 136, 137, 139, 138, 140, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 106, 0, 124, 0, 132,
	102, 0, 122, 0, 101, 0, 115, 0, 0, 108,
	114, 0, 0, 130, 131, 107, 135, 0, 0, 103,
	109, 0, 121, 0, 129, 0, 0, 119, 0, 0,
	125, 120, 117, 110, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 128, 188, 113,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 118, 0, 123,
	112, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 127, 0, 0, 0, 0,
	0, 116, 0, 0, 136, 137, 139, 138, 140, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 124, 0, 132, 102, 0, 122,
	0, 101, 0, 115, 0, 0, 108, 114, 0, 0,
	130, 131, 107, 135, 0, 0, 103, 109, 0, 121,
	0, 129, 0, 0, 119, 0, 0, 125, 120, 117,
	110, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 188, 113, 0, 593, 0,
	0, 594, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 118, 0, 123, 112, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 127, 0, 0, 0, 0, 0, 116, 0,
	0, 136, 137, 139, 138, 140, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 124, 0, 132, 102, 0, 122, 0, 101, 0,
	115, 0, 0, 108, 114, 0, 0, 130, 131, 107,
	135, 0, 0, 103, 109, 440, 121, 0, 129, 0,
	0, 119, 0, 0, 125, 120, 117, 110, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 188, 113, 439, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 118, 0, 123, 112, 133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 127,
	0, 0, 0, 0, 0, 116, 0, 0, 136, 137,
	139, 138, 140, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 124, 0,
	132, 102, 0, 122, 0, 101, 0, 115, 0, 0,
	108, 114, 0, 0, 130, 131, 107, 135, 0, 0,
	103, 109, 0, 121, 0, 129, 0, 0, 119, 0,
	0, 125, 120, 117, 110, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 98,
	113, 1094, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 118, 0,
	123, 112, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 127, 0, 0, 0,
	0, 0, 116, 0, 0, 136, 137, 139, 138, 140,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 124, 0, 132, 102, 0,
	122, 0, 101, 0, 115, 0, 0, 108, 114, 0,
	0, 130, 131, 107, 135, 0, 0, 103, 109, 0,
	121, 0, 129, 0, 0, 119, 0, 0, 125, 120,
	117, 110, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 128, 98, 113, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 118, 0, 123, 112, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 127, 0, 0, 0, 0, 0, 116,
	0, 0, 136, 137, 139, 138, 140, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 124, 0, 132, 102, 0, 122, 0, 101,
	0, 115, 0, 0, 108, 114, 0, 0, 130, 131,
	107, 135, 0, 0, 103, 109, 0, 121, 0, 129,
	0, 0, 119, 0, 0, 125, 120, 117, 110, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 188, 113, 905, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 118, 0, 123, 112, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	127, 0, 0, 0, 0, 0, 116, 0, 0, 136,
	137, 139, 138, 140, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 124,
	0, 132, 102, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 114, 0, 0, 130, 131, 107, 135, 0,
	0, 103, 0, 0, 121, 0, 129, 0, 122, 0,
	101, 0, 115, 0, 117, 110, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 429, 109, 0, 0, 128,
	0, 113, 0, 119, 0, 0, 125, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 118,
	0, 123, 112, 133, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 111, 127, 0, 0,
	0, 0, 0, 116, 0, 0, 136, 137, 139, 138,
	140, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	124, 0, 132, 102, 0, 122, 0, 101, 0, 115,
	0, 0, 108, 114, 0, 0, 130, 131, 107, 135,
	0, 0, 103, 109, 0, 121, 0, 129, 0, 0,
	119, 0, 0, 125, 120, 117, 110, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 188, 113, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	118, 0, 123, 112, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 127, 0,
	0, 0, 0, 0, 116, 0, 0, 136, 137, 139,
	138, 140, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 124, 0, 132,
	102, 0, 122, 0, 101, 0, 115, 0, 0, 108,
	114, 0, 0, 130, 131, 107, 135, 0, 0, 103,
	109, 0, 121, 0, 129, 0, 0, 119, 0, 0,
	125, 120, 117, 110, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 128, 416, 113,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 118, 0, 123,
	112, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 127, 0, 0, 0, 0,
	0, 116, 0, 0, 136, 137, 139, 138, 140, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 124, 0, 132, 102, 0, 122,
	0, 101, 0, 115, 0, 0, 108, 114, 0, 0,
	130, 131, 107, 135, 0, 0, 103, 109, 0, 121,
	0, 129, 0, 0, 119, 0, 0, 125, 120, 117,
	110, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 98, 113, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 118, 0, 123, 112, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 127, 0, 0, 0, 0, 0, 116, 0,
	0, 136, 137, 139, 138, 140, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 124, 0, 132, 102, 0, 122, 0, 101, 0,
	115, 0, 0, 108, 114, 0, 0, 130, 131, 107,
	135, 0, 0, 103, 109, 0, 121, 0, 129, 0,
	0, 119, 0, 0, 125, 120, 117, 110, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 128, 314, 113, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 118, 0, 123, 112, 133, 0, 0, 24, 51,
	26, 27, 0, 0, 0, 0, 0, 0, 111, 127,
	0, 0, 0, 0, 0, 116, 0, 0, 136, 137,
	139, 138, 140, 104, 0, 46, 0, 0, 0, 28,
	0, 0, 36, 0, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 124, 37,
	132, 102, 53, 0, 0, 0, 0, 0, 0, 0,
	108, 114, 0, 0, 130, 131, 107, 135, 0, 0,
	103, 0, 0, 121, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 117, 110, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	30, 31, 32, 0, 34, 0, 100, 0, 118, 0,
	123, 112, 133, 0, 0, 0, 35, 47, 39, 0,
	0, 48, 49, 33, 0, 111, 127, 0, 0, 0,
	0, 0, 116, 0, 0, 136, 137, 139, 138, 140,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	41, 42, 0, 44, 43, 0, 0, 0, 45,
}
var yyPact = [...]int{

	6812, -1000, -171, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 782, 821, -1000, -1000, -1000, -1000, -1000, 582,
	92, 52, -4, 90, 88, 124, 87, 6602, -1000, -1000,
	39, -1000, -156, -1000, -1000, -139, -1000, -1000, -1000, -1000,
	602, -1000, -1000, -1000, -1000, -1000, 774, 780, 613, 755,
	664, -1000, 52, 6602, 809, 2092, -137, 6729, 49, 85,
	84, 83, 49, -1000, 72, -1000, 45, 478, 45, 6602,
	6602, -62, -13, -1000, -1000, -40, -1000, -1000, -1000, -69,
	-1000, -1000, -1000, -1000, -1000, -1000, 6602, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 342, -1000, -1000, -1000, -1000, 560,
	560, -1000, 6602, -1000, -1000, -1000, -1000, -1000, 397, 716,
	4595, 4595, 782, -1000, 602, -1000, -1000, -1000, 697, -1000,
	-1000, 267, 6221, 704, 126, 6602, 555, 3040, -1000, -1000,
	-1000, 225, 5689, -1000, -1000, -1000, 702, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 779,
	778, 514, -1000, 1201, -1000, -1000, 6602, 237, 476, 455,
	446, 6602, 6602, 6602, 721, 617, 6602, -1000, -1000, 808,
	6602, 6602, -1000, -1000, 804, 807, -1000, -1000, -1000, -1000,
	-1000, 804, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4595, -1000, -1000, 139, -1000, -1000, -1000, -1000,
	817, 161, 278, -1000, 4595, 1350, 560, 560, -1000, -1000,
	108, -1000, -1000, 4806, 4806, 4806, 4806, 4806, 4806, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 560, 122, -1000, 4384, 560, 560, 560, 560,
	560, 560, 4595, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, -1000, -1000, 557, -1000,
	256, 774, 397, 664, 5562, 649, -1000, -1000, 595, 6602,
	-1000, 6475, 3751, 802, 3040, 555, 4595, 95, -1000, -1000,
	-1000, -1000, -121, 560, 37, 227, 611, -54, -1000, -1000,
	565, -1000, 565, 565, 565, 565, -8, -8, -8, -8,
	-1000, -1000, -1000, -1000, -1000, 608, -1000, 565, 565, 565,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 607, 607,
	607, 566, 566, 708, 718, 616, 612, 610, -1000, 163,
	546, -1000, -1000, 6602, -1000, 774, -65, -1000, -1000, 257,
	6602, 6602, -1000, -1000, -1000, -1000, 512, 283, -1000, 6602,
	-1000, -1000, -1000, 677, 4595, 4595, 347, 4595, 4595, 187,
	4806, 297, 233, 4806, 4806, 4806, 4806, 4806, 4806, 4806,
	4806, 4806, 4806, 4806, 4806, 4806, 4806, 4806, 340, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 437, -1000, 602,
	496, 496, 117, 117, 117, 117, 117, 5006, 1831, 3514,
	397, 4384, 3962, 3962, 4595, 4595, 3962, 727, 235, 283,
	6348, -1000, 397, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3962, 3962, 3962, 3962, 4595, -1000, -1000, -1000, 716, -1000,
	727, 806, -1000, 689, 688, 3962, -1000, 594, 6475, 560,
	-1000, 5435, -1000, 593, -1000, 223, -1000, 116, -1000, -1000,
	-1000, -1000, -1000, 782, 4595, -1000, 283, -1000, 435, 560,
	560, 6729, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000,
	211, 211, -21, -1000, -1000, 211, -1000, -1000, -1000, 753,
	165, 433, 166, 166, -1000, -1000, -1000, 611, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 262, 82, -1000,
	743, -1000, 734, 364, 815, -56, -1000, -1000, 338, -8,
	-8, -1000, -1000, 95, 701, 95, 95, 95, 363, -1000,
	-1000, -1000, -1000, 333, -1000, -1000, -1000, 324, -1000, -1000,
	708, -1000, 40, -1000, 6602, 6602, 6602, -1000, 174, 214,
	54, 35, 34, 32, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6602, -1000, -1000, 362, -1000, -1000, -1000, 358,
	4595, -1000, 257, -1000, 4595, -1000, -1000, 674, 187, 199,
	-1000, -1000, 300, -1000, -1000, 283, 283, 922, -1000, -1000,
	-1000, -1000, 297, 4806, 4806, 4806, 1144, 922, 1422, 484,
	1293, 117, 305, 305, 147, 147, 147, 147, 147, 660,
	660, -1000, -1000, -1000, 397, -1000, -1000, -1000, 397, 3962,
	545, -1000, -1000, 5157, 112, 560, 106, -1000, -1000, 397,
	444, 444, 145, 264, 444, 3962, 266, -1000, 4595, 397,
	-1000, 444, 397, 444, 444, -1000, -1000, 6602, -1000, -1000,
	-1000, -1000, 585, -1000, 710, 519, 539, -1000, -1000, 4173,
	397, 505, 104, 782, 6475, 4595, 3514, 774, 283, -1000,
	6729, 6729, 397, -1000, 354, -1000, 332, 211, -1000, 700,
	321, 606, 430, 604, 596, 406, 399, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -78, -1000, -1000,
	515, 95, 95, -1000, 184, -1000, -1000, -1000, 475, -1000,
	544, 472, -1000, 211, 211, 560, 560, 560, -1000, 6602,
	-1000, -1000, -1000, 389, -16, 582, 386, 6729, -1000, -1000,
	-1000, -1000, 283, -1000, 283, -1000, -1000, -1000, -1000, -1000,
	-1000, 1144, 922, 1199, -1000, 4806, 4806, -1000, -1000, 444,
	3962, -1000, -1000, 6070, -1000, -1000, 2803, 3962, 3277, -1000,
	-1000, -1000, 81, 340, 81, -97, 554, 229, -1000, 4595,
	242, -1000, -1000, -1000, -1000, -1000, -1000, 802, 5943, 731,
	-1000, 560, -1000, -1000, 592, 6348, 6348, 774, -1000, 283,
	-1000, -1000, 397, 397, 2329, -1000, -1000, -1000, -1000, 332,
	-1000, -1000, 6348, 581, 6348, 6348, 580, 567, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 350, 320, -1000, 314, 388,
	194, 6348, 6348, 6348, -1000, -1000, -1000, 696, -1000, -1000,
	-1000, -1000, 4806, 922, 922, -1000, -1000, -1000, -1000, 101,
	397, -1000, 397, 565, 565, -1000, 565, 566, -1000, 565,
	17, 565, 15, 397, 397, 560, -94, -1000, 283, 4595,
	787, 542, 790, -1000, -1000, -1000, 725, 1498, 5308, 812,
	-1000, 560, -1000, 602, 70, -1000, -1000, -132, 560, -1000,
	-1000, -1000, -1000, 442, -1000, 565, 6348, 429, 427, 6348,
	6348, -1000, 486, 424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 423, 423, 423, 382, 922, 2566, -1000, -1000, -1000,
	71, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4806,
	397, 306, 283, 784, 777, 5943, 5943, 5943, 5943, -1000,
	661, 657, -1000, 644, 640, 629, 6602, -1000, 416, 1498,
	114, -1000, 5816, -1000, -1000, 6475, 539, 397, 6348, 2329,
	296, -138, -1000, 6348, -1000, 414, -1000, -1000, 410, 396,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 703,
	-1000, -1000, -1000, 4595, 4595, 790, 586, 726, -1000, -1000,
	-1000, -1000, 656, -1000, 630, -1000, -1000, -1000, -1000, -1000,
	77, 74, 60, -1000, 538, -1000, -1000, -1000, -1000, 394,
	-1000, 369, -1000, -1000, 148, 148, -1000, -1000, 148, 68,
	359, 397, 63, -107, 283, 521, 4595, 4595, -1000, -1000,
	560, 560, 560, -138, 2329, 687, 148, -1000, -1000, -1000,
	211, 298, 59, 68, 359, 713, 713, -1000, -1000, 763,
	713, -1000, -1000, 668, -101, -125, 283, 283, 6348, 6348,
	6348, -1000, -1000, 154, 277, -1000, -1000, -1000, -1000, -1000,
	211, 211, 766, -1000, 663, -1000, 380, -1000, 380, 380,
	560, -1000, 388, 388, -1000, -103, -1000, 6348, -1000, -1000,
	-1000, -1000, -1000, -108, -1000, -127, -1000,
}
var yyPgo = [...]int{

	0, 1063, 1061, 1059, 1058, 1056, 1055, 1054, 19, 672,
	1051, 1048, 1046, 1042, 1039, 1036, 1033, 1017, 1016, 1015,
	1013, 1012, 1011, 1010, 1009, 130, 1008, 1004, 1003, 61,
	1002, 63, 1001, 999, 998, 35, 67, 30, 49, 142,
	997, 32, 29, 17, 996, 995, 15, 994, 1142, 993,
	65, 992, 991, 50, 990, 987, 980, 2, 31, 978,
	976, 971, 970, 72, 885, 969, 966, 964, 963, 951,
	935, 48, 11, 23, 10, 28, 934, 106, 18, 933,
	43, 932, 930, 928, 926, 45, 925, 59, 923, 39,
	60, 922, 54, 14, 41, 127, 62, 920, 918, 917,
	546, 914, 321, 370, 911, 51, 908, 37, 0, 12,
	34, 42, 907, 52, 1000, 40, 22, 906, 905, 44,
	3, 26, 903, 24, 902, 901, 897, 896, 895, 894,
	232, 893, 892, 890, 889, 888, 887, 886, 884, 883,
	21, 47, 25, 53, 7, 56, 882, 881, 880, 69,
	16, 879, 877, 876, 875, 869, 46, 868, 75, 36,
	866, 865, 864, 58, 9, 33, 13, 8, 27, 4,
	5, 862, 861, 858, 855, 852, 850, 1, 848, 847,
	55, 838, 836, 57, 6, 834, 832, 831, 115, 337,
	828, 145,
}
var yyR1 = [...]int{

	0, 186, 187, 187, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 122,
	122, 185, 185, 184, 139, 139, 16, 16, 16, 16,
	16, 16, 16, 16, 176, 176, 177, 177, 172, 170,
	170, 168, 168, 174, 174, 166, 166, 171, 171, 169,
	169, 167, 167, 173, 173, 181, 181, 182, 182, 183,
	183, 145, 145, 144, 144, 143, 143, 146, 146, 146,
	19, 159, 161, 161, 162, 162, 163, 163, 163, 163,
	163, 138, 142, 142, 134, 135, 136, 137, 137, 160,
	160, 160, 156, 113, 113, 124, 124, 124, 178, 178,
	179, 179, 180, 180, 180, 180, 180, 180, 180, 127,
	127, 125, 125, 125, 125, 125, 125, 125, 126, 126,
	126, 126, 126, 128, 128, 128, 128, 128, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 155, 155, 130, 130, 149, 149, 150, 150,
	150, 147, 147, 148, 148, 151, 151, 131, 131, 131,
	131, 131, 132, 152, 140, 140, 140, 141, 141, 153,
	153, 154, 154, 133, 157, 157, 157, 157, 157, 157,
	158, 158, 165, 165, 164, 17, 17, 17, 17, 17,
	17, 17, 17, 18, 18, 18, 54, 54, 1, 20,
	2, 3, 4, 4, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 34,
	34, 50, 50, 51, 51, 52, 52, 53, 53, 53,
	24, 22, 23, 23, 23, 23, 190, 25, 26, 26,
	27, 27, 27, 31, 31, 31, 29, 29, 30, 30,
	37, 37, 36, 36, 38, 38, 38, 38, 112, 112,
	112, 111, 111, 40, 40, 41, 41, 42, 42, 43,
	43, 43, 55, 44, 44, 44, 44, 118, 118, 117,
	117, 117, 116, 116, 45, 45, 45, 45, 46, 46,
	46, 46, 47, 47, 49, 49, 48, 48, 56, 56,
	56, 56, 57, 57, 58, 58, 39, 39, 39, 39,
	39, 39, 39, 101, 101, 60, 60, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 70, 70, 70,
	70, 70, 70, 61, 61, 61, 61, 61, 61, 61,
	35, 35, 71, 71, 71, 77, 72, 72, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 68, 68,
	68, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	67, 67, 67, 67, 67, 67, 67, 67, 191, 191,
	69, 69, 69, 69, 32, 32, 32, 32, 32, 121,
	121, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 81, 81, 33, 33, 79, 79,
	80, 82, 82, 78, 78, 78, 63, 63, 63, 63,
	63, 63, 63, 65, 65, 65, 83, 83, 84, 84,
	85, 85, 86, 86, 87, 88, 88, 88, 89, 89,
	89, 89, 90, 90, 90, 62, 62, 62, 62, 62,
	62, 91, 91, 91, 91, 92, 92, 73, 73, 75,
	75, 74, 76, 93, 93, 94, 95, 95, 96, 96,
	98, 98, 98, 97, 97, 97, 99, 99, 102, 102,
	103, 103, 100, 100, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 105, 105, 105, 106, 106, 175,
	175, 109, 109, 110, 110, 114, 114, 115, 115, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 188, 189, 119, 120, 120, 120,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 0, 2, 2, 10, 12, 8,
	5, 11, 11, 11, 1, 1, 1, 1, 2, 3,
	2, 0, 2, 1, 1, 0, 2, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 1, 2, 4,
	4, 0, 1, 0, 1, 1, 2, 1, 1, 1,
	4, 4, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 3, 1, 1, 3, 3, 4, 1, 1, 1,
	3, 3, 3, 1, 1, 3, 1, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 1, 2, 2, 2, 2,
	2, 2, 3, 1, 0, 3, 3, 0, 2, 2,
	1, 2, 1, 2, 5, 7, 6, 6, 7, 7,
	1, 1, 1, 3, 2, 6, 7, 7, 7, 9,
	7, 7, 7, 4, 5, 4, 1, 3, 3, 3,
	2, 2, 3, 4, 2, 3, 2, 2, 4, 4,
	3, 6, 3, 6, 5, 5, 3, 3, 5, 6,
	3, 3, 3, 5, 3, 3, 3, 3, 3, 0,
	3, 0, 2, 0, 1, 1, 1, 0, 2, 2,
	4, 2, 2, 2, 2, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 0, 1,
	0, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 5, 5, 3, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 1, 3, 0, 2, 1, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -186, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 37, -19,
	118, 119, 120, 141, 122, 134, 40, 57, 218, 136,
	225, 228, 229, 232, 231, 236, 33, 135, 139, 140,
	-188, 7, 201, 60, -187, 242, -85, 14, -27, 5,
	-25, -190, -25, -25, -25, -25, -159, 60, 193, -175,
	21, 25, 125, 26, -100, 129, 125, 126, 193, 125,
	125, 187, 118, 182, 220, -51, 222, 223, 189, 125,
	224, 185, 221, 184, 63, 39, 125, -114, 63, -108,
	207, 19, 142, 161, 241, 72, 137, 157, 151, 35,
	175, 226, 212, 191, 152, 21, 233, 174, 209, 42,
	46, 164, 17, 211, 139, 45, 179, 227, 189, 166,
	155, 156, 141, 213, 127, 158, 236, 237, 239, 238,
	240, -119, -119, 66, 211, -119, 230, -119, -119, 237,
	239, 238, 240, 241, -119, -119, -119, -119, -8, -89,
	16, 15, -11, -9, -188, 6, 28, 29, -31, 47,
	48, -26, -100, -48, -114, 10, -95, -122, -96, 234,
	233, -110, -98, -109, -107, 165, 162, 235, 63, -108,
	78, 30, 32, 177, 81, 148, 113, 170, 15, 82,
	159, 112, 190, 202, 118, 55, 194, 195, 192, 193,
	182, 153, 36, 9, 33, 135, 29, 106, 120, 85,
	86, 220, 138, 31, 136, 75, 18, 58, 10, 39,
	12, 13, 130, 129, 97, 126, 53, 7, 146, 147,
	114, 34, 94, 49, 27, 51, 95, 16, 196, 197,
	38, 173, 169, 206, 172, 145, 168, 108, 56, 43,
	79, 73, 154, 76, 59, 140, 77, 14, 54, 223,
	132, 222, 150, 96, 121, 201, 52, 6, 205, 37,
	134, 144, 50, 125, 183, 171, 143, 167, 84, 128,
	74, 224, 5, 26, 180, 8, 57, 131, 198, 199,
	200, 41, 163, 160, 221, 210, 83, 11, 181, 214,
	219, -160, -156, -113, 63, -108, -103, 130, 126, 126,
	126, -103, 125, -102, 130, 63, -102, -48, -48, 186,
	125, 193, -119, -119, 183, -52, 190, 191, -119, -119,
	-119, 189, -119, -119, -119, -119, -119, -48, -119, 66,
	-119, -74, -188, -74, -119, -48, -119, -189, 62, -90,
	18, 38, -39, -59, 79, -64, 36, 31, -63, -60,
	-78, -76, -77, 113, 102, 103, 110, 80, 114, -68,
	-66, -67, -69, 65, 64, 66, 67, 68, 69, 73,
	74, 75, -109, -114, -74, -188, 51, 52, 202, 203,
	206, 204, 82, 41, 192, 200, 199, 198, 196, 197,
	194, 195, 130, 193, 108, 201, 63, -108, -86, -87,
	-39, -85, -8, -25, 43, -29, 29, 71, -49, 34,
	-48, 37, 115, -48, 61, -95, 87, -97, -109, 65,
	36, 37, 15, 15, 62, 61, -124, -127, -129, -128,
	-125, -126, 159, 160, 113, 163, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 137, 155, 156, 157,
	158, 142, 143, 144, 145, 146, 147, 148, 150, 151,
	152, 153, 154, -114, 79, 63, 63, 63, -48, -48,
	-54, -48, 31, 59, -114, -34, 10, -48, -48, -50,
	10, 10, -50, -119, -119, -119, -72, -39, -119, -105,
	128, 30, 8, 97, 78, 77, 94, 61, 17, -39,
	-61, 97, 79, 95, 96, 81, 99, 98, 109, 102,
	103, 104, 105, 106, 107, 108, 100, 101, 112, 87,
	88, 89, 90, 91, 92, 93, -101, -188, -77, -188,
	116, 117, -64, -64, -64, -64, -64, -64, -188, 115,
	-8, -188, -188, -188, -188, -188, -188, -188, -81, -39,
	-188, -191, -188, -191, -191, -191, -191, -191, -191, -191,
	-188, -188, -188, -188, 61, -88, 32, 33, -89, -189,
	-31, -65, -109, 66, 69, -30, 50, -62, 37, 41,
	-8, -188, -48, -93, -94, -78, -109, -114, -115, -114,
	-107, 162, 165, -58, 11, -96, -39, -141, 112, 216,
	217, -188, -161, -162, -163, -134, -135, -136, -137, -138,
	72, 226, -145, 233, 227, 177, 36, -156, -157, 132,
	26, -158, 21, 25, 126, 27, -178, -179, -180, -151,
	-131, -152, -153, -154, -133, -132, 73, 79, 36, 177,
	132, 27, 26, 72, 59, -147, 180, -130, 60, -130,
	-130, -130, -130, -140, 162, -140, -140, -140, 60, -130,
	-130, -130, -149, 60, -149, -149, -150, 60, -150, -181,
	-182, -183, -145, 31, 59, 59, 59, -104, 121, 226,
	202, 123, 120, 124, 119, 177, 162, 72, 36, 14,
	213, 63, 61, -48, -89, 188, -119, -119, -53, 95,
	11, -48, -48, -119, 61, -189, -48, 45, -39, -39,
	-70, 73, 79, 74, 75, -39, -39, -64, -71, -74,
	-77, 70, 97, 95, 96, 81, -64, -64, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -121, 63, 65, 63, -63, -63, -109, -37, 29,
	-36, -38, 104, -39, -114, -110, -115, -107, -189, -8,
	-36, -36, -39, -39, -36, -29, -79, -80, 83, -109,
	-189, -36, -37, -36, -36, -87, -90, -99, 18, 10,
	41, 41, -36, -92, 59, -93, -73, -75, -74, -188,
	-8, -91, -109, -58, 61, 87, 115, -85, -39, 63,
	-188, -188, -113, -163, -144, 87, -144, -143, 165, 162,
	-144, 27, -158, 63, 63, -158, -158, -180, 73, 65,
	66, 67, 73, 192, 27, 27, 65, 8, -148, 181,
	66, -140, -140, -141, 37, -141, -141, -141, -155, 65,
	66, 66, -183, 112, -143, -48, -48, -48, -119, -105,
	-106, 126, 27, 87, 128, 133, 133, 133, -48, -119,
	65, 65, -39, -53, -39, -119, 46, 73, 74, 75,
	-71, -64, -64, -64, -35, 138, 78, -189, -189, -36,
	61, -112, -111, 30, -109, 65, 115, -188, 115, -189,
	-189, -189, 61, 131, 30, -189, -36, -82, -80, 85,
	-39, -189, -189, -189, -189, -189, -48, -40, 10, 35,
	-92, 61, -189, -189, -189, 61, 115, -85, -94, -39,
	-110, -89, -113, -113, -189, 65, -142, 63, 65, -144,
	37, 66, 60, 63, 60, 60, 63, 63, 192, 62,
	-141, -141, 63, 113, 62, 61, 61, 62, 61, -144,
	-144, -188, -188, -188, -48, -119, 63, 162, -159, 63,
	-156, -35, 78, -64, -64, -189, -38, -111, 104, -115,
	-37, -110, -123, 113, 159, 137, 157, 153, 174, 164,
	179, 155, 180, -121, -123, 207, -85, 86, -39, 84,
	-58, -41, -42, -43, -44, -55, -77, -188, -48, 27,
	-75, 41, -8, -188, -109, -109, -89, -189, -189, -120,
	-188, -110, -142, -165, -164, -109, 60, -165, -165, 60,
	60, 65, 66, 66, -177, 63, 36, -146, 63, 113,
	36, -165, -165, -165, 37, -64, 115, -189, -189, -130,
	-130, -130, -150, -130, 147, -130, 147, -189, -189, -188,
	-33, 205, -39, -83, 12, 61, -45, -46, -47, 49,
	53, 55, 50, 51, 52, 56, -118, 30, -41, -188,
	-117, -116, 30, -114, 65, 8, -73, -8, 115, -139,
	215, -188, 62, 61, -130, -165, 62, 62, -165, -165,
	62, 62, -189, -189, -189, 63, 104, -140, 63, -64,
	-189, 65, -84, 13, 15, -42, -43, -42, -43, 49,
	49, 49, 54, 49, 54, 49, -46, -114, -189, -56,
	57, 129, 58, -116, -93, -189, -109, -120, 66, -185,
	-184, 214, -164, 62, -168, -168, 62, 62, -168, -166,
	-169, -32, 97, 210, -39, -72, 59, 59, 49, 49,
	126, 126, 126, 61, -189, 63, -168, -174, -170, -172,
	22, 72, 131, -166, -169, -167, -167, -171, -170, 210,
	-167, -170, -189, 208, 56, 211, -39, -39, -188, -188,
	-188, -184, -120, 41, -144, 65, -176, 216, 20, -173,
	38, 19, 24, 46, 209, 212, -57, -109, -57, -57,
	97, 66, -144, -144, 23, 46, -189, 61, -189, -189,
	-74, -177, -177, 210, -109, 211, 212,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 480, 0, 266, 266, 266, 266, 266, 0,
	549, 532, 0, 0, 0, 253, 0, 0, 723, 723,
	0, 723, 0, 723, 723, 0, 723, 723, 723, 723,
	0, 33, 34, 721, 1, 3, 488, 0, 0, 270,
	273, 268, 532, 0, 0, 0, 46, 0, 530, 0,
	0, 0, 530, 550, 0, 533, 528, 0, 528, 0,
	0, 0, 0, 723, 723, 0, 723, 723, 723, 0,
	723, 723, 723, 723, 723, 254, 0, 261, 555, 556,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 220, 221, 723, 0, 224, 723, 226, 227, 0,
	0, 723, 0, 723, 262, 263, 264, 265, 27, 492,
	0, 0, 480, 29, 0, 266, 271, 272, 276, 274,
	275, 267, 0, 0, 326, 0, 37, 0, 516, 39,
	-2, 0, 0, 553, 554, -2, 570, 522, 551, 552,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 595, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 0,
	0, 0, 109, 0, 113, 114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 249,
	0, 0, 236, 237, 251, 0, 255, 256, 240, 241,
	242, 251, 244, 245, 246, 247, 248, 723, 222, 723,
	225, 723, 0, 723, 230, 544, 232, 28, 722, 23,
	0, 0, 489, 336, 0, 341, 343, 0, 378, 379,
	380, 381, 382, 0, 0, 0, 0, 0, 0, 404,
	405, 406, 407, 466, 467, 468, 469, 470, 471, 472,
	345, 346, 463, 0, 512, 0, 0, 0, 0, 0,
	0, 0, 454, 0, 428, 428, 428, 428, 428, 428,
	428, 428, 0, 0, 0, 0, -2, -2, 481, 482,
	485, 488, 27, 273, 0, 278, 277, 269, 0, 0,
	325, 0, 0, 334, 0, 38, 0, 187, 523, 524,
	525, 521, 0, 0, -2, 0, 118, 171, 116, 117,
	164, 130, 164, 164, 164, 164, 184, 184, 184, 184,
	156, 157, 158, 159, 160, 0, 143, 164, 164, 164,
	147, 131, 132, 133, 134, 135, 136, 137, 166, 166,
	166, 168, 168, -2, 0, 0, 0, 0, 90, 0,
	213, 216, 529, 0, 215, 488, 0, 723, 723, 257,
	0, 0, 723, 260, 223, 228, 0, 376, 229, 0,
	545, 546, 493, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	364, 365, 366, 367, 368, 369, 342, 0, 356, 0,
	0, 0, 398, 399, 400, 401, 402, 0, 280, 0,
	27, 0, 0, 0, 0, 0, 0, 276, 0, 455,
	0, 420, 0, 421, 422, 423, 424, 425, 426, 427,
	0, 280, 0, 0, 0, 484, 486, 487, 492, 30,
	276, 0, 473, 0, 0, 0, 279, 505, 0, 0,
	-2, 0, 324, 334, 513, 0, 463, 0, 327, 557,
	558, 570, 571, 480, 0, 517, 518, 519, 0, 0,
	0, 0, 91, -2, 94, 96, 97, 98, 99, 100,
	83, 83, 0, 107, 108, 83, 82, 110, 111, 0,
	0, 0, 695, 0, 200, 201, 112, 119, 120, 122,
	123, 124, 125, 126, 127, 128, 175, 0, 0, 183,
	0, 190, 192, 0, 0, 173, 172, 129, 0, 184,
	184, 150, 151, 187, 0, 187, 187, 187, 0, 144,
	145, 146, 138, 0, 139, 140, 141, 0, 142, 50,
	-2, 77, 0, 531, 0, 0, 0, 723, 544, 0,
	541, 0, 539, 0, 534, 535, 536, 537, 538, 540,
	542, 543, 0, 214, 723, 0, 234, 235, 238, 0,
	0, 252, 257, 243, 0, 511, 723, 0, 337, 338,
	340, 357, 0, 359, 361, 490, 491, 347, 348, 372,
	373, 374, 0, 0, 0, 0, 370, 352, 0, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 392, 393,
	394, 397, 439, 440, 0, 395, 396, 403, 0, 0,
	281, 282, 284, 288, 0, 464, 0, -2, 375, 27,
	0, 0, 0, 0, 0, 0, 461, 458, 0, 0,
	429, 0, 0, 0, 0, 483, 24, 0, 526, 527,
	474, 475, 293, 31, 0, 505, 495, 507, 509, 0,
	27, 0, 501, 480, 0, 0, 0, 488, 335, 188,
	0, 0, 0, 95, 0, 84, 0, 83, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 176, 177,
	178, 179, 180, 181, 189, 191, 193, 0, 115, 174,
	0, 187, 187, 152, 0, 153, 154, 155, 0, 162,
	0, 0, 78, 83, 83, 0, 0, 0, 205, 0,
	723, 547, 548, 0, 0, 0, 0, 0, 217, 233,
	250, 258, 259, 239, 377, 231, 494, 358, 360, 362,
	349, 370, 353, 0, 350, 0, 0, 344, 408, 0,
	0, 285, 289, 0, 291, 292, 0, 280, 0, -2,
	411, 412, 0, 0, 0, 0, 480, 0, 459, 0,
	0, 419, 430, 431, 432, 433, 25, 334, 0, 0,
	32, 0, 510, -2, 0, 0, 0, 488, 514, 515,
	464, 36, 0, 0, 724, 104, 105, 102, 103, 0,
	86, 101, 0, 0, 0, 0, 0, 0, 182, 165,
	148, 149, 185, 186, 161, 0, 0, 169, 0, 0,
	0, 0, 0, 0, 206, 207, 208, 0, 210, 211,
	212, 351, 0, 371, 354, 409, 283, 290, 286, 0,
	0, 465, 0, 164, 164, 444, 164, 168, 447, 164,
	449, 164, 452, 0, 0, 0, 456, 418, 462, 0,
	476, 294, 295, 297, 298, 299, 307, 0, 309, 0,
	508, 0, -2, 0, 503, 502, 35, 44, 0, 49,
	725, 726, 106, 0, 202, 164, 0, 0, 0, 0,
	0, 163, 0, 0, 79, 56, 57, 80, 87, 88,
	89, 0, 0, 0, 0, 355, 0, 410, 413, 441,
	184, 445, 446, 448, 450, 451, 453, 415, 414, 0,
	0, 0, 460, 478, 0, 0, 0, 0, 0, 314,
	0, 0, 317, 0, 0, 0, 0, 308, 0, 0,
	328, 310, 0, 312, 313, 0, 498, 27, 0, 724,
	0, 0, 194, 0, 204, 0, 61, 61, 0, 0,
	167, 170, 61, 65, 69, 209, 287, 442, 443, 434,
	417, 457, 26, 0, 0, 296, 303, 0, 306, 315,
	316, 318, 0, 320, 0, 322, 323, 300, 301, 302,
	0, 0, 0, 311, 506, -2, 504, 47, 45, 0,
	41, 0, 203, 61, 196, 197, 65, 69, 71, 71,
	71, 0, 0, 0, 479, 477, 0, 0, 319, 321,
	0, 0, 0, 0, 724, 0, 195, 62, 63, 64,
	83, 0, 0, 198, 199, 51, 52, 66, 67, 0,
	53, 70, 416, 0, 0, 0, 304, 305, 0, 0,
	0, 42, 48, 0, 0, 60, 58, 54, 55, 72,
	83, 83, 0, 435, 0, 438, 0, 332, 0, 0,
	0, 59, 0, 0, 68, 436, 329, 0, 330, 331,
	43, 73, 74, 0, 333, 0, 437,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 107, 99, 3,
	60, 62, 104, 102, 61, 103, 115, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 242,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:896
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:902
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:904
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:908
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:932
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:940
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:944
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:951
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:957
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:961
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:967
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:971
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:977
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:988
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1010
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1016
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1022
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1026
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1032
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1046
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1052
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.optVal = nil
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1062
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1078
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.PartitionNum = yyDollar[9].optVal
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1092
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1101
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1114
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 51:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1122
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 52:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1126
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 53:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1130
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, append(yyDollar[10].indexOptionList, yyDollar[11].indexOptionList...))}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
			yyVAL.str = "hash"
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.str = "btree"
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = "default"
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1172
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1184
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1194
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1199
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1203
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1209
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1213
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1221
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1225
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1230
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1234
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1240
		{
			if !CheckIndexLock(yyDollar[3].str) {
				yylex.Error("unknown lock type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionLock,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1251
		{
			if !CheckIndexAlgorithm(yyDollar[3].str) {
				yylex.Error("unknown algorithm type")
				return 1
			}
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionAlgorithm,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[3].str)),
			}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1263
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1273
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1277
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1283
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1290
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1298
		{
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1300
		{
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1303
		{
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1305
		{
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1309
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1313
		{
			yyVAL.str = "character set"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1327
		{
			yyVAL.str = "default"
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1333
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1344
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1371
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1375
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1381
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1385
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1391
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1405
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1412
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1419
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1432
		{
			// Normal str as a identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1437
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1444
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1450
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1456
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1472
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1477
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1481
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1487
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1500
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1519
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1523
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1529
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1533
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1539
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1546
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1553
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1560
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1567
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1581
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1590
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1595
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1605
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1609
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1613
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1617
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1685
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1689
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1697
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1701
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1705
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1743
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1748
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1753
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1757
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1762
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1766
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1774
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1778
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1784
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1792
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1801
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1812
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1816
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1822
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1826
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1830
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1834
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1838
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1844
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1863
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1868
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1872
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1878
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1882
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1891
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1895
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1907
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, nil),
				Primary: true,
				Unique:  true,
			}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1917
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1927
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1937
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(string(yyDollar[2].bytes)),
				Opts:    NewIndexOptions(yyDollar[4].indexColumns, yyDollar[6].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1947
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1957
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].bytes) + " " + string(yyDollar[2].str),
				Name:    NewColIdent(string(yyDollar[3].bytes)),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1969
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1989
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1995
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1999
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2004
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2009
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2013
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2017
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2021
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2025
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2031
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2039
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2044
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2058
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2070
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2076
		{
			yyVAL.statement = &Xa{}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2082
		{
			yyVAL.statement = &Explain{}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2088
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2092
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2098
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2102
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2116
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2120
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2124
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2128
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2138
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2142
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2146
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2150
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2154
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2158
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2162
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2166
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2178
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2186
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2190
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2194
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2203
		{
			yyVAL.str = ""
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2207
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2212
		{
			yyVAL.tableName = TableName{}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2216
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2222
		{
			yyVAL.str = ""
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.str = "full "
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2242
		{
			yyVAL.showFilter = nil
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2246
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2250
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2256
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2262
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2268
		{
			yyVAL.statement = &OtherRead{}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2272
		{
			yyVAL.statement = &OtherRead{}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2276
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2285
		{
			setAllowComments(yylex, true)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2294
		{
			yyVAL.bytes2 = nil
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2298
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.str = UnionStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2308
		{
			yyVAL.str = UnionAllStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2312
		{
			yyVAL.str = UnionDistinctStr
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2317
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2325
		{
			yyVAL.str = SQLCacheStr
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = ""
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = DistinctStr
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2339
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2343
		{
			yyVAL.str = StraightJoinHint
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2348
		{
			yyVAL.selectExprs = nil
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2362
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2372
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2380
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2385
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2400
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2405
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2409
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2419
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2456
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2460
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2464
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2468
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2473
		{
			yyVAL.empty = struct{}{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2477
		{
			yyVAL.empty = struct{}{}
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2482
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2486
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2490
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2497
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2503
		{
			yyVAL.str = JoinStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.str = JoinStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2511
		{
			yyVAL.str = JoinStr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2515
		{
			yyVAL.str = StraightJoinStr
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = LeftJoinStr
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2525
		{
			yyVAL.str = LeftJoinStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.str = RightJoinStr
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = RightJoinStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = NaturalJoinStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2543
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2572
		{
			yyVAL.indexHints = nil
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2576
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2580
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2584
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2590
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2594
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = nil
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2625
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2629
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2639
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2649
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2653
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 351:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2691
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2701
		{
			yyVAL.str = IsNullStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2705
		{
			yyVAL.str = IsNotNullStr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2709
		{
			yyVAL.str = IsTrueStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.str = IsNotTrueStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2717
		{
			yyVAL.str = IsFalseStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2721
		{
			yyVAL.str = IsNotFalseStr
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2727
		{
			yyVAL.str = EqualStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2731
		{
			yyVAL.str = LessThanStr
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2735
		{
			yyVAL.str = GreaterThanStr
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2739
		{
			yyVAL.str = LessEqualStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2743
		{
			yyVAL.str = GreaterEqualStr
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2747
		{
			yyVAL.str = NotEqualStr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2751
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = nil
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2766
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2770
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2774
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2780
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2786
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2790
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2880
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2888
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2910
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 416:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2966
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2970
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2974
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2978
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3000
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3015
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3020
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3035
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3039
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3053
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3057
		{
			yyVAL.str = BooleanModeStr
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3061
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 437:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3065
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3069
		{
			yyVAL.str = QueryExpansionStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3079
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3085
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3089
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3093
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3097
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3101
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3105
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3123
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3127
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3135
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3140
		{
			yyVAL.expr = nil
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3149
		{
			yyVAL.str = string("")
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3153
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3163
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3169
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3174
		{
			yyVAL.expr = nil
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3178
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3184
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3188
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3192
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3198
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3202
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3210
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &NullVal{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3237
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3241
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3246
		{
			yyVAL.exprs = nil
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3250
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3255
		{
			yyVAL.expr = nil
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3259
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3264
		{
			yyVAL.orderBy = nil
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3268
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3278
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3284
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3289
		{
			yyVAL.str = AscScr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3293
		{
			yyVAL.str = AscScr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3297
		{
			yyVAL.str = DescScr
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3302
		{
			yyVAL.limit = nil
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3306
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3310
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3314
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3319
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3323
		{
			yyVAL.str = ForUpdateStr
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3327
		{
			yyVAL.str = ShareModeStr
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3340
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3344
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3348
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3353
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3357
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3361
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3368
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3372
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3376
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3380
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3385
		{
			yyVAL.updateExprs = nil
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3389
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3395
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3399
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3405
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3409
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3415
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3421
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3431
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3435
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3441
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3451
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3457
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3461
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3468
		{
			yyVAL.bytes = []byte("charset")
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3479
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.expr = &Default{}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3492
		{
			yyVAL.byt = 0
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3496
		{
			yyVAL.byt = 1
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3501
		{
			yyVAL.byt = 0
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3505
		{
			yyVAL.byt = 1
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3510
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3514
		{
			yyVAL.str = IgnoreStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3520
		{
			yyVAL.empty = struct{}{}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.empty = struct{}{}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			yyVAL.empty = struct{}{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3532
		{
			yyVAL.empty = struct{}{}
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3536
		{
			yyVAL.empty = struct{}{}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3540
		{
			yyVAL.empty = struct{}{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3544
		{
			yyVAL.empty = struct{}{}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3548
		{
			yyVAL.empty = struct{}{}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3552
		{
			yyVAL.empty = struct{}{}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			yyVAL.empty = struct{}{}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3561
		{
			yyVAL.empty = struct{}{}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3565
		{
			yyVAL.empty = struct{}{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3569
		{
			yyVAL.empty = struct{}{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3575
		{
			yyVAL.empty = struct{}{}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3579
		{
			yyVAL.empty = struct{}{}
		}
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3584
		{
			yyVAL.str = IndexStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3588
		{
			yyVAL.str = UniqueStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3594
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3598
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3611
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3615
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3622
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3811
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3820
		{
			decNesting(yylex)
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3825
		{
			forceEOF(yylex)
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3830
		{
			forceEOF(yylex)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3834
		{
			forceEOF(yylex)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3838
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
