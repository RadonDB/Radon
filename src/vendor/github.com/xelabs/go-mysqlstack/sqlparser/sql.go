//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	setExprs          SetExprs
	setExpr           *SetExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const FULL = 57373
const CHECKSUM = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const NULL = 57404
const TRUE = 57405
const FALSE = 57406
const OFF = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const INTERVAL = 57432
const JSON_EXTRACT_OP = 57433
const JSON_UNQUOTE_EXTRACT_OP = 57434
const CREATE = 57435
const ALTER = 57436
const DROP = 57437
const RENAME = 57438
const ANALYZE = 57439
const ADD = 57440
const MODIFY = 57441
const TABLE = 57442
const INDEX = 57443
const VIEW = 57444
const TO = 57445
const IGNORE = 57446
const IF = 57447
const UNIQUE = 57448
const USING = 57449
const PRIMARY = 57450
const COLUMN = 57451
const SHOW = 57452
const DESCRIBE = 57453
const EXPLAIN = 57454
const DATE = 57455
const ESCAPE = 57456
const REPAIR = 57457
const OPTIMIZE = 57458
const TRUNCATE = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const TIME = 57473
const TIMESTAMP = 57474
const DATETIME = 57475
const YEAR = 57476
const CHAR = 57477
const VARCHAR = 57478
const BOOL = 57479
const CHARACTER = 57480
const VARBINARY = 57481
const NCHAR = 57482
const CHARSET = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const NULLX = 57494
const AUTO_INCREMENT = 57495
const APPROXNUM = 57496
const SIGNED = 57497
const UNSIGNED = 57498
const ZEROFILL = 57499
const DATABASES = 57500
const TABLES = 57501
const VITESS_KEYSPACES = 57502
const VITESS_SHARDS = 57503
const VSCHEMA_TABLES = 57504
const WARNINGS = 57505
const VARIABLES = 57506
const EVENTS = 57507
const BINLOG = 57508
const GTID = 57509
const STATUS = 57510
const COLUMNS = 57511
const CURRENT_TIMESTAMP = 57512
const DATABASE = 57513
const CURRENT_DATE = 57514
const CURRENT_TIME = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const UTC_DATE = 57518
const UTC_TIME = 57519
const UTC_TIMESTAMP = 57520
const REPLACE = 57521
const CONVERT = 57522
const CAST = 57523
const GROUP_CONCAT = 57524
const SEPARATOR = 57525
const MATCH = 57526
const AGAINST = 57527
const BOOLEAN = 57528
const LANGUAGE = 57529
const WITH = 57530
const QUERY = 57531
const EXPANSION = 57532
const UNUSED = 57533
const PARTITION = 57534
const PARTITIONS = 57535
const HASH = 57536
const XA = 57537
const ENGINES = 57538
const VERSIONS = 57539
const PROCESSLIST = 57540
const QUERYZ = 57541
const TXNZ = 57542
const KILL = 57543
const ENGINE = 57544
const BEGIN = 57545
const START = 57546
const TRANSACTION = 57547
const COMMIT = 57548
const ROLLBACK = 57549
const GLOBAL = 57550
const SESSION = 57551
const NAMES = 57552

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 26,
	-2, 4,
	-1, 279,
	79, 592,
	-2, 39,
	-1, 284,
	79, 488,
	-2, 439,
	-1, 380,
	107, 475,
	-2, 471,
	-1, 381,
	107, 476,
	-2, 472,
	-1, 555,
	5, 26,
	-2, 415,
	-1, 688,
	107, 478,
	-2, 474,
	-1, 799,
	5, 27,
	-2, 294,
	-1, 823,
	5, 27,
	-2, 416,
	-1, 909,
	5, 26,
	-2, 418,
	-1, 1011,
	5, 27,
	-2, 419,
}

const yyPrivate = 57344

const yyLast = 6804

var yyAct = [...]int{

	381, 514, 1043, 684, 336, 334, 356, 963, 558, 900,
	949, 838, 858, 595, 608, 960, 720, 513, 3, 879,
	783, 566, 64, 719, 358, 672, 682, 791, 679, 559,
	72, 294, 899, 716, 649, 149, 70, 245, 581, 323,
	700, 383, 332, 389, 604, 54, 456, 258, 277, 267,
	275, 53, 359, 48, 250, 280, 575, 572, 58, 283,
	687, 292, 245, 625, 72, 1055, 257, 1042, 1054, 1034,
	282, 1052, 23, 49, 25, 26, 1041, 624, 681, 905,
	892, 570, 1033, 60, 61, 62, 63, 943, 132, 133,
	44, 526, 311, 978, 148, 27, 317, 636, 35, 315,
	309, 48, 746, 588, 627, 921, 735, 915, 984, 263,
	864, 596, 938, 623, 936, 36, 301, 771, 51, 1019,
	480, 479, 489, 490, 482, 483, 484, 485, 486, 487,
	488, 481, 770, 769, 491, 302, 245, 245, 1006, 1008,
	583, 272, 321, 843, 844, 845, 976, 297, 764, 131,
	300, 846, 768, 329, 766, 802, 1029, 583, 1028, 134,
	620, 618, 614, 312, 617, 619, 880, 242, 295, 1027,
	589, 468, 467, 298, 136, 135, 29, 30, 31, 970,
	33, 503, 504, 928, 826, 740, 797, 795, 469, 729,
	512, 882, 396, 34, 45, 38, 571, 491, 46, 47,
	32, 804, 851, 466, 622, 468, 467, 884, 596, 888,
	1007, 883, 896, 881, 467, 305, 306, 481, 886, 621,
	491, 469, 469, 744, 972, 656, 803, 835, 885, 767,
	469, 582, 736, 887, 889, 1020, 580, 1032, 579, 654,
	655, 653, 977, 245, 975, 765, 616, 763, 582, 468,
	467, 304, 852, 468, 467, 728, 400, 626, 701, 894,
	809, 701, 50, 326, 384, 585, 469, 447, 615, 1015,
	469, 586, 245, 847, 391, 245, 130, 72, 37, 925,
	924, 386, 72, 282, 39, 916, 40, 41, 402, 43,
	42, 484, 485, 486, 487, 488, 481, 245, 296, 491,
	245, 245, 245, 758, 51, 245, 673, 385, 674, 245,
	1030, 245, 245, 245, 652, 757, 48, 747, 869, 642,
	644, 645, 318, 387, 248, 643, 987, 399, 923, 774,
	541, 542, 472, 776, 777, 778, 501, 271, 480, 479,
	489, 490, 482, 483, 484, 485, 486, 487, 488, 481,
	756, 394, 491, 1013, 397, 482, 483, 484, 485, 486,
	487, 488, 481, 515, 463, 491, 981, 299, 1049, 322,
	524, 947, 322, 918, 917, 322, 468, 467, 295, 449,
	450, 451, 21, 500, 502, 789, 322, 980, 455, 72,
	458, 459, 460, 469, 245, 547, 866, 245, 863, 72,
	840, 560, 561, 836, 569, 282, 857, 856, 979, 511,
	555, 832, 516, 517, 518, 519, 520, 521, 522, 741,
	525, 527, 527, 527, 527, 527, 527, 527, 527, 535,
	536, 537, 538, 543, 597, 598, 599, 545, 732, 262,
	576, 854, 853, 825, 322, 556, 675, 568, 448, 471,
	690, 322, 408, 407, 245, 303, 565, 563, 245, 55,
	610, 528, 529, 530, 531, 532, 533, 534, 848, 690,
	23, 639, 640, 557, 646, 647, 727, 821, 630, 651,
	717, 947, 727, 567, 23, 470, 855, 606, 607, 789,
	398, 505, 506, 507, 508, 509, 510, 908, 789, 650,
	51, 468, 467, 348, 347, 349, 350, 351, 352, 635,
	818, 72, 353, 539, 590, 264, 51, 678, 469, 282,
	515, 609, 65, 695, 696, 727, 72, 23, 737, 544,
	51, 605, 702, 628, 692, 600, 1023, 631, 951, 954,
	955, 956, 952, 384, 953, 957, 676, 677, 1024, 842,
	553, 1026, 717, 789, 554, 48, 612, 72, 453, 560,
	561, 51, 718, 725, 551, 705, 698, 1025, 686, 516,
	999, 731, 688, 51, 723, 1000, 996, 997, 995, 721,
	726, 708, 998, 709, 268, 269, 591, 592, 593, 594,
	1001, 1047, 955, 956, 1040, 775, 693, 694, 638, 714,
	697, 601, 602, 603, 713, 748, 749, 722, 390, 48,
	324, 357, 730, 245, 704, 926, 706, 707, 751, 739,
	405, 834, 325, 388, 395, 733, 743, 648, 1017, 715,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 1016, 906, 738, 243, 611,
	819, 452, 959, 265, 266, 390, 689, 691, 651, 479,
	489, 490, 482, 483, 484, 485, 486, 487, 488, 481,
	703, 259, 491, 273, 712, 990, 406, 750, 650, 752,
	753, 754, 711, 260, 55, 72, 989, 946, 779, 567,
	457, 793, 759, 462, 798, 489, 490, 482, 483, 484,
	485, 486, 487, 488, 481, 810, 310, 491, 308, 274,
	967, 245, 922, 480, 479, 489, 490, 482, 483, 484,
	485, 486, 487, 488, 481, 465, 515, 491, 57, 59,
	52, 1, 829, 560, 561, 837, 282, 578, 72, 796,
	808, 573, 293, 577, 839, 755, 974, 273, 273, 920,
	584, 745, 820, 587, 784, 734, 574, 828, 833, 788,
	72, 1014, 245, 841, 742, 411, 282, 951, 954, 955,
	956, 952, 827, 953, 957, 412, 410, 806, 831, 414,
	413, 409, 137, 276, 958, 830, 962, 790, 67, 688,
	816, 762, 865, 72, 761, 613, 499, 710, 72, 793,
	281, 868, 282, 867, 282, 401, 724, 540, 780, 781,
	782, 382, 859, 895, 988, 860, 873, 945, 786, 245,
	874, 807, 787, 903, 891, 877, 72, 72, 523, 890,
	849, 850, 911, 912, 898, 799, 800, 801, 907, 897,
	805, 861, 909, 699, 335, 811, 721, 812, 813, 814,
	815, 686, 893, 878, 273, 688, 876, 641, 346, 343,
	345, 344, 546, 552, 473, 822, 823, 824, 333, 327,
	1005, 904, 902, 392, 722, 913, 950, 910, 948, 901,
	817, 461, 942, 273, 1018, 550, 273, 480, 479, 489,
	490, 482, 483, 484, 485, 486, 487, 488, 481, 934,
	944, 491, 24, 56, 270, 245, 245, 14, 446, 903,
	20, 273, 273, 273, 15, 72, 454, 13, 12, 72,
	273, 282, 273, 273, 273, 839, 28, 971, 969, 72,
	973, 872, 968, 721, 10, 282, 9, 8, 870, 871,
	7, 6, 5, 4, 261, 941, 983, 22, 245, 245,
	245, 245, 903, 903, 903, 903, 2, 961, 992, 245,
	994, 722, 245, 48, 19, 245, 903, 859, 1002, 18,
	860, 72, 1009, 560, 561, 914, 1010, 1012, 17, 692,
	991, 16, 993, 11, 878, 0, 0, 0, 0, 0,
	0, 0, 1022, 1021, 515, 0, 0, 0, 0, 0,
	904, 904, 904, 904, 0, 273, 0, 562, 564, 0,
	919, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	929, 0, 930, 927, 0, 0, 0, 1035, 1036, 246,
	0, 0, 0, 939, 940, 0, 0, 0, 72, 72,
	72, 1045, 1046, 0, 1044, 1044, 1044, 0, 0, 0,
	72, 931, 932, 0, 933, 0, 1053, 935, 0, 937,
	0, 0, 0, 0, 0, 273, 0, 0, 247, 273,
	249, 0, 251, 252, 253, 254, 255, 256, 0, 0,
	1037, 1038, 1039, 0, 0, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 0, 103,
	0, 0, 0, 1004, 0, 0, 0, 0, 84, 0,
	0, 0, 1011, 0, 0, 0, 94, 0, 0, 109,
	100, 0, 0, 685, 564, 0, 0, 0, 0, 685,
	685, 0, 0, 685, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 685, 685, 685,
	685, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, 685, 0, 0, 562, 0, 307, 0, 0,
	0, 0, 313, 314, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1048, 0, 1050, 1051,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 123, 0, 0, 0, 69, 0, 105, 0, 0,
	0, 0, 80, 0, 108, 104, 118, 75, 116, 111,
	98, 90, 91, 74, 273, 107, 83, 88, 82, 102,
	113, 114, 81, 128, 78, 122, 77, 0, 121, 101,
	0, 112, 117, 99, 96, 76, 115, 97, 95, 92,
	85, 0, 0, 0, 110, 119, 129, 0, 0, 124,
	125, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 0, 0, 0, 0, 0, 319, 0,
	320, 0, 0, 0, 73, 0, 93, 127, 106, 87,
	120, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 89, 0, 0,
	685, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 0, 273, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 109, 100, 0, 562,
	0, 564, 0, 0, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 480,
	479, 489, 490, 482, 483, 484, 485, 486, 487, 488,
	481, 685, 0, 491, 0, 0, 0, 564, 685, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 80,
	273, 108, 104, 118, 75, 116, 111, 98, 90, 91,
	74, 0, 107, 83, 88, 82, 102, 113, 114, 81,
	128, 78, 122, 77, 0, 121, 101, 0, 112, 117,
	99, 96, 76, 115, 97, 95, 92, 85, 0, 0,
	0, 110, 119, 129, 0, 0, 124, 125, 126, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 632, 633,
	634, 0, 0, 637, 0, 417, 0, 0, 0, 0,
	0, 73, 0, 93, 127, 106, 87, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 965, 86, 0,
	429, 0, 0, 0, 89, 434, 435, 436, 437, 438,
	439, 440, 0, 441, 442, 443, 444, 445, 430, 431,
	432, 433, 415, 416, 0, 0, 418, 0, 0, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 273,
	273, 273, 273, 0, 0, 0, 0, 0, 0, 0,
	1003, 0, 0, 273, 0, 0, 965, 0, 0, 562,
	0, 0, 0, 0, 0, 230, 221, 192, 232, 169,
	184, 241, 185, 186, 213, 156, 200, 103, 182, 0,
	172, 151, 179, 152, 170, 194, 84, 197, 168, 223,
	203, 289, 0, 238, 94, 207, 0, 109, 100, 0,
	0, 196, 225, 198, 220, 191, 214, 162, 206, 233,
	183, 211, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 760, 79, 209, 228, 181, 210, 212,
	150, 208, 0, 154, 157, 240, 226, 175, 176, 0,
	772, 0, 0, 0, 0, 773, 195, 199, 217, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	205, 0, 0, 0, 160, 155, 193, 0, 0, 0,
	288, 0, 174, 218, 0, 0, 0, 290, 190, 123,
	227, 188, 187, 231, 234, 105, 0, 224, 171, 180,
	80, 178, 108, 104, 118, 75, 116, 111, 98, 90,
	91, 74, 0, 107, 83, 88, 82, 102, 113, 114,
	81, 128, 78, 122, 77, 285, 121, 101, 284, 112,
	117, 99, 96, 76, 115, 97, 95, 92, 85, 0,
	153, 0, 110, 119, 129, 167, 291, 124, 125, 126,
	0, 0, 0, 0, 0, 0, 287, 165, 166, 163,
	164, 201, 202, 235, 236, 237, 219, 161, 0, 0,
	222, 204, 73, 0, 93, 127, 106, 87, 120, 0,
	0, 0, 862, 177, 239, 216, 215, 229, 0, 86,
	0, 0, 0, 0, 0, 279, 278, 286, 230, 221,
	192, 232, 169, 184, 241, 185, 186, 213, 156, 200,
	103, 182, 0, 172, 151, 179, 152, 170, 194, 84,
	197, 168, 223, 203, 139, 0, 238, 94, 207, 0,
	109, 100, 0, 0, 196, 225, 198, 220, 191, 214,
	162, 206, 233, 183, 211, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 209, 228,
	181, 210, 212, 150, 208, 0, 154, 157, 240, 226,
	175, 176, 0, 0, 0, 0, 0, 0, 0, 195,
	199, 217, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 205, 0, 0, 0, 160, 155, 193,
	0, 0, 0, 141, 0, 174, 218, 0, 0, 0,
	146, 190, 123, 227, 188, 187, 231, 234, 105, 0,
	224, 171, 180, 80, 178, 108, 104, 118, 75, 116,
	111, 98, 90, 91, 74, 0, 107, 83, 88, 82,
	102, 113, 114, 81, 128, 78, 122, 77, 158, 121,
	101, 159, 112, 117, 99, 96, 76, 115, 97, 95,
	92, 85, 0, 153, 0, 110, 119, 129, 167, 138,
	124, 125, 126, 142, 143, 0, 144, 0, 145, 140,
	165, 166, 163, 164, 201, 202, 235, 236, 237, 219,
	161, 0, 0, 222, 204, 73, 0, 93, 127, 106,
	87, 120, 0, 0, 0, 0, 177, 239, 216, 215,
	229, 0, 86, 0, 0, 0, 0, 0, 89, 230,
	221, 192, 232, 169, 184, 241, 185, 186, 213, 156,
	200, 103, 182, 0, 172, 151, 179, 152, 170, 194,
	84, 197, 168, 223, 203, 289, 0, 238, 94, 207,
	0, 109, 100, 0, 0, 196, 225, 198, 220, 191,
	214, 162, 206, 233, 183, 211, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 209,
	228, 181, 210, 212, 150, 208, 0, 154, 157, 240,
	226, 175, 176, 0, 0, 0, 0, 0, 0, 0,
	195, 199, 217, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 205, 0, 0, 0, 160, 155,
	193, 0, 0, 0, 288, 0, 174, 218, 0, 0,
	0, 290, 190, 123, 227, 188, 187, 231, 234, 105,
	0, 224, 171, 180, 80, 178, 108, 104, 118, 75,
	116, 111, 98, 90, 91, 74, 0, 107, 83, 88,
	82, 102, 113, 114, 81, 128, 78, 122, 77, 285,
	121, 101, 284, 112, 117, 99, 96, 76, 115, 97,
	95, 92, 85, 0, 153, 0, 110, 119, 129, 167,
	291, 124, 125, 126, 0, 0, 0, 0, 0, 0,
	287, 165, 166, 163, 164, 201, 202, 235, 236, 237,
	219, 161, 0, 0, 222, 204, 73, 0, 93, 127,
	106, 87, 120, 0, 0, 0, 0, 177, 239, 216,
	215, 229, 0, 86, 0, 0, 0, 0, 0, 89,
	0, 286, 230, 221, 192, 232, 169, 184, 241, 185,
	186, 213, 156, 200, 103, 182, 0, 172, 151, 179,
	152, 170, 194, 84, 197, 168, 223, 203, 289, 0,
	238, 94, 207, 0, 109, 100, 0, 0, 196, 225,
	198, 220, 191, 214, 162, 206, 233, 183, 211, 0,
	0, 0, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 209, 228, 181, 210, 212, 150, 208, 0,
	154, 157, 240, 226, 175, 176, 0, 0, 0, 0,
	0, 0, 0, 195, 199, 217, 189, 0, 0, 0,
	0, 0, 0, 982, 0, 173, 0, 205, 0, 0,
	0, 160, 155, 193, 0, 0, 0, 288, 0, 174,
	218, 0, 0, 0, 290, 190, 123, 227, 188, 187,
	231, 234, 105, 0, 224, 171, 180, 80, 178, 108,
	104, 118, 75, 116, 111, 98, 90, 91, 74, 0,
	107, 83, 88, 82, 102, 113, 114, 81, 128, 78,
	122, 77, 158, 121, 101, 159, 112, 117, 99, 96,
	76, 115, 97, 95, 92, 85, 0, 153, 0, 110,
	119, 129, 167, 291, 124, 125, 126, 0, 0, 0,
	0, 0, 0, 287, 165, 166, 163, 164, 201, 202,
	235, 236, 237, 219, 161, 0, 0, 222, 204, 73,
	0, 93, 127, 106, 87, 120, 0, 0, 0, 0,
	177, 239, 216, 215, 229, 0, 86, 0, 0, 0,
	0, 0, 89, 230, 221, 192, 232, 169, 184, 241,
	185, 186, 213, 156, 200, 103, 182, 0, 172, 151,
	179, 152, 170, 194, 84, 197, 168, 223, 203, 289,
	0, 238, 94, 207, 0, 109, 100, 0, 0, 196,
	225, 198, 220, 191, 214, 162, 206, 233, 183, 211,
	51, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 209, 228, 181, 210, 212, 150, 208,
	0, 154, 157, 240, 226, 175, 176, 0, 0, 0,
	0, 0, 0, 0, 195, 199, 217, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 173, 0, 205, 0,
	0, 0, 160, 155, 193, 0, 0, 0, 288, 0,
	174, 218, 0, 0, 0, 290, 190, 123, 227, 188,
	187, 231, 234, 105, 0, 224, 171, 180, 80, 178,
	108, 104, 118, 75, 116, 111, 98, 90, 91, 74,
	0, 107, 83, 88, 82, 102, 113, 114, 81, 128,
	78, 122, 77, 158, 121, 101, 159, 112, 117, 99,
	96, 76, 115, 97, 95, 92, 85, 0, 153, 0,
	110, 119, 129, 167, 291, 124, 125, 126, 0, 0,
	0, 0, 0, 0, 287, 165, 166, 163, 164, 201,
	202, 235, 236, 237, 219, 161, 0, 0, 222, 204,
	73, 0, 93, 127, 106, 87, 120, 0, 0, 0,
	0, 177, 239, 216, 215, 229, 0, 86, 0, 0,
	0, 0, 0, 89, 230, 221, 192, 232, 169, 184,
	241, 185, 186, 213, 156, 200, 103, 182, 0, 172,
	151, 179, 152, 170, 194, 84, 197, 168, 223, 203,
	289, 0, 238, 94, 207, 0, 109, 100, 0, 0,
	196, 225, 198, 220, 191, 214, 162, 206, 233, 183,
	211, 0, 0, 0, 380, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 209, 228, 181, 210, 212, 150,
	208, 0, 154, 157, 240, 226, 175, 176, 0, 0,
	0, 0, 0, 0, 0, 195, 199, 217, 189, 0,
	0, 0, 0, 0, 0, 875, 0, 173, 0, 205,
	0, 0, 0, 160, 155, 193, 0, 0, 0, 288,
	0, 174, 218, 0, 0, 0, 290, 190, 123, 227,
	188, 187, 231, 234, 105, 0, 224, 171, 180, 80,
	178, 108, 104, 118, 75, 116, 111, 98, 90, 91,
	74, 0, 107, 83, 88, 82, 102, 113, 114, 81,
	128, 78, 122, 77, 158, 121, 101, 159, 112, 117,
	99, 96, 76, 115, 97, 95, 92, 85, 0, 153,
	0, 110, 119, 129, 167, 291, 124, 125, 126, 0,
	0, 0, 0, 0, 0, 287, 165, 166, 163, 164,
	201, 202, 235, 236, 237, 219, 161, 0, 0, 222,
	204, 73, 0, 93, 127, 106, 87, 120, 0, 0,
	0, 0, 177, 239, 216, 215, 229, 0, 86, 0,
	0, 0, 0, 0, 89, 230, 221, 192, 232, 169,
	184, 241, 185, 186, 213, 156, 200, 103, 182, 0,
	172, 151, 179, 152, 170, 194, 84, 197, 168, 223,
	203, 289, 0, 238, 94, 207, 0, 109, 100, 0,
	0, 196, 225, 198, 220, 191, 214, 162, 206, 233,
	183, 211, 0, 0, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 209, 228, 181, 210, 212,
	150, 208, 0, 154, 157, 240, 226, 175, 176, 0,
	0, 0, 0, 0, 0, 0, 195, 199, 217, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	205, 0, 0, 0, 160, 155, 193, 0, 0, 0,
	288, 0, 174, 218, 0, 0, 0, 290, 190, 123,
	227, 188, 187, 231, 234, 105, 0, 224, 171, 180,
	80, 178, 108, 104, 118, 75, 116, 111, 98, 90,
	91, 74, 0, 107, 83, 88, 82, 102, 113, 114,
	81, 128, 78, 122, 77, 158, 121, 101, 159, 112,
	117, 99, 96, 76, 115, 97, 95, 92, 85, 0,
	153, 0, 110, 119, 129, 167, 291, 124, 125, 126,
	0, 0, 0, 0, 0, 0, 287, 165, 166, 163,
	164, 201, 202, 235, 236, 237, 219, 161, 0, 0,
	222, 204, 73, 0, 93, 127, 106, 87, 120, 0,
	0, 0, 0, 177, 239, 216, 215, 229, 0, 86,
	0, 0, 0, 0, 0, 89, 230, 221, 192, 232,
	169, 184, 241, 185, 186, 213, 156, 200, 103, 182,
	0, 172, 151, 179, 152, 170, 194, 84, 197, 168,
	223, 203, 289, 0, 238, 94, 207, 0, 109, 100,
	0, 0, 196, 225, 198, 220, 191, 214, 162, 206,
	233, 183, 211, 0, 0, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 209, 228, 181, 210,
	212, 150, 208, 0, 154, 157, 240, 226, 175, 176,
	0, 0, 0, 0, 0, 0, 0, 195, 199, 217,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 205, 0, 0, 0, 160, 155, 193, 0, 0,
	0, 288, 0, 174, 218, 0, 0, 0, 290, 190,
	123, 227, 188, 187, 231, 234, 105, 0, 224, 171,
	180, 80, 178, 108, 104, 118, 75, 116, 111, 98,
	90, 91, 74, 0, 107, 83, 88, 82, 102, 113,
	114, 81, 128, 78, 122, 77, 158, 121, 101, 159,
	112, 117, 99, 96, 76, 115, 97, 95, 92, 85,
	0, 153, 0, 110, 119, 129, 167, 291, 124, 125,
	126, 0, 0, 0, 0, 0, 0, 287, 165, 166,
	163, 164, 201, 202, 235, 236, 237, 219, 161, 0,
	0, 222, 204, 73, 0, 93, 127, 106, 87, 120,
	0, 0, 0, 0, 177, 239, 216, 215, 229, 0,
	86, 0, 0, 0, 0, 0, 89, 230, 221, 192,
	232, 169, 184, 241, 185, 186, 213, 156, 200, 103,
	182, 0, 172, 151, 179, 152, 170, 194, 84, 197,
	168, 223, 203, 289, 0, 238, 94, 207, 0, 109,
	100, 0, 0, 196, 225, 198, 220, 191, 214, 162,
	206, 233, 183, 211, 0, 0, 0, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 209, 228, 181,
	210, 212, 150, 208, 0, 154, 157, 240, 226, 175,
	176, 0, 0, 0, 0, 0, 0, 0, 195, 199,
	217, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	173, 0, 205, 0, 0, 0, 160, 155, 193, 0,
	0, 0, 288, 0, 174, 218, 0, 0, 0, 290,
	190, 123, 227, 188, 187, 231, 234, 105, 0, 224,
	171, 180, 80, 178, 108, 104, 118, 75, 116, 111,
	98, 90, 91, 74, 0, 107, 83, 88, 82, 102,
	113, 114, 81, 128, 78, 122, 77, 158, 121, 101,
	159, 112, 117, 99, 96, 76, 115, 97, 95, 92,
	85, 0, 153, 0, 110, 119, 129, 167, 291, 124,
	125, 126, 0, 0, 0, 0, 0, 0, 287, 165,
	166, 163, 164, 201, 202, 235, 236, 237, 219, 161,
	0, 0, 222, 204, 73, 0, 93, 127, 106, 87,
	120, 0, 0, 0, 0, 177, 239, 216, 215, 229,
	103, 86, 0, 680, 0, 331, 0, 89, 0, 84,
	0, 330, 0, 0, 0, 0, 367, 94, 0, 0,
	109, 100, 0, 0, 0, 0, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 380, 348,
	347, 349, 350, 351, 352, 0, 0, 79, 353, 354,
	355, 0, 0, 0, 328, 341, 0, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 0, 0, 0, 0, 0, 0, 338, 339, 683,
	0, 0, 0, 378, 0, 340, 0, 0, 337, 342,
	480, 479, 489, 490, 482, 483, 484, 485, 486, 487,
	488, 481, 123, 0, 491, 376, 0, 0, 105, 0,
	0, 0, 0, 80, 0, 108, 104, 118, 75, 116,
	111, 98, 90, 91, 74, 0, 107, 83, 88, 82,
	102, 113, 114, 81, 128, 78, 122, 77, 0, 121,
	101, 0, 112, 117, 99, 96, 76, 115, 97, 95,
	92, 85, 0, 0, 0, 110, 119, 129, 0, 0,
	124, 125, 126, 0, 0, 0, 0, 0, 0, 0,
	368, 377, 374, 375, 372, 373, 371, 370, 369, 379,
	362, 363, 365, 0, 364, 73, 0, 93, 127, 106,
	87, 120, 0, 0, 103, 0, 0, 0, 0, 331,
	0, 0, 86, 84, 0, 330, 0, 0, 89, 0,
	367, 94, 0, 0, 109, 100, 0, 0, 0, 0,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 380, 348, 347, 349, 350, 351, 352, 0,
	0, 79, 353, 354, 355, 0, 0, 0, 328, 341,
	0, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 338, 339, 683, 0, 0, 0, 378, 0, 340,
	0, 0, 337, 342, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 376,
	0, 0, 105, 0, 0, 0, 0, 80, 0, 108,
	104, 118, 75, 116, 111, 98, 90, 91, 74, 0,
	107, 83, 88, 82, 102, 113, 114, 81, 128, 78,
	122, 77, 0, 121, 101, 0, 112, 117, 99, 96,
	76, 115, 97, 95, 92, 85, 0, 0, 0, 110,
	119, 129, 0, 0, 124, 125, 126, 0, 0, 0,
	0, 0, 0, 0, 368, 377, 374, 375, 372, 373,
	371, 370, 369, 379, 362, 363, 365, 0, 364, 73,
	0, 93, 127, 106, 87, 120, 0, 0, 103, 0,
	0, 0, 0, 331, 0, 0, 86, 84, 0, 330,
	0, 0, 89, 0, 367, 94, 0, 0, 109, 100,
	0, 0, 0, 0, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 51, 0, 322, 380, 348, 347, 349,
	350, 351, 352, 0, 0, 79, 353, 354, 355, 0,
	0, 0, 328, 341, 0, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 338, 339, 0, 0, 0,
	0, 378, 0, 340, 0, 0, 337, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 376, 0, 0, 105, 0, 0, 0,
	0, 80, 0, 108, 104, 118, 75, 116, 111, 98,
	90, 91, 74, 0, 107, 83, 88, 82, 102, 113,
	114, 81, 128, 78, 122, 77, 0, 121, 101, 0,
	112, 117, 99, 96, 76, 115, 97, 95, 92, 85,
	0, 0, 0, 110, 119, 129, 0, 0, 124, 125,
	126, 0, 0, 0, 0, 0, 0, 0, 368, 377,
	374, 375, 372, 373, 371, 370, 369, 379, 362, 363,
	365, 23, 364, 73, 0, 93, 127, 106, 87, 120,
	0, 0, 103, 0, 0, 0, 0, 331, 0, 0,
	86, 84, 0, 330, 0, 0, 89, 0, 367, 94,
	0, 0, 109, 100, 0, 0, 0, 0, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	380, 348, 347, 349, 350, 351, 352, 0, 0, 79,
	353, 354, 355, 0, 0, 0, 328, 341, 0, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 338,
	339, 0, 0, 0, 0, 378, 0, 340, 0, 0,
	337, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 376, 0, 0,
	105, 0, 0, 0, 0, 80, 0, 108, 104, 118,
	75, 116, 111, 98, 90, 91, 74, 0, 107, 83,
	88, 82, 102, 113, 114, 81, 128, 78, 122, 77,
	0, 121, 101, 0, 112, 117, 99, 96, 76, 115,
	97, 95, 92, 85, 0, 0, 0, 110, 119, 129,
	0, 0, 124, 125, 126, 0, 0, 0, 0, 0,
	0, 0, 368, 377, 374, 375, 372, 373, 371, 370,
	369, 379, 362, 363, 365, 0, 364, 73, 0, 93,
	127, 106, 87, 120, 0, 0, 103, 0, 0, 0,
	0, 331, 0, 0, 86, 84, 0, 330, 0, 0,
	89, 0, 367, 94, 0, 0, 109, 100, 0, 0,
	0, 0, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 51, 0, 0, 380, 348, 347, 349, 350, 351,
	352, 0, 0, 79, 353, 354, 355, 0, 0, 0,
	328, 341, 0, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 338, 339, 0, 0, 0, 0, 378,
	0, 340, 0, 0, 337, 342, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 376, 0, 0, 105, 0, 0, 0, 0, 80,
	0, 108, 104, 118, 75, 116, 111, 98, 90, 91,
	74, 0, 107, 83, 88, 82, 102, 113, 114, 81,
	128, 78, 122, 77, 0, 121, 101, 0, 112, 117,
	99, 96, 76, 115, 97, 95, 92, 85, 0, 0,
	0, 110, 119, 129, 0, 0, 124, 125, 126, 0,
	0, 0, 0, 0, 0, 0, 368, 377, 374, 375,
	372, 373, 371, 370, 369, 379, 362, 363, 365, 103,
	364, 73, 0, 93, 127, 106, 87, 120, 84, 0,
	0, 0, 0, 0, 0, 367, 94, 0, 86, 109,
	100, 0, 0, 0, 89, 360, 361, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 380, 348, 347,
	349, 350, 351, 352, 0, 0, 79, 353, 354, 355,
	0, 0, 0, 0, 341, 0, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 338, 339, 0, 0,
	0, 0, 378, 0, 340, 0, 0, 337, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 376, 0, 0, 105, 0, 0,
	0, 0, 80, 0, 108, 104, 118, 75, 116, 111,
	98, 90, 91, 74, 0, 107, 83, 88, 82, 102,
	113, 114, 81, 128, 78, 122, 77, 0, 121, 101,
	0, 112, 117, 99, 96, 76, 115, 97, 95, 92,
	85, 0, 0, 0, 110, 119, 129, 0, 0, 124,
	125, 126, 0, 0, 0, 0, 0, 0, 0, 368,
	377, 374, 375, 372, 373, 371, 370, 369, 379, 362,
	363, 365, 0, 364, 73, 0, 93, 127, 106, 87,
	120, 103, 0, 0, 0, 792, 0, 0, 0, 0,
	84, 86, 0, 0, 0, 0, 0, 89, 94, 0,
	0, 109, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 794, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 468, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 478, 0, 0, 0, 0,
	469, 492, 493, 494, 495, 496, 497, 498, 0, 476,
	477, 474, 480, 479, 489, 490, 482, 483, 484, 485,
	486, 487, 488, 481, 0, 0, 491, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 80, 0, 108, 104, 118, 75,
	116, 111, 98, 90, 91, 74, 0, 107, 83, 88,
	82, 102, 113, 114, 81, 128, 78, 122, 77, 0,
	121, 101, 0, 112, 117, 99, 96, 76, 115, 97,
	95, 92, 85, 23, 0, 0, 110, 119, 129, 0,
	0, 124, 125, 126, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 109, 100, 73, 0, 93, 127,
	106, 87, 120, 0, 0, 0, 0, 0, 0, 51,
	0, 0, 244, 86, 0, 0, 0, 0, 0, 89,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 80, 0, 108,
	104, 118, 75, 116, 111, 98, 90, 91, 74, 0,
	107, 83, 88, 82, 102, 113, 114, 81, 128, 78,
	122, 77, 0, 121, 101, 0, 112, 117, 99, 96,
	76, 115, 97, 95, 92, 85, 0, 0, 103, 110,
	119, 129, 964, 0, 124, 125, 126, 84, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 109, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 93, 127, 106, 87, 120, 244, 0, 966, 0,
	0, 0, 0, 0, 0, 79, 86, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 80, 0, 108, 104, 118, 75, 116, 111, 98,
	90, 91, 74, 0, 107, 83, 88, 82, 102, 113,
	114, 81, 128, 78, 122, 77, 0, 121, 101, 0,
	112, 117, 99, 96, 76, 115, 97, 95, 92, 85,
	23, 0, 0, 110, 119, 129, 0, 0, 124, 125,
	126, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 109, 100, 73, 0, 93, 127, 106, 87, 120,
	0, 0, 0, 0, 0, 0, 51, 0, 0, 71,
	86, 0, 0, 0, 0, 0, 89, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 80, 0, 108, 104, 118, 75,
	116, 111, 98, 90, 91, 74, 0, 107, 83, 88,
	82, 102, 113, 114, 81, 128, 78, 122, 77, 0,
	121, 101, 0, 112, 117, 99, 96, 76, 115, 97,
	95, 92, 85, 0, 0, 103, 110, 119, 129, 0,
	0, 124, 125, 126, 84, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 109, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 93, 127,
	106, 87, 120, 71, 0, 0, 548, 0, 0, 549,
	0, 0, 79, 86, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 80, 0,
	108, 104, 118, 75, 116, 111, 98, 90, 91, 74,
	0, 107, 83, 88, 82, 102, 113, 114, 81, 128,
	78, 122, 77, 0, 121, 101, 0, 112, 117, 99,
	96, 76, 115, 97, 95, 92, 85, 0, 0, 103,
	110, 119, 129, 0, 0, 124, 125, 126, 84, 0,
	404, 0, 0, 0, 0, 0, 94, 0, 0, 109,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 93, 127, 106, 87, 120, 71, 0, 403,
	0, 0, 0, 0, 0, 0, 79, 86, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 80, 0, 108, 104, 118, 75, 116, 111,
	98, 90, 91, 74, 0, 107, 83, 88, 82, 102,
	113, 114, 81, 128, 78, 122, 77, 0, 121, 101,
	0, 112, 117, 99, 96, 76, 115, 97, 95, 92,
	85, 0, 0, 103, 110, 119, 129, 0, 0, 124,
	125, 126, 84, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 109, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 93, 127, 106, 87,
	120, 244, 0, 966, 0, 0, 0, 0, 0, 0,
	79, 86, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 80, 0, 108, 104,
	118, 75, 116, 111, 98, 90, 91, 74, 0, 107,
	83, 88, 82, 102, 113, 114, 81, 128, 78, 122,
	77, 0, 121, 101, 0, 112, 117, 99, 96, 76,
	115, 97, 95, 92, 85, 0, 0, 0, 110, 119,
	129, 103, 0, 124, 125, 126, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 109, 100, 0, 0, 0, 0, 0, 73, 0,
	93, 127, 106, 87, 120, 0, 51, 0, 0, 244,
	0, 0, 0, 0, 0, 86, 0, 0, 79, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 80, 0, 108, 104, 118, 75,
	116, 111, 98, 90, 91, 74, 0, 107, 83, 88,
	82, 102, 113, 114, 81, 128, 78, 122, 77, 0,
	121, 101, 0, 112, 117, 99, 96, 76, 115, 97,
	95, 92, 85, 0, 0, 103, 110, 119, 129, 0,
	0, 124, 125, 126, 84, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 109, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 93, 127,
	106, 87, 120, 71, 0, 794, 0, 0, 0, 0,
	0, 0, 79, 86, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 80, 0,
	108, 104, 118, 75, 116, 111, 98, 90, 91, 74,
	0, 107, 83, 88, 82, 102, 113, 114, 81, 128,
	78, 122, 77, 0, 121, 101, 0, 112, 117, 99,
	96, 76, 115, 97, 95, 92, 85, 0, 0, 0,
	110, 119, 129, 103, 0, 124, 125, 126, 0, 0,
	0, 393, 84, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 109, 100, 0, 0, 0, 0, 0,
	73, 0, 93, 127, 106, 87, 120, 0, 0, 0,
	0, 244, 0, 0, 0, 0, 0, 86, 0, 0,
	79, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 80, 0, 108, 104,
	118, 75, 116, 111, 98, 90, 91, 74, 0, 107,
	83, 88, 82, 102, 113, 114, 81, 128, 78, 122,
	77, 0, 121, 101, 0, 112, 117, 99, 96, 76,
	115, 97, 95, 92, 85, 0, 0, 103, 110, 119,
	129, 0, 0, 124, 125, 126, 84, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 109, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	93, 127, 106, 87, 120, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 86, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	80, 0, 108, 104, 118, 75, 116, 111, 98, 90,
	91, 74, 0, 107, 83, 88, 82, 102, 113, 114,
	81, 128, 78, 122, 77, 0, 121, 101, 0, 112,
	117, 99, 96, 76, 115, 97, 95, 92, 85, 0,
	0, 103, 110, 119, 129, 0, 0, 124, 125, 126,
	84, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 109, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 93, 127, 106, 87, 120, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 86,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 80, 0, 108, 104, 118, 75,
	116, 111, 98, 90, 91, 74, 0, 107, 83, 88,
	82, 102, 113, 114, 81, 128, 78, 122, 77, 0,
	121, 101, 0, 112, 117, 99, 96, 76, 115, 97,
	95, 92, 85, 0, 0, 103, 110, 119, 129, 0,
	0, 124, 125, 126, 84, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 109, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 93, 127,
	106, 87, 120, 244, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 86, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 80, 0,
	108, 104, 118, 75, 116, 111, 98, 90, 91, 74,
	0, 107, 83, 88, 82, 102, 113, 114, 81, 128,
	78, 122, 77, 0, 121, 101, 0, 112, 117, 99,
	96, 76, 115, 97, 95, 92, 85, 0, 0, 0,
	110, 119, 129, 0, 0, 124, 125, 126, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 93, 127, 106, 87, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 89,
}
var yyPact = [...]int{

	66, -1000, -177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 670, 723, -1000, -1000, -1000, -1000, -1000, 470, 1082,
	28, -29, 58, 57, 1803, 50, 6578, -1000, -1000, 266,
	-1000, -168, -1000, -1000, -1000, -1000, -1000, -1000, 478, -1000,
	-1000, -1000, -1000, -1000, 655, 668, 509, 634, 545, -1000,
	28, 6578, 699, 1580, -148, 323, 25, 55, 25, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	33, -1000, 13, 400, 13, 6578, 6578, -1000, 698, -76,
	696, -25, -1000, -1000, -83, -1000, -89, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 6578, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 321, 592, 4329,
	4329, 670, -1000, 478, -1000, -1000, -1000, 588, -1000, -1000,
	211, 6116, 595, 85, 6578, 437, 2024, -1000, -1000, -1000,
	177, 5492, -1000, -1000, -1000, 591, -1000, -1000, -1000, -1000,
	-1000, -1000, 661, 399, -1000, 1390, 6578, 196, 393, 6578,
	6578, 6578, 629, 507, 6578, -1000, -1000, -1000, 6578, 680,
	6578, 6578, 6578, -1000, -1000, 683, -1000, 680, -1000, -1000,
	-1000, -1000, -1000, -1000, 717, 114, 432, -1000, 4329, 4712,
	448, 448, -1000, -1000, 73, -1000, -1000, 4512, 4512, 4512,
	4512, 4512, 4512, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 448, 83, -1000, 4135,
	448, 448, 448, 448, 448, 448, 4329, 448, 448, 448,
	448, 448, 448, 448, 448, 448, 448, 448, 448, 448,
	-1000, -1000, 460, -1000, 307, 655, 321, 545, 5338, 522,
	-1000, -1000, 521, 6578, -1000, 6424, 3352, 678, 2024, 437,
	4329, 92, -1000, -1000, -1000, -1000, -154, -163, 113, 200,
	-70, -1000, -1000, 462, -1000, 462, 462, 462, 462, -44,
	-44, -44, -44, -1000, -1000, -1000, -1000, -1000, 483, -1000,
	462, 462, 462, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 479, 479, 479, 469, 469, -1000, 627, 505, -1000,
	49, -1000, -1000, 6578, -1000, -1000, 678, 6578, -1000, -1000,
	-1000, 655, -87, -1000, -1000, -1000, 561, 4329, 4329, 254,
	4329, 4329, 135, 4512, 252, 152, 4512, 4512, 4512, 4512,
	4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512,
	4512, 251, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	391, -1000, 478, 447, 447, 93, 93, 93, 93, 93,
	1299, 3553, 3131, 321, 397, 184, 4135, 3747, 3747, 4329,
	4329, 3747, 635, 186, 184, 6270, -1000, 321, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3747, 3747, 3747, 3747, 4329,
	-1000, -1000, -1000, 592, -1000, 635, 664, -1000, 571, 566,
	3747, -1000, 501, 6424, 448, -1000, 5184, -1000, 472, -1000,
	176, -1000, 82, -1000, -1000, -1000, 670, 4329, -1000, 184,
	-1000, 383, 448, -1000, -64, 153, -1000, -1000, 476, 620,
	130, 364, -1000, -1000, 598, -1000, 158, -72, -1000, -1000,
	259, -44, -44, -1000, -1000, 92, 589, 92, 92, 92,
	293, -1000, -1000, -1000, -1000, 257, -1000, -1000, -1000, 245,
	-1000, -1000, 6578, -1000, 127, 150, 32, 7, 6, -9,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 272, -1000, 557, 135,
	144, -1000, -1000, 268, -1000, -1000, 184, 184, 797, -1000,
	-1000, -1000, -1000, 252, 4512, 4512, 4512, 623, 797, 3570,
	603, 568, 93, 195, 195, 116, 116, 116, 116, 116,
	261, 261, -1000, -1000, -1000, 321, -1000, -1000, -1000, 321,
	3747, 436, -1000, -1000, 4704, 80, 448, 79, -1000, -1000,
	4329, -1000, 321, 332, 332, 102, 180, 332, 3747, 183,
	-1000, 4329, 321, -1000, 332, 321, 332, 332, -1000, -1000,
	6578, -1000, -1000, -1000, -1000, 500, -1000, 624, 429, 424,
	-1000, -1000, 3941, 321, 390, 77, 670, 6424, 4329, 3131,
	655, 184, -1000, 356, 593, 148, 348, 6270, -1000, 345,
	-1000, -1000, 498, 86, -1000, -1000, -1000, 414, 92, 92,
	-1000, 147, -1000, -1000, -1000, 388, -1000, 433, 353, 2468,
	-1000, 6578, -1000, -1000, -1000, -1000, -1000, 343, -45, 470,
	341, 323, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	623, 797, 248, -1000, 4512, 4512, -1000, -1000, 332, 3747,
	-1000, -1000, 5958, -1000, -1000, 2689, 3747, 2910, 184, -1000,
	-1000, -1000, 61, 251, 61, -122, 445, 181, -1000, 4329,
	136, -1000, -1000, -1000, -1000, -1000, -1000, 678, 5804, 619,
	-1000, 448, -1000, -1000, 464, 6270, 6270, 655, -1000, 184,
	-1000, -1000, 321, -1000, -51, 227, -1000, 320, -1000, 462,
	-1000, -65, 704, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 271, 222, -1000, 221, -1000, -1000,
	-1000, -1000, -1000, -1000, 586, -1000, -1000, -1000, -1000, 4512,
	797, 797, -1000, -1000, -1000, -1000, 76, 321, -1000, 321,
	462, 462, -1000, 462, 469, -1000, 462, -26, 462, -28,
	321, 321, 448, -113, -1000, 184, 4329, 675, 428, 726,
	-1000, -1000, -1000, 631, 4867, 5021, 702, -1000, 448, -1000,
	478, 72, -1000, -1000, 2468, 145, -1000, -1000, 6270, -1000,
	119, -1000, -94, -1000, 354, 333, 311, 797, 2247, -1000,
	-1000, -1000, 53, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4512, 321, 269, 184, 673, 660, 5804, 5804, 5804,
	5804, -1000, 537, 535, -1000, 536, 529, 549, 6578, -1000,
	318, 4867, 89, -1000, 5646, -1000, -1000, 6424, 424, 321,
	6270, -1000, 298, -1000, 205, 618, -1000, 601, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 30, -1000, -1000, -1000, 4329,
	4329, 726, 485, 497, -1000, -1000, -1000, -1000, 526, -1000,
	510, -1000, -1000, -1000, -1000, -1000, 51, 40, 38, -1000,
	423, -1000, -1000, -1000, -1000, 253, -1000, -1000, 321, 34,
	-137, 184, 416, 4329, 4329, -1000, -1000, 448, 448, 448,
	-1000, -1000, 556, -128, -140, 184, 184, 6270, 6270, 6270,
	-1000, 553, -1000, 315, -1000, 315, 315, -134, -1000, 6270,
	-1000, -1000, -138, -1000, -142, -1000,
}
var yyPgo = [...]int{

	0, 983, 981, 978, 969, 964, 956, 17, 382, 947,
	944, 943, 942, 941, 940, 937, 936, 934, 926, 918,
	917, 914, 910, 907, 58, 904, 903, 902, 43, 885,
	49, 884, 882, 881, 20, 78, 28, 26, 3, 880,
	15, 32, 9, 879, 878, 10, 876, 79, 873, 46,
	872, 870, 2, 21, 869, 868, 864, 863, 42, 153,
	862, 861, 860, 859, 858, 857, 34, 1, 23, 24,
	16, 844, 4, 5, 843, 40, 828, 821, 817, 814,
	45, 811, 41, 807, 47, 39, 806, 33, 8, 29,
	50, 48, 805, 800, 797, 276, 796, 116, 298, 795,
	794, 791, 788, 59, 0, 6, 55, 27, 787, 611,
	60, 7, 786, 784, 1029, 12, 25, 783, 19, 782,
	781, 780, 779, 776, 775, 765, 170, 764, 763, 761,
	13, 81, 758, 756, 755, 753, 751, 44, 14, 750,
	749, 746, 745, 31, 743, 38, 22, 742, 741, 737,
	11, 735, 731, 730, 52, 142, 729, 91,
}
var yyR1 = [...]int{

	0, 152, 153, 153, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 7, 7, 7, 8, 9, 9, 10, 10,
	11, 11, 27, 27, 12, 13, 14, 14, 117, 117,
	15, 15, 15, 15, 18, 146, 148, 133, 133, 132,
	132, 134, 134, 147, 147, 147, 143, 120, 120, 120,
	123, 123, 121, 121, 121, 121, 121, 121, 121, 122,
	122, 122, 122, 122, 124, 124, 124, 124, 124, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 142, 142, 126, 126, 137, 137, 138,
	138, 138, 135, 135, 136, 136, 139, 139, 139, 127,
	127, 127, 127, 127, 127, 128, 128, 140, 140, 130,
	130, 130, 131, 131, 141, 141, 141, 141, 141, 129,
	129, 144, 149, 149, 149, 149, 145, 145, 151, 151,
	150, 16, 16, 16, 16, 16, 16, 16, 16, 17,
	17, 17, 1, 19, 2, 3, 4, 5, 5, 5,
	5, 119, 119, 119, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 33, 33, 49, 49, 23,
	21, 22, 22, 22, 22, 156, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 36,
	36, 35, 35, 37, 37, 37, 37, 108, 108, 108,
	107, 107, 39, 39, 40, 40, 41, 41, 42, 42,
	42, 50, 43, 43, 43, 43, 113, 113, 112, 112,
	112, 111, 111, 44, 44, 44, 44, 45, 45, 45,
	45, 46, 46, 48, 48, 47, 47, 51, 51, 51,
	51, 52, 52, 53, 53, 38, 38, 38, 38, 38,
	38, 38, 96, 96, 55, 55, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 65, 65, 65, 65,
	65, 65, 56, 56, 56, 56, 56, 56, 56, 34,
	34, 66, 66, 66, 72, 67, 67, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 63, 63, 63,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 62,
	62, 62, 62, 62, 62, 62, 62, 157, 157, 64,
	64, 64, 64, 31, 31, 31, 31, 31, 116, 116,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 76, 76, 32, 32, 74, 74, 75,
	77, 77, 73, 73, 73, 58, 58, 58, 58, 58,
	58, 58, 60, 60, 60, 78, 78, 79, 79, 80,
	80, 81, 81, 82, 83, 83, 83, 84, 84, 84,
	84, 85, 85, 85, 57, 57, 57, 57, 57, 57,
	86, 86, 86, 86, 87, 87, 68, 68, 70, 70,
	69, 71, 88, 88, 89, 90, 90, 91, 91, 93,
	93, 93, 92, 92, 92, 94, 94, 97, 97, 98,
	98, 95, 95, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 100, 100, 100, 101, 101, 102, 102,
	102, 105, 105, 106, 106, 109, 109, 110, 110, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 154, 155, 114, 115, 115, 115,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 10, 1, 3, 1, 3,
	6, 7, 1, 1, 8, 7, 3, 4, 1, 1,
	2, 9, 4, 7, 4, 4, 3, 0, 3, 0,
	4, 0, 3, 1, 3, 3, 8, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 4, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 1, 2, 0,
	2, 2, 2, 2, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 0, 2, 1, 2, 1, 0,
	2, 4, 2, 3, 2, 2, 1, 1, 1, 3,
	2, 6, 7, 7, 7, 9, 7, 7, 7, 4,
	5, 4, 3, 3, 2, 2, 3, 2, 3, 2,
	2, 1, 1, 1, 3, 5, 6, 5, 5, 5,
	3, 3, 6, 3, 5, 0, 3, 0, 2, 4,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 5, 5, 3, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 1, 3, 0, 2, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -152, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -23, -21, -2, -3, -4, -5,
	-22, -8, -9, 6, -27, 8, 9, 29, -18, 110,
	111, 112, 134, 114, 127, 32, 49, 212, 129, 218,
	220, 221, 224, 223, 24, 128, 132, 133, -154, 7,
	196, 52, -153, 228, -80, 14, -26, 5, -24, -156,
	-24, -24, -24, -24, -146, 52, 188, -102, 117, 123,
	-105, 55, -104, 202, 141, 135, 163, 154, 152, 64,
	130, 150, 146, 144, 26, 168, 219, 207, 145, 225,
	139, 140, 167, 204, 34, 166, 162, 165, 138, 161,
	38, 157, 147, 17, 133, 125, 206, 143, 132, 37,
	172, 137, 159, 148, 149, 164, 136, 160, 134, 173,
	208, 156, 153, 119, 177, 178, 179, 205, 151, 174,
	-95, 121, 117, 118, 188, 117, 117, -119, 176, 31,
	186, 110, 180, 181, 183, 185, 117, 55, -103, -104,
	70, 21, 23, 170, 73, 105, 15, 74, 155, 158,
	104, 197, 47, 189, 190, 187, 188, 175, 28, 9,
	24, 128, 20, 98, 112, 77, 78, 213, 131, 22,
	129, 67, 18, 50, 10, 12, 13, 122, 121, 89,
	118, 45, 7, 106, 25, 86, 41, 27, 43, 87,
	16, 191, 192, 30, 201, 100, 48, 35, 71, 65,
	68, 51, 69, 14, 46, 216, 215, 88, 113, 196,
	44, 6, 200, 29, 127, 42, 76, 120, 66, 217,
	5, 123, 8, 49, 124, 193, 194, 195, 33, 214,
	75, 11, 117, -109, 55, -104, -114, -114, 58, -114,
	222, -114, -114, -114, -114, -114, -114, -7, -84, 16,
	15, -10, -8, -154, 6, 19, 20, -30, 39, 40,
	-25, -95, -47, -109, 10, -90, -117, -91, 226, 225,
	-106, -93, -105, -103, 158, 155, 227, 186, 110, 31,
	117, 176, 209, -147, -143, 55, -98, 122, 118, -98,
	117, -97, 122, 55, -97, -47, -47, -114, 10, 176,
	10, 117, 188, -114, -114, 182, -114, 185, -47, -114,
	-114, -155, 54, -85, 18, 30, -38, -54, 71, -59,
	28, 22, -58, -55, -73, -71, -72, 105, 94, 95,
	102, 72, 106, -63, -61, -62, -64, 57, 56, 58,
	59, 60, 61, 65, 66, 67, -105, -109, -69, -154,
	43, 44, 197, 198, 201, 199, 74, 33, 187, 195,
	194, 193, 191, 192, 189, 190, 122, 188, 100, 196,
	55, -104, -81, -82, -38, -80, -7, -24, 35, -28,
	20, 63, -48, 25, -47, 29, 107, -47, 53, -90,
	79, -92, -105, 57, 28, 29, 15, 54, 53, -120,
	-123, -125, -124, -121, -122, 152, 153, 105, 156, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 130,
	148, 149, 150, 151, 135, 136, 137, 138, 139, 140,
	141, 143, 144, 145, 146, 147, -109, 71, 55, -47,
	-47, -47, 22, 51, -109, -47, -49, 10, -47, -47,
	-47, -33, 10, -49, -114, 8, 89, 70, 69, 86,
	53, 17, -38, -56, 89, 71, 87, 88, 73, 91,
	90, 101, 94, 95, 96, 97, 98, 99, 100, 92,
	93, 104, 79, 80, 81, 82, 83, 84, 85, -96,
	-154, -72, -154, 108, 109, -59, -59, -59, -59, -59,
	-59, -154, 107, -7, -67, -38, -154, -154, -154, -154,
	-154, -154, -154, -76, -38, -154, -157, -154, -157, -157,
	-157, -157, -157, -157, -157, -154, -154, -154, -154, 53,
	-83, 23, 24, -84, -155, -30, -60, -105, 58, 61,
	-29, 42, -57, 29, 33, -7, -154, -47, -88, -89,
	-73, -105, -109, -110, -109, -103, -53, 11, -91, -38,
	-131, 104, 211, -148, -133, 219, -143, -144, -149, 125,
	123, -145, 118, 27, -139, 65, 71, -135, 173, -126,
	52, -126, -126, -126, -126, -130, 155, -130, -130, -130,
	52, -126, -126, -126, -137, 52, -137, -137, -138, 52,
	-138, 22, 51, -99, 113, 219, 197, 115, 112, 116,
	111, 170, 155, 64, 28, 14, 208, 55, -47, -114,
	-53, -47, -114, -114, -114, -84, 184, -114, 37, -38,
	-38, -65, 65, 71, 66, 67, -38, -38, -59, -66,
	-69, -72, 62, 89, 87, 88, 73, -59, -59, -59,
	-59, -59, -59, -59, -59, -59, -59, -59, -59, -59,
	-59, -59, -116, 55, 57, 55, -58, -58, -105, -36,
	20, -35, -37, 96, -38, -109, -106, -110, -103, -155,
	53, -155, -7, -35, -35, -38, -38, -35, -28, -74,
	-75, 75, -105, -155, -35, -36, -35, -35, -82, -85,
	-94, 18, 10, 33, 33, -35, -87, 51, -88, -68,
	-70, -69, -154, -7, -86, -105, -53, 53, 79, 107,
	-80, -38, 55, -154, -134, 170, 79, 52, 27, -145,
	55, 55, -127, 28, 65, -136, 174, 58, -130, -130,
	-131, 29, -131, -131, -131, -142, 57, 58, 58, -47,
	-114, -100, -101, 120, 21, 118, 27, 79, 120, 126,
	126, 126, -114, -114, 57, 38, 65, 66, 67, -66,
	-59, -59, -59, -34, 131, 70, -155, -155, -35, 53,
	-108, -107, 21, -105, 57, 107, -154, 107, -38, -155,
	-155, -155, 53, 124, 21, -155, -35, -77, -75, 77,
	-38, -155, -155, -155, -155, -155, -47, -39, 10, 26,
	-87, 53, -155, -155, -155, 53, 107, -80, -89, -38,
	-106, -84, 55, -132, 28, 79, 55, -151, -150, -105,
	55, -128, 51, 57, 58, 59, 65, 187, 54, -131,
	-131, 55, 105, 54, 53, 53, 54, 53, -115, -154,
	-106, -47, -114, 55, 155, -146, 55, -143, -34, 70,
	-59, -59, -155, -37, -107, 96, -110, -36, -106, -118,
	105, 152, 130, 150, 146, 167, 157, 172, 148, 173,
	-116, -118, 202, -80, 78, -38, 76, -53, -40, -41,
	-42, -43, -50, -72, -154, -47, 27, -70, 33, -7,
	-154, -105, -105, -84, -155, 158, 58, 54, 53, -126,
	-140, 170, 8, 57, 58, 58, 29, -59, 107, -155,
	-155, -126, -126, -126, -138, -126, 140, -126, 140, -155,
	-155, -154, -32, 200, -38, -78, 12, 53, -44, -45,
	-46, 41, 45, 47, 42, 43, 44, 48, -113, 21,
	-40, -154, -112, -111, 21, -109, 57, 8, -68, -7,
	107, -115, 79, -150, -141, 125, 27, 123, 187, 54,
	54, 55, 96, -130, 55, -59, -155, 57, -79, 13,
	15, -41, -42, -41, -42, 41, 41, 41, 46, 41,
	46, 41, -45, -109, -155, -51, 49, 121, 50, -111,
	-88, -155, -105, 55, -129, 64, 27, 27, -31, 89,
	205, -38, -67, 51, 51, 41, 41, 118, 118, 118,
	57, -155, 203, 48, 206, -38, -38, -154, -154, -154,
	38, 204, 207, -52, -105, -52, -52, 38, -155, 53,
	-155, -155, 205, -105, 206, 207,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 399, 0, 185, 185, 185, 185, 185, 0, 468,
	451, 0, 0, 0, 0, 0, 0, 635, 635, 0,
	635, 0, 635, 635, 635, 635, 635, 635, 0, 32,
	33, 633, 1, 3, 407, 0, 0, 189, 192, 187,
	451, 0, 0, 0, 40, 0, 449, 0, 449, 469,
	470, 471, 472, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	0, 452, 447, 0, 447, 0, 0, 635, 559, 516,
	490, 492, 635, 635, 0, 635, 558, 161, 162, 163,
	479, 480, 481, 482, 483, 484, 485, 486, 487, 488,
	489, 491, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 517, 518, 519, 520, 521,
	522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
	532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 0, 180, 475, 476, 154, 155, 635, 157,
	635, 159, 160, 181, 182, 183, 184, 26, 411, 0,
	0, 399, 28, 0, 185, 190, 191, 195, 193, 194,
	186, 0, 0, 245, 0, 36, 0, 435, 38, -2,
	0, 0, 473, 474, -2, 487, 441, 490, 492, 516,
	558, 559, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 152, 153, 164, 0, 177,
	0, 0, 0, 170, 171, 175, 173, 177, 635, 156,
	158, 27, 634, 22, 0, 0, 408, 255, 0, 260,
	262, 0, 297, 298, 299, 300, 301, 0, 0, 0,
	0, 0, 0, 323, 324, 325, 326, 385, 386, 387,
	388, 389, 390, 391, 264, 265, 382, 0, 431, 0,
	0, 0, 0, 0, 0, 0, 373, 0, 347, 347,
	347, 347, 347, 347, 347, 347, 0, 0, 0, 0,
	-2, -2, 400, 401, 404, 407, 26, 192, 0, 197,
	196, 188, 0, 0, 244, 0, 0, 253, 0, 37,
	0, 122, 442, 443, 444, 440, 0, 47, 0, 106,
	102, 58, 59, 95, 61, 95, 95, 95, 95, 119,
	119, 119, 119, 87, 88, 89, 90, 91, 0, 74,
	95, 95, 95, 78, 62, 63, 64, 65, 66, 67,
	68, 97, 97, 97, 99, 99, 42, 0, 0, 44,
	0, 149, 448, 0, 151, 635, 253, 0, 635, 635,
	635, 407, 0, 635, 179, 412, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 284, 285, 286, 287, 288, 261,
	0, 275, 0, 0, 0, 317, 318, 319, 320, 321,
	0, 199, 0, 26, 0, 295, 0, 0, 0, 0,
	0, 0, 195, 0, 374, 0, 339, 0, 340, 341,
	342, 343, 344, 345, 346, 0, 199, 0, 0, 0,
	403, 405, 406, 411, 29, 195, 0, 392, 0, 0,
	0, 198, 424, 0, 0, -2, 0, 243, 253, 432,
	0, 382, 0, 246, 477, 478, 399, 0, 436, 437,
	438, 0, 0, 45, 51, 0, 54, 55, 0, 0,
	0, 0, 136, 137, 109, 107, 0, 104, 103, 60,
	0, 119, 119, 81, 82, 122, 0, 122, 122, 122,
	0, 75, 76, 77, 69, 0, 70, 71, 72, 0,
	73, 450, 0, 635, 463, 0, 460, 0, 458, 0,
	453, 454, 455, 456, 457, 459, 461, 462, 150, 165,
	635, 178, 167, 168, 169, 635, 0, 174, 0, 256,
	257, 259, 276, 0, 278, 280, 409, 410, 266, 267,
	291, 292, 293, 0, 0, 0, 0, 289, 271, 0,
	302, 303, 304, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 316, 358, 359, 0, 314, 315, 322, 0,
	0, 200, 201, 203, 207, 0, 383, 0, -2, 294,
	0, 430, 26, 0, 0, 0, 0, 0, 0, 380,
	377, 0, 0, 348, 0, 0, 0, 0, 402, 23,
	0, 445, 446, 393, 394, 212, 30, 0, 424, 414,
	426, 428, 0, 26, 0, 420, 399, 0, 0, 0,
	407, 254, 123, 0, 49, 0, 0, 0, 132, 0,
	134, 135, 115, 0, 108, 57, 105, 0, 122, 122,
	83, 0, 84, 85, 86, 0, 93, 0, 0, 636,
	141, 0, 635, 464, 465, 466, 467, 0, 0, 0,
	0, 0, 166, 172, 176, 413, 277, 279, 281, 268,
	289, 272, 0, 269, 0, 0, 263, 327, 0, 0,
	204, 208, 0, 210, 211, 0, 199, 0, 296, -2,
	330, 331, 0, 0, 0, 0, 399, 0, 378, 0,
	0, 338, 349, 350, 351, 352, 24, 253, 0, 0,
	31, 0, 429, -2, 0, 0, 0, 407, 433, 434,
	383, 35, 0, 46, 0, 0, 48, 0, 138, 95,
	133, 117, 0, 110, 111, 112, 113, 114, 96, 79,
	80, 120, 121, 92, 0, 0, 100, 0, 43, 637,
	638, 142, 143, 144, 0, 146, 147, 148, 270, 0,
	290, 273, 328, 202, 209, 205, 0, 0, 384, 0,
	95, 95, 363, 95, 99, 366, 95, 368, 95, 371,
	0, 0, 0, 375, 337, 381, 0, 395, 213, 214,
	216, 217, 218, 226, 0, 228, 0, 427, 0, -2,
	0, 422, 421, 34, 636, 0, 52, 131, 0, 140,
	124, 118, 0, 94, 0, 0, 0, 274, 0, 329,
	332, 360, 119, 364, 365, 367, 369, 370, 372, 334,
	333, 0, 0, 0, 379, 397, 0, 0, 0, 0,
	0, 233, 0, 0, 236, 0, 0, 0, 0, 227,
	0, 0, 247, 229, 0, 231, 232, 0, 417, 26,
	0, 41, 0, 139, 129, 0, 126, 128, 116, 98,
	101, 145, 206, 361, 362, 353, 336, 376, 25, 0,
	0, 215, 222, 0, 225, 234, 235, 237, 0, 239,
	0, 241, 242, 219, 220, 221, 0, 0, 0, 230,
	425, -2, 423, 50, 56, 0, 125, 127, 0, 0,
	0, 398, 396, 0, 0, 238, 240, 0, 0, 0,
	130, 335, 0, 0, 0, 223, 224, 0, 0, 0,
	354, 0, 357, 0, 251, 0, 0, 355, 248, 0,
	249, 250, 0, 252, 0, 356,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 107, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 228,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:274
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:279
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:280
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:284
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:307
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:315
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:319
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:326
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:332
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:336
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:342
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:346
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:353
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:364
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.str = InsertStr
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.str = ReplaceStr
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:386
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:392
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:398
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:402
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:408
		{
			yyVAL.str = SessionStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:412
		{
			yyVAL.str = GlobalStr
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:419
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 41:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:425
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:432
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:440
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:447
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:465
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:471
		{
			yyVAL.str = ""
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:475
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:480
		{
			yyVAL.str = ""
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:484
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:489
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:493
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:499
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:504
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:508
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:514
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:525
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:693
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:698
		{
			yyVAL.optVal = nil
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:702
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:707
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:711
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:719
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:723
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:729
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:737
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:741
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:746
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:750
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:756
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:760
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:764
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:769
		{
			yyVAL.optVal = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:773
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:777
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:781
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:785
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:789
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:794
		{
			yyVAL.optVal = nil
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:798
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:803
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:807
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:812
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:816
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:820
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.str = ""
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:829
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:834
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:838
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:842
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:850
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:855
		{
			yyVAL.optVal = nil
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:859
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:865
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:871
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:875
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:879
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:883
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:903
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:909
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:915
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:919
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:924
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:929
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:933
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:937
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 147:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:941
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:945
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:952
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:960
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:965
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:975
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:981
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.statement = &Xa{}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:993
		{
			yyVAL.statement = &Explain{}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:999
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1027
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1042
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1058
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1087
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1096
		{
			yyVAL.tableName = TableName{}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.statement = &OtherRead{}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.statement = &OtherRead{}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1135
		{
			setAllowComments(yylex, true)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.bytes2 = nil
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.str = UnionStr
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = UnionAllStr
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = UnionDistinctStr
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1168
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.str = SQLCacheStr
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1181
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.str = DistinctStr
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1194
		{
			yyVAL.str = StraightJoinHint
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.selectExprs = nil
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1236
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1280
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1311
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1315
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.empty = struct{}{}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.empty = struct{}{}
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.str = JoinStr
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.str = JoinStr
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.str = JoinStr
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.str = StraightJoinStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.str = LeftJoinStr
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.str = LeftJoinStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.str = RightJoinStr
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.str = RightJoinStr
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = NaturalJoinStr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1390
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1414
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.indexHints = nil
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1427
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.expr = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1456
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = ""
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 274:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.str = IsNullStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.str = IsNotNullStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.str = IsTrueStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.str = IsNotTrueStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.str = IsFalseStr
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.str = IsNotFalseStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.str = EqualStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.str = LessThanStr
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = GreaterThanStr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = LessEqualStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = GreaterEqualStr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = NotEqualStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.expr = nil
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1613
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1617
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1643
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1727
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1735
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1757
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1783
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 334:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1809
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 335:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1867
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.str = BooleanModeStr
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 356:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.str = QueryExpansionStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.expr = nil
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.str = string("")
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.expr = nil
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.expr = &NullVal{}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2074
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.exprs = nil
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = nil
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2105
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.orderBy = nil
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.str = AscScr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.str = AscScr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.str = DescScr
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.limit = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.str = ""
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.str = ForUpdateStr
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.str = ShareModeStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2190
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2194
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 417:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2207
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 423:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.updateExprs = nil
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2245
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2297
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.bytes = []byte("charset")
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2321
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.expr = &Default{}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.byt = 0
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.byt = 1
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.byt = 0
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.byt = 1
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2351
		{
			yyVAL.str = IgnoreStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2614
		{
			decNesting(yylex)
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2619
		{
			forceEOF(yylex)
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2624
		{
			forceEOF(yylex)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2628
		{
			forceEOF(yylex)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2632
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
