//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	partitions            Partitions
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	setVal                SetVal
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	tableSpec             *TableSpec
	tableOptionListOpt    TableOptionListOpt
	tableOptionList       []*TableOption
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	lengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	indexOptionList       []*IndexOption
	indexOption           *IndexOption
	indexLockAndAlgorithm *IndexLockAndAlgorithm
	lockOptionType        LockOptionType
	algorithmOptionType   AlgorithmOptionType
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      []*ColumnOption
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    []*DatabaseOption
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	partitionOption       PartitionOption
	showFilter            *ShowFilter
	explainType           ExplainType
	checksumOptionEnum    ChecksumOptionEnum
	optimizeOptionEnum    OptimizeOptionEnum
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALGORITHM = 57361
const BTREE = 57362
const CASCADE = 57363
const CONSTRAINT = 57364
const FULLTEXT = 57365
const HASH = 57366
const INDEXES = 57367
const KEY_BLOCK_SIZE = 57368
const KEYS = 57369
const PARSER = 57370
const RESTRICT = 57371
const RTREE = 57372
const SPATIAL = 57373
const SYMBOL = 57374
const TEMPORARY = 57375
const UNIQUE = 57376
const KEY = 57377
const ALL = 57378
const DISTINCT = 57379
const AS = 57380
const EXISTS = 57381
const ASC = 57382
const INTO = 57383
const DUPLICATE = 57384
const DEFAULT = 57385
const SET = 57386
const LOCK = 57387
const FULL = 57388
const CHECKSUM = 57389
const VALUES = 57390
const LAST_INSERT_ID = 57391
const NEXT = 57392
const VALUE = 57393
const SHARE = 57394
const MODE = 57395
const SQL_NO_CACHE = 57396
const SQL_CACHE = 57397
const JOIN = 57398
const STRAIGHT_JOIN = 57399
const LEFT = 57400
const RIGHT = 57401
const INNER = 57402
const OUTER = 57403
const CROSS = 57404
const NATURAL = 57405
const USE = 57406
const FORCE = 57407
const ON = 57408
const ID = 57409
const HEX = 57410
const STRING = 57411
const INTEGRAL = 57412
const FLOAT = 57413
const HEXNUM = 57414
const VALUE_ARG = 57415
const LIST_ARG = 57416
const COMMENT = 57417
const COMMENT_KEYWORD = 57418
const NULL = 57419
const TRUE = 57420
const FALSE = 57421
const OFF = 57422
const OR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const SHIFT_LEFT = 57440
const SHIFT_RIGHT = 57441
const DIV = 57442
const MOD = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const MODIFY = 57456
const COLUMN = 57457
const IF = 57458
const IGNORE = 57459
const INDEX = 57460
const PRIMARY = 57461
const QUICK = 57462
const TABLE = 57463
const TO = 57464
const VIEW = 57465
const USING = 57466
const DESC = 57467
const DESCRIBE = 57468
const EXPLAIN = 57469
const SHOW = 57470
const DATE = 57471
const ESCAPE = 57472
const HELP = 57473
const REPAIR = 57474
const TRUNCATE = 57475
const OPTIMIZE = 57476
const BIT = 57477
const TINYINT = 57478
const SMALLINT = 57479
const MEDIUMINT = 57480
const INT = 57481
const INTEGER = 57482
const BIGINT = 57483
const INTNUM = 57484
const REAL = 57485
const DOUBLE = 57486
const FLOAT_TYPE = 57487
const DECIMAL = 57488
const NUMERIC = 57489
const TIME = 57490
const TIMESTAMP = 57491
const DATETIME = 57492
const YEAR = 57493
const CHAR = 57494
const VARCHAR = 57495
const BOOL = 57496
const CHARACTER = 57497
const VARBINARY = 57498
const NCHAR = 57499
const CHARSET = 57500
const TEXT = 57501
const TINYTEXT = 57502
const MEDIUMTEXT = 57503
const LONGTEXT = 57504
const BLOB = 57505
const TINYBLOB = 57506
const MEDIUMBLOB = 57507
const LONGBLOB = 57508
const JSON = 57509
const ENUM = 57510
const GEOMETRY = 57511
const POINT = 57512
const LINESTRING = 57513
const POLYGON = 57514
const GEOMETRYCOLLECTION = 57515
const MULTIPOINT = 57516
const MULTILINESTRING = 57517
const MULTIPOLYGON = 57518
const NULLX = 57519
const AUTO_INCREMENT = 57520
const APPROXNUM = 57521
const SIGNED = 57522
const UNSIGNED = 57523
const ZEROFILL = 57524
const FIXED = 57525
const DYNAMIC = 57526
const STORAGE = 57527
const DISK = 57528
const MEMORY = 57529
const COLUMN_FORMAT = 57530
const AVG_ROW_LENGTH = 57531
const COMPRESSION = 57532
const CONNECTION = 57533
const DATA = 57534
const DIRECTORY = 57535
const DELAY_KEY_WRITE = 57536
const ENCRYPTION = 57537
const INSERT_METHOD = 57538
const MAX_ROWS = 57539
const MIN_ROWS = 57540
const PACK_KEYS = 57541
const PASSWORD = 57542
const ROW_FORMAT = 57543
const STATS_AUTO_RECALC = 57544
const STATS_PERSISTENT = 57545
const STATS_SAMPLE_PAGES = 57546
const TABLESPACE = 57547
const DELAYED = 57548
const LOW_PRIORITY = 57549
const HIGH_PRIORITY = 57550
const COMPRESSED = 57551
const REDUNDANT = 57552
const COMPACT = 57553
const TOKUDB_DEFAULT = 57554
const TOKUDB_FAST = 57555
const TOKUDB_SMALL = 57556
const TOKUDB_ZLIB = 57557
const TOKUDB_QUICKLZ = 57558
const TOKUDB_LZMA = 57559
const TOKUDB_SNAPPY = 57560
const TOKUDB_UNCOMPRESSED = 57561
const COLLATION = 57562
const DATABASES = 57563
const TABLES = 57564
const WARNINGS = 57565
const VARIABLES = 57566
const EVENTS = 57567
const BINLOG = 57568
const GTID = 57569
const STATUS = 57570
const COLUMNS = 57571
const FIELDS = 57572
const CURRENT_TIMESTAMP = 57573
const CURRENT_DATE = 57574
const DATABASE = 57575
const SCHEMA = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const QUERY = 57593
const EXPANSION = 57594
const UNUSED = 57595
const FORMAT = 57596
const TREE = 57597
const TRADITIONAL = 57598
const EXTENDED = 57599
const PARTITION = 57600
const PARTITIONS = 57601
const LIST = 57602
const XA = 57603
const DISTRIBUTED = 57604
const ENGINES = 57605
const VERSIONS = 57606
const PROCESSLIST = 57607
const QUERYZ = 57608
const TXNZ = 57609
const KILL = 57610
const ENGINE = 57611
const SINGLE = 57612
const BEGIN = 57613
const START = 57614
const TRANSACTION = 57615
const COMMIT = 57616
const ROLLBACK = 57617
const GLOBAL = 57618
const LOCAL = 57619
const SESSION = 57620
const NAMES = 57621
const ISOLATION = 57622
const LEVEL = 57623
const READ = 57624
const WRITE = 57625
const ONLY = 57626
const REPEATABLE = 57627
const COMMITTED = 57628
const UNCOMMITTED = 57629
const SERIALIZABLE = 57630
const NO_WRITE_TO_BINLOG = 57631
const RADON = 57632
const ATTACH = 57633
const ATTACHLIST = 57634
const DETACH = 57635
const RESHARD = 57636
const CLEANUP = 57637
const RECOVER = 57638
const REBALANCE = 57639

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALGORITHM",
	"BTREE",
	"CASCADE",
	"CONSTRAINT",
	"FULLTEXT",
	"HASH",
	"INDEXES",
	"KEY_BLOCK_SIZE",
	"KEYS",
	"PARSER",
	"RESTRICT",
	"RTREE",
	"SPATIAL",
	"SYMBOL",
	"TEMPORARY",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"COLUMN",
	"IF",
	"IGNORE",
	"INDEX",
	"PRIMARY",
	"QUICK",
	"TABLE",
	"TO",
	"VIEW",
	"USING",
	"DESC",
	"DESCRIBE",
	"EXPLAIN",
	"SHOW",
	"DATE",
	"ESCAPE",
	"HELP",
	"REPAIR",
	"TRUNCATE",
	"OPTIMIZE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"FIXED",
	"DYNAMIC",
	"STORAGE",
	"DISK",
	"MEMORY",
	"COLUMN_FORMAT",
	"AVG_ROW_LENGTH",
	"COMPRESSION",
	"CONNECTION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"INSERT_METHOD",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"PASSWORD",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"TABLESPACE",
	"DELAYED",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"TOKUDB_DEFAULT",
	"TOKUDB_FAST",
	"TOKUDB_SMALL",
	"TOKUDB_ZLIB",
	"TOKUDB_QUICKLZ",
	"TOKUDB_LZMA",
	"TOKUDB_SNAPPY",
	"TOKUDB_UNCOMPRESSED",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"CURRENT_DATE",
	"DATABASE",
	"SCHEMA",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"FORMAT",
	"TREE",
	"TRADITIONAL",
	"EXTENDED",
	"PARTITION",
	"PARTITIONS",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"LOCAL",
	"SESSION",
	"NAMES",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NO_WRITE_TO_BINLOG",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"RECOVER",
	"REBALANCE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:5208

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 31,
	-2, 4,
	-1, 202,
	6, 376,
	7, 376,
	8, 376,
	9, 376,
	18, 376,
	67, 376,
	258, 376,
	-2, 919,
	-1, 386,
	94, 927,
	-2, 733,
	-1, 392,
	94, 782,
	-2, 711,
	-1, 413,
	1, 96,
	315, 96,
	-2, 106,
	-1, 453,
	5, 31,
	-2, 367,
	-1, 534,
	122, 763,
	-2, 759,
	-1, 535,
	122, 764,
	-2, 760,
	-1, 567,
	119, 106,
	169, 106,
	172, 106,
	175, 106,
	-2, 118,
	-1, 618,
	1, 96,
	315, 96,
	-2, 106,
	-1, 626,
	1, 97,
	315, 97,
	-2, 106,
	-1, 783,
	119, 106,
	169, 106,
	172, 106,
	175, 106,
	-2, 119,
	-1, 840,
	35, 326,
	67, 326,
	70, 326,
	135, 326,
	-2, 924,
	-1, 990,
	122, 766,
	-2, 762,
	-1, 1163,
	5, 32,
	-2, 561,
	-1, 1186,
	5, 31,
	-2, 682,
	-1, 1409,
	5, 32,
	-2, 683,
	-1, 1462,
	5, 31,
	-2, 685,
	-1, 1525,
	5, 32,
	-2, 686,
}

const yyPrivate = 57344

const yyLast = 11919

var yyAct = [...]int{

	535, 512, 1545, 1037, 1468, 1358, 1327, 513, 54, 1328,
	658, 1498, 488, 1126, 757, 510, 1401, 1318, 1531, 403,
	1387, 875, 1317, 1504, 1244, 1324, 889, 1271, 1357, 1085,
	453, 3, 1062, 762, 1398, 387, 356, 984, 1148, 61,
	1297, 989, 402, 118, 974, 118, 208, 1128, 1127, 981,
	926, 72, 391, 1064, 1075, 758, 1156, 1000, 1183, 951,
	451, 639, 54, 661, 1100, 844, 487, 914, 552, 628,
	118, 361, 395, 553, 405, 486, 383, 543, 784, 1016,
	446, 797, 627, 625, 416, 355, 1065, 390, 551, 382,
	118, 753, 118, 365, 477, 559, 537, 380, 207, 727,
	885, 419, 82, 113, 472, 473, 60, 65, 414, 354,
	1030, 919, 640, 1029, 118, 630, 1031, 1196, 350, 1197,
	1198, 353, 771, 772, 555, 554, 471, 555, 909, 983,
	770, 490, 554, 341, 1417, 644, 986, 67, 68, 69,
	70, 71, 781, 1469, 1017, 936, 1567, 475, 344, 346,
	345, 347, 348, 1544, 349, 400, 1530, 908, 653, 399,
	1566, 1130, 28, 29, 31, 32, 1518, 398, 1506, 1564,
	1543, 1310, 1517, 397, 1381, 84, 1078, 28, 29, 31,
	32, 1079, 1080, 339, 911, 88, 438, 1129, 923, 417,
	424, 423, 114, 907, 28, 29, 31, 32, 405, 1048,
	33, 375, 374, 41, 646, 428, 54, 54, 1047, 1532,
	432, 648, 430, 431, 371, 370, 372, 449, 1090, 913,
	42, 1507, 1095, 58, 1480, 683, 682, 692, 693, 685,
	686, 687, 688, 689, 690, 691, 684, 868, 58, 694,
	904, 902, 898, 338, 901, 903, 654, 655, 1433, 28,
	29, 31, 32, 1267, 876, 58, 1091, 1246, 1040, 1376,
	458, 452, 76, 1374, 1114, 412, 869, 663, 1490, 918,
	77, 1246, 917, 81, 1323, 916, 91, 84, 90, 1067,
	1489, 35, 36, 37, 742, 39, 906, 86, 1488, 1130,
	410, 83, 409, 115, 408, 420, 1506, 407, 57, 56,
	55, 40, 425, 694, 45, 52, 38, 53, 918, 905,
	58, 917, 820, 1117, 916, 1129, 1298, 1116, 1115, 197,
	1494, 838, 1071, 1072, 1073, 1412, 1455, 1457, 671, 670,
	1074, 508, 509, 706, 707, 1253, 1112, 1366, 1162, 663,
	1160, 647, 1300, 1023, 376, 672, 464, 466, 118, 1507,
	876, 1549, 465, 465, 715, 1277, 460, 684, 669, 1302,
	694, 1306, 928, 1301, 421, 1299, 422, 778, 662, 54,
	1304, 629, 433, 900, 1516, 1088, 1089, 78, 118, 672,
	1303, 1066, 1275, 395, 910, 1254, 743, 1481, 447, 395,
	395, 1038, 540, 1305, 1307, 780, 1456, 1533, 390, 539,
	899, 822, 79, 80, 560, 560, 1312, 416, 670, 1512,
	1113, 1508, 118, 118, 30, 1022, 1092, 1093, 630, 649,
	416, 837, 814, 958, 672, 118, 118, 558, 461, 30,
	1001, 619, 1276, 118, 43, 1166, 1111, 956, 957, 955,
	662, 46, 459, 1070, 47, 48, 30, 50, 49, 545,
	58, 671, 670, 927, 809, 1562, 474, 671, 670, 556,
	954, 118, 112, 51, 111, 1554, 434, 1001, 672, 1173,
	541, 406, 546, 1352, 672, 118, 547, 1353, 1470, 671,
	670, 1280, 1241, 109, 1239, 563, 1314, 1237, 1356, 79,
	80, 1355, 703, 705, 480, 538, 672, 1086, 1078, 1087,
	643, 30, 650, 1079, 1080, 1218, 1217, 108, 1167, 1216,
	818, 1279, 1240, 652, 1238, 618, 1220, 1236, 714, 631,
	1213, 717, 718, 719, 720, 721, 722, 723, 633, 726,
	728, 728, 728, 728, 728, 728, 728, 728, 736, 737,
	738, 739, 641, 395, 716, 1208, 1219, 118, 118, 1207,
	411, 395, 1168, 1206, 975, 667, 976, 1551, 748, 1104,
	1103, 759, 93, 674, 760, 1096, 390, 935, 462, 405,
	812, 1537, 110, 779, 1436, 101, 744, 1141, 1142, 1143,
	1354, 813, 815, 816, 817, 1343, 819, 820, 821, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 671, 670,
	1342, 1221, 659, 877, 878, 879, 1214, 944, 946, 947,
	1210, 832, 107, 945, 673, 672, 1209, 704, 1021, 675,
	1202, 1133, 468, 729, 730, 731, 732, 733, 734, 735,
	671, 670, 118, 118, 1132, 746, 1101, 811, 1083, 756,
	765, 118, 118, 1563, 891, 118, 773, 672, 764, 1273,
	659, 1555, 549, 1558, 476, 834, 1497, 725, 1426, 1535,
	476, 810, 118, 685, 686, 687, 688, 689, 690, 691,
	684, 1430, 922, 694, 106, 94, 1272, 105, 103, 952,
	92, 1063, 100, 1426, 1500, 1424, 623, 624, 745, 687,
	688, 689, 690, 691, 684, 776, 1269, 694, 1266, 637,
	1495, 476, 892, 1215, 931, 1426, 1472, 642, 1032, 912,
	915, 977, 920, 54, 395, 887, 888, 95, 104, 98,
	99, 102, 1426, 1471, 1423, 717, 1130, 395, 622, 980,
	621, 390, 620, 1506, 1385, 476, 716, 1389, 1392, 1393,
	1394, 1390, 1002, 1391, 1395, 1426, 476, 1485, 992, 447,
	418, 988, 1129, 1422, 28, 118, 502, 501, 503, 504,
	505, 506, 1413, 476, 1252, 507, 395, 1407, 990, 1411,
	476, 1154, 476, 1260, 1259, 1484, 1256, 1257, 1256, 1255,
	405, 390, 978, 979, 1222, 937, 1507, 1005, 1034, 1035,
	1385, 1020, 1190, 937, 476, 1258, 1185, 568, 567, 1033,
	1154, 998, 1024, 1325, 28, 1021, 938, 941, 942, 953,
	948, 949, 1182, 28, 1039, 58, 1042, 1043, 1044, 1045,
	1046, 755, 755, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1019, 1008, 1027, 1009,
	644, 1026, 556, 871, 872, 873, 874, 62, 993, 994,
	28, 1184, 997, 811, 659, 1185, 763, 995, 996, 882,
	883, 884, 1036, 1125, 991, 58, 1004, 769, 1006, 1007,
	1154, 1124, 767, 740, 58, 58, 1003, 538, 550, 1041,
	1474, 1015, 1389, 1392, 1393, 1394, 1390, 870, 1391, 1395,
	1420, 890, 1461, 1097, 1098, 118, 118, 118, 1349, 362,
	1025, 1154, 1344, 73, 1250, 886, 447, 921, 881, 1069,
	644, 58, 1325, 1021, 880, 896, 930, 1118, 1119, 933,
	895, 894, 632, 1122, 1076, 682, 692, 693, 685, 686,
	687, 688, 689, 690, 691, 684, 939, 26, 694, 752,
	1448, 1224, 1223, 1487, 54, 1449, 1102, 692, 693, 685,
	686, 687, 688, 689, 690, 691, 684, 952, 1446, 694,
	58, 1486, 1109, 1447, 1445, 1136, 1444, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1450, 1556,
	1393, 1394, 366, 367, 1542, 1140, 940, 395, 1528, 1014,
	544, 1013, 1135, 1130, 478, 1129, 1161, 1137, 1362, 1121,
	1120, 360, 1158, 542, 1099, 564, 548, 1405, 893, 634,
	1397, 118, 544, 511, 1459, 1144, 363, 364, 1248, 1129,
	1082, 479, 1081, 1068, 1187, 1188, 74, 1187, 1347, 1018,
	1552, 1541, 1346, 1130, 759, 405, 405, 760, 1348, 390,
	1012, 357, 1540, 1439, 1204, 1205, 1539, 1186, 1011, 566,
	1186, 1211, 1212, 565, 1200, 1201, 116, 1172, 200, 1194,
	1191, 1195, 1243, 358, 87, 1134, 62, 1438, 1384, 1203,
	763, 636, 377, 1491, 1138, 1084, 990, 1192, 1189, 668,
	64, 1245, 66, 200, 457, 7, 59, 953, 1, 483,
	454, 6, 456, 5, 455, 4, 396, 1247, 1467, 626,
	843, 842, 1538, 200, 75, 200, 1529, 1503, 1505, 1510,
	118, 1478, 1153, 1261, 1262, 1263, 1475, 1477, 405, 783,
	782, 1249, 401, 833, 849, 1151, 848, 200, 1170, 1152,
	847, 845, 1094, 1283, 1284, 867, 1274, 204, 1174, 1251,
	1163, 1164, 1165, 1278, 854, 1169, 853, 777, 808, 807,
	1175, 806, 1176, 1177, 1178, 1179, 805, 804, 395, 1193,
	1270, 803, 802, 395, 801, 800, 799, 1268, 798, 1105,
	1106, 1107, 796, 1158, 795, 1281, 390, 1282, 390, 794,
	793, 1199, 792, 118, 1286, 791, 1285, 1329, 405, 405,
	1322, 790, 1291, 1330, 789, 54, 988, 759, 1296, 1326,
	760, 785, 1294, 759, 788, 1336, 760, 1333, 1335, 1309,
	1311, 1295, 1308, 990, 1292, 1315, 787, 1316, 1331, 1416,
	786, 852, 850, 846, 573, 571, 572, 570, 1337, 575,
	574, 569, 1396, 413, 1340, 1341, 1400, 1155, 683, 682,
	692, 693, 685, 686, 687, 688, 689, 690, 691, 684,
	89, 1123, 694, 337, 1110, 897, 44, 85, 702, 1010,
	1077, 388, 395, 395, 395, 1028, 768, 1245, 766, 379,
	378, 1334, 1332, 1350, 741, 536, 1437, 1359, 1359, 1359,
	1149, 1383, 1351, 1171, 724, 1180, 999, 489, 943, 500,
	497, 1360, 1361, 499, 498, 747, 676, 481, 1454, 1320,
	352, 1290, 645, 198, 448, 97, 96, 429, 1388, 1386,
	1313, 1363, 1364, 1287, 1321, 1319, 1181, 635, 1379, 1380,
	1479, 751, 373, 118, 118, 369, 851, 63, 368, 1372,
	1399, 25, 15, 683, 682, 692, 693, 685, 686, 687,
	688, 689, 690, 691, 684, 395, 1415, 694, 1338, 1339,
	395, 24, 1406, 716, 16, 14, 13, 34, 11, 10,
	1359, 200, 9, 8, 359, 1359, 27, 395, 2, 22,
	1245, 23, 21, 1418, 20, 19, 1421, 18, 1419, 17,
	12, 835, 390, 836, 1264, 1345, 118, 118, 118, 118,
	0, 200, 1432, 1322, 1322, 1322, 1322, 118, 0, 0,
	118, 0, 1296, 118, 1441, 0, 1443, 1399, 1440, 1329,
	1442, 0, 405, 395, 405, 1330, 1451, 1460, 1463, 1458,
	0, 395, 0, 0, 0, 200, 200, 395, 1465, 0,
	992, 1464, 1476, 1466, 0, 0, 1359, 0, 200, 638,
	0, 1462, 1359, 1367, 0, 1368, 200, 0, 0, 1473,
	1483, 1382, 0, 0, 1321, 0, 1377, 1378, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 659, 1492, 1330,
	0, 54, 0, 0, 651, 395, 0, 0, 1408, 1409,
	1410, 0, 1414, 0, 1499, 0, 0, 0, 200, 1502,
	1359, 1509, 1513, 0, 1493, 405, 1521, 1522, 1523, 0,
	1527, 1511, 1514, 1501, 759, 1425, 1524, 760, 1428, 1429,
	1536, 0, 1534, 0, 1526, 0, 0, 1321, 1321, 1321,
	1321, 0, 395, 395, 395, 1547, 1548, 0, 1435, 0,
	0, 1321, 0, 0, 1550, 0, 0, 1546, 1546, 1546,
	0, 0, 0, 0, 0, 0, 1453, 1553, 0, 0,
	0, 1561, 0, 0, 0, 0, 0, 465, 0, 395,
	200, 200, 761, 0, 0, 1369, 1370, 0, 1371, 1150,
	0, 1373, 0, 1375, 1565, 1482, 659, 0, 861, 860,
	0, 708, 709, 710, 711, 712, 713, 857, 0, 683,
	682, 692, 693, 685, 686, 687, 688, 689, 690, 691,
	684, 0, 0, 694, 0, 0, 0, 0, 0, 196,
	863, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 1519, 1520, 862, 855, 0, 1427, 1515, 0, 0,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1525, 0, 0, 0, 200, 200, 0, 0, 0,
	0, 0, 0, 0, 929, 200, 0, 340, 200, 342,
	343, 0, 351, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 0,
	859, 0, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1557, 0, 1559, 1560, 0, 0, 0,
	0, 0, 0, 0, 426, 427, 0, 0, 435, 436,
	437, 0, 439, 440, 441, 442, 443, 444, 445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 651,
	0, 0, 987, 987, 0, 0, 987, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 865,
	987, 987, 987, 987, 0, 0, 0, 0, 578, 0,
	0, 0, 0, 0, 0, 987, 950, 0, 200, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 591, 0, 0, 0, 0, 0,
	604, 607, 608, 609, 610, 611, 612, 0, 613, 614,
	615, 616, 617, 592, 593, 594, 595, 576, 577, 605,
	0, 579, 0, 0, 580, 581, 582, 583, 584, 585,
	586, 587, 588, 589, 596, 597, 598, 599, 600, 601,
	602, 603, 678, 0, 681, 0, 0, 0, 0, 0,
	695, 696, 697, 698, 699, 700, 701, 0, 679, 680,
	677, 683, 682, 692, 693, 685, 686, 687, 688, 689,
	690, 691, 684, 0, 0, 694, 683, 682, 692, 693,
	685, 686, 687, 688, 689, 690, 691, 684, 0, 0,
	694, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 0, 0, 0, 0, 200, 200,
	200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 467, 0, 469, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 761, 0, 651, 0, 0,
	0, 0, 0, 0, 0, 0, 1145, 1146, 1147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 656, 0, 657, 0, 660, 0, 0, 0,
	0, 664, 665, 666, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 651, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 761, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	1289, 0, 0, 0, 0, 0, 0, 924, 925, 0,
	0, 0, 0, 932, 0, 934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 1403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	200, 200, 200, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 200, 0, 0, 1403, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 761, 301, 1108, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 1131, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 394, 0, 1139,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 393,
	330, 165, 392, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	1265, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 381, 0, 0,
	386, 384, 385, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 393,
	330, 165, 392, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	386, 384, 385, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 393,
	330, 165, 392, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 557, 0, 0,
	149, 0, 0, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 1431, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 221,
	330, 165, 222, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 1293, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 221,
	330, 165, 222, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 393,
	330, 165, 392, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 389, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 205, 0, 206,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 221,
	330, 165, 222, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 394, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 221,
	330, 165, 222, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 221,
	330, 165, 222, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 320, 304, 261, 323, 236, 251, 335, 253,
	254, 291, 217, 271, 166, 249, 120, 0, 218, 0,
	146, 0, 150, 153, 154, 0, 301, 0, 0, 0,
	312, 321, 268, 0, 239, 210, 246, 211, 265, 136,
	235, 306, 274, 252, 0, 329, 156, 283, 0, 174,
	159, 0, 0, 267, 309, 269, 302, 260, 292, 228,
	282, 324, 250, 288, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 285, 318, 248,
	287, 290, 209, 284, 0, 213, 219, 334, 316, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 266, 270,
	298, 258, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 281, 0, 0, 0, 223, 215, 264, 0,
	0, 0, 227, 0, 241, 299, 0, 0, 0, 0,
	256, 257, 259, 295, 294, 310, 317, 187, 325, 237,
	238, 247, 307, 130, 245, 255, 172, 185, 289, 122,
	314, 308, 279, 262, 263, 214, 0, 297, 135, 144,
	234, 286, 181, 182, 131, 188, 220, 331, 123, 221,
	330, 165, 222, 180, 315, 280, 276, 216, 313, 278,
	275, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 212, 0, 175, 322, 336, 143, 137, 179,
	134, 160, 127, 121, 225, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 311, 0, 0, 0,
	0, 0, 178, 224, 142, 231, 229, 232, 303, 230,
	272, 273, 326, 327, 328, 300, 226, 0, 0, 305,
	277, 119, 124, 155, 333, 171, 140, 186, 145, 184,
	183, 141, 0, 0, 0, 0, 0, 244, 332, 296,
	293, 319, 0, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 166, 0, 120, 0, 0, 0, 146, 0,
	150, 153, 154, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 982, 0, 485, 0, 0, 136, 484, 0,
	0, 0, 0, 521, 156, 0, 0, 174, 159, 0,
	0, 0, 0, 514, 515, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 534, 502, 501, 503, 504,
	505, 506, 0, 0, 126, 507, 508, 509, 0, 0,
	0, 482, 495, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 492, 493, 985, 0, 0, 0,
	532, 0, 494, 0, 0, 491, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 0,
	0, 0, 0, 0, 0, 187, 0, 0, 0, 0,
	0, 130, 0, 0, 172, 185, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 144, 0, 0,
	181, 182, 131, 188, 0, 0, 123, 0, 0, 165,
	0, 180, 0, 0, 0, 0, 0, 0, 0, 152,
	138, 147, 169, 157, 170, 148, 163, 162, 164, 0,
	0, 0, 175, 0, 0, 143, 137, 179, 134, 160,
	127, 121, 0, 128, 129, 133, 132, 0, 151, 158,
	161, 167, 168, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 0, 142, 522, 528, 531, 0, 529, 526, 527,
	525, 524, 523, 533, 516, 517, 519, 0, 518, 119,
	124, 155, 0, 171, 140, 186, 145, 184, 183, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 176, 0, 177, 0, 0, 0, 149, 166,
	0, 120, 0, 0, 0, 146, 0, 150, 153, 154,
	0, 0, 189, 190, 192, 191, 193, 125, 194, 195,
	0, 485, 0, 0, 136, 484, 0, 0, 0, 0,
	521, 156, 0, 0, 174, 159, 0, 0, 0, 0,
	514, 515, 0, 0, 0, 0, 0, 0, 774, 58,
	0, 0, 534, 502, 501, 503, 504, 505, 506, 0,
	0, 126, 507, 508, 509, 775, 0, 0, 482, 495,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 492, 493, 0, 0, 0, 0, 532, 0, 494,
	0, 0, 491, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 530, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 130, 0,
	0, 172, 185, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 144, 0, 0, 181, 182, 131,
	188, 0, 0, 123, 0, 0, 165, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 152, 138, 147, 169,
	157, 170, 148, 163, 162, 164, 0, 0, 0, 175,
	0, 0, 143, 137, 179, 134, 160, 127, 121, 0,
	128, 129, 133, 132, 0, 151, 158, 161, 167, 168,
	173, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 142,
	522, 528, 531, 0, 529, 526, 527, 525, 524, 523,
	533, 516, 517, 519, 0, 518, 119, 124, 155, 0,
	171, 140, 186, 145, 184, 183, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 176,
	0, 177, 0, 0, 0, 149, 166, 0, 120, 0,
	0, 0, 146, 0, 150, 153, 154, 0, 0, 189,
	190, 192, 191, 193, 125, 194, 195, 0, 485, 0,
	0, 136, 484, 0, 0, 0, 0, 521, 156, 0,
	0, 174, 159, 0, 0, 0, 0, 514, 515, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 476, 534,
	502, 501, 503, 504, 505, 506, 0, 0, 126, 507,
	508, 509, 0, 0, 0, 482, 495, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 492, 493,
	0, 0, 0, 0, 532, 0, 494, 0, 0, 491,
	496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 130, 0, 0, 172, 185,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 144, 0, 0, 181, 182, 131, 188, 0, 0,
	123, 0, 0, 165, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 152, 138, 147, 169, 157, 170, 148,
	163, 162, 164, 0, 0, 0, 175, 0, 0, 143,
	137, 179, 134, 160, 127, 121, 0, 128, 129, 133,
	132, 0, 151, 158, 161, 167, 168, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 142, 522, 528, 531,
	0, 529, 526, 527, 525, 524, 523, 533, 516, 517,
	519, 0, 518, 119, 124, 155, 0, 171, 140, 186,
	145, 184, 183, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 176, 0, 177, 0,
	0, 0, 149, 166, 0, 120, 0, 0, 0, 146,
	0, 150, 153, 154, 0, 0, 189, 190, 192, 191,
	193, 125, 194, 195, 0, 485, 0, 0, 136, 484,
	0, 0, 0, 0, 521, 156, 0, 0, 174, 159,
	0, 0, 0, 0, 514, 515, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 534, 502, 501, 503,
	504, 505, 506, 0, 0, 126, 507, 508, 509, 0,
	0, 0, 482, 495, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 492, 493, 985, 0, 0,
	0, 532, 0, 494, 0, 0, 491, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 130, 0, 0, 172, 185, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 144, 0,
	0, 181, 182, 131, 188, 0, 0, 123, 0, 0,
	165, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	152, 138, 147, 169, 157, 170, 148, 163, 162, 164,
	0, 0, 0, 175, 0, 0, 143, 137, 179, 134,
	160, 127, 121, 0, 128, 129, 133, 132, 0, 151,
	158, 161, 167, 168, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 142, 522, 528, 531, 0, 529, 526,
	527, 525, 524, 523, 533, 516, 517, 519, 0, 518,
	119, 124, 155, 0, 171, 140, 186, 145, 184, 183,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 28,
	0, 0, 139, 176, 0, 177, 0, 0, 0, 149,
	166, 0, 120, 0, 0, 0, 146, 0, 150, 153,
	154, 0, 0, 189, 190, 192, 191, 193, 125, 194,
	195, 0, 485, 0, 0, 136, 484, 0, 0, 0,
	0, 521, 156, 0, 0, 174, 159, 0, 0, 0,
	0, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 534, 502, 501, 503, 504, 505, 506,
	0, 0, 126, 507, 508, 509, 0, 0, 0, 482,
	495, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 492, 493, 0, 0, 0, 0, 532, 0,
	494, 0, 0, 491, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 130,
	0, 0, 172, 185, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 144, 0, 0, 181, 182,
	131, 188, 0, 0, 123, 0, 0, 165, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 152, 138, 147,
	169, 157, 170, 148, 163, 162, 164, 0, 0, 0,
	175, 0, 0, 143, 137, 179, 134, 160, 127, 121,
	0, 128, 129, 133, 132, 0, 151, 158, 161, 167,
	168, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	142, 522, 528, 531, 0, 529, 526, 527, 525, 524,
	523, 533, 516, 517, 519, 0, 518, 119, 124, 155,
	0, 171, 140, 186, 145, 184, 183, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	176, 0, 177, 0, 0, 0, 149, 166, 0, 120,
	0, 0, 0, 146, 0, 150, 153, 154, 0, 0,
	189, 190, 192, 191, 193, 125, 194, 195, 0, 485,
	0, 0, 136, 484, 0, 0, 0, 0, 521, 156,
	0, 0, 174, 159, 0, 0, 0, 0, 514, 515,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	534, 502, 501, 503, 504, 505, 506, 0, 0, 126,
	507, 508, 509, 0, 0, 0, 482, 495, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 492,
	493, 0, 0, 0, 0, 532, 0, 494, 0, 0,
	491, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 530, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 130, 0, 0, 172,
	185, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 144, 0, 0, 181, 182, 131, 188, 0,
	0, 123, 0, 0, 165, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 152, 138, 147, 169, 157, 170,
	148, 163, 162, 164, 0, 0, 0, 175, 0, 0,
	143, 137, 179, 134, 160, 127, 121, 0, 128, 129,
	133, 132, 0, 151, 158, 161, 167, 168, 173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 142, 522, 528,
	531, 0, 529, 526, 527, 525, 524, 523, 533, 516,
	517, 519, 0, 518, 119, 124, 155, 0, 171, 140,
	186, 145, 184, 183, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 176, 0, 177,
	166, 0, 120, 149, 0, 0, 146, 0, 150, 153,
	154, 0, 0, 0, 0, 0, 0, 189, 190, 192,
	191, 193, 125, 194, 195, 136, 0, 0, 0, 0,
	0, 521, 156, 0, 0, 174, 159, 0, 0, 0,
	0, 514, 515, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 534, 502, 501, 503, 504, 505, 506,
	0, 0, 126, 507, 508, 509, 0, 0, 0, 0,
	495, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 492, 493, 0, 0, 0, 0, 532, 0,
	494, 0, 0, 491, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 530, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 130,
	0, 0, 172, 185, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 144, 0, 0, 181, 182,
	131, 188, 0, 0, 123, 0, 0, 165, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 152, 138, 147,
	169, 157, 170, 148, 163, 162, 164, 0, 0, 0,
	175, 0, 0, 143, 137, 179, 134, 160, 127, 121,
	0, 128, 129, 133, 132, 0, 151, 158, 161, 167,
	168, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	142, 522, 528, 531, 0, 529, 526, 527, 525, 524,
	523, 533, 516, 517, 519, 0, 518, 119, 124, 155,
	0, 171, 140, 186, 145, 184, 183, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	176, 0, 177, 166, 0, 120, 149, 0, 0, 146,
	0, 150, 153, 154, 0, 0, 0, 0, 0, 0,
	189, 190, 192, 191, 193, 125, 194, 195, 136, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 174, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 683, 682, 692, 693, 685, 686, 687, 688, 689,
	690, 691, 684, 0, 0, 694, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 130, 0, 0, 172, 185, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 144, 0,
	0, 181, 182, 131, 188, 0, 0, 123, 0, 0,
	165, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	152, 138, 147, 169, 157, 170, 148, 163, 162, 164,
	0, 0, 0, 175, 0, 0, 143, 137, 179, 134,
	160, 127, 121, 0, 128, 129, 133, 132, 0, 151,
	158, 161, 167, 168, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 124, 155, 0, 171, 140, 186, 145, 184, 183,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 176, 0, 177, 0, 0, 0, 149,
	166, 0, 120, 0, 0, 0, 146, 0, 150, 153,
	154, 0, 0, 189, 190, 192, 191, 193, 125, 194,
	195, 1157, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 174, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 0, 1159, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 671, 670, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 130,
	0, 0, 172, 185, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 144, 0, 0, 181, 182,
	131, 188, 0, 0, 123, 0, 0, 165, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 152, 138, 147,
	169, 157, 170, 148, 163, 162, 164, 0, 0, 0,
	175, 0, 0, 143, 137, 179, 134, 160, 127, 121,
	0, 128, 129, 133, 132, 0, 151, 158, 161, 167,
	168, 173, 0, 0, 0, 0, 166, 0, 120, 0,
	0, 841, 840, 0, 150, 153, 154, 0, 0, 0,
	839, 0, 0, 0, 838, 0, 0, 0, 178, 0,
	142, 136, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 174, 159, 0, 0, 0, 0, 119, 124, 155,
	0, 171, 140, 186, 145, 184, 183, 141, 0, 404,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 139,
	176, 0, 177, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 192, 191, 193, 125, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 130, 0, 0, 172, 185,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 144, 0, 0, 181, 182, 131, 188, 0, 0,
	123, 0, 0, 165, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 152, 138, 147, 169, 157, 170, 148,
	163, 162, 164, 0, 0, 0, 175, 0, 0, 143,
	137, 179, 134, 160, 127, 121, 0, 128, 129, 133,
	132, 0, 151, 158, 161, 167, 168, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 124, 155, 0, 171, 140, 186,
	145, 184, 183, 141, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 0, 139, 176, 0, 177, 166,
	0, 120, 149, 0, 0, 146, 0, 150, 153, 154,
	0, 0, 0, 0, 0, 0, 189, 190, 192, 191,
	193, 125, 194, 195, 136, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 174, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 130, 0,
	0, 172, 185, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 144, 0, 0, 181, 182, 131,
	188, 0, 0, 123, 0, 0, 165, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 152, 138, 147, 169,
	157, 170, 148, 163, 162, 164, 0, 0, 0, 175,
	0, 0, 143, 137, 179, 134, 160, 127, 121, 0,
	128, 129, 133, 132, 0, 151, 158, 161, 167, 168,
	173, 0, 0, 0, 0, 166, 0, 120, 0, 0,
	0, 146, 0, 150, 153, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1402, 178, 0, 142,
	136, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	174, 159, 0, 0, 0, 0, 119, 124, 155, 0,
	171, 140, 186, 145, 184, 183, 141, 0, 117, 0,
	1404, 0, 0, 0, 0, 0, 0, 126, 139, 176,
	0, 177, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 192, 191, 193, 125, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 130, 0, 0, 172, 185, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	144, 0, 0, 181, 182, 131, 188, 0, 0, 123,
	0, 0, 165, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 152, 138, 147, 169, 157, 170, 148, 163,
	162, 164, 0, 0, 0, 175, 0, 0, 143, 137,
	179, 134, 160, 127, 121, 0, 128, 129, 133, 132,
	0, 151, 158, 161, 167, 168, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 124, 155, 0, 171, 140, 186, 145,
	184, 183, 141, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 0, 0, 139, 176, 0, 177, 166, 0,
	120, 149, 0, 0, 146, 0, 150, 153, 154, 0,
	0, 0, 0, 0, 0, 189, 190, 192, 191, 193,
	125, 194, 195, 136, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 174, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 404, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 187, 0, 0, 0, 0, 0, 130, 0, 0,
	172, 185, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 144, 0, 0, 181, 182, 131, 188,
	0, 0, 123, 0, 0, 165, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 152, 138, 147, 169, 157,
	170, 148, 163, 162, 164, 0, 0, 0, 175, 0,
	0, 143, 137, 179, 134, 160, 127, 121, 0, 128,
	129, 133, 132, 0, 151, 158, 161, 167, 168, 173,
	0, 0, 0, 0, 166, 0, 120, 0, 0, 0,
	146, 0, 150, 153, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 142, 136,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 174,
	159, 0, 0, 0, 0, 119, 124, 155, 0, 171,
	140, 186, 145, 184, 183, 141, 0, 394, 0, 0,
	749, 0, 0, 750, 0, 0, 126, 139, 176, 0,
	177, 0, 0, 0, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	192, 191, 193, 125, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 130, 0, 0, 172, 185, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 144,
	0, 0, 181, 182, 131, 188, 0, 0, 123, 0,
	0, 165, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 0, 0, 175, 0, 0, 143, 137, 179,
	134, 160, 127, 121, 0, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	166, 0, 120, 0, 0, 0, 146, 0, 150, 153,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 142, 136, 562, 0, 0, 0,
	0, 0, 156, 0, 0, 174, 159, 0, 0, 0,
	0, 119, 124, 155, 0, 171, 140, 186, 145, 184,
	183, 141, 0, 394, 0, 561, 0, 0, 0, 0,
	0, 0, 126, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 130,
	0, 0, 172, 185, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 144, 0, 0, 181, 182,
	131, 188, 0, 0, 123, 0, 0, 165, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 152, 138, 147,
	169, 157, 170, 148, 163, 162, 164, 0, 0, 0,
	175, 0, 0, 143, 137, 179, 134, 160, 127, 121,
	0, 128, 129, 133, 132, 0, 151, 158, 161, 167,
	168, 173, 0, 0, 0, 0, 166, 0, 120, 0,
	0, 0, 146, 0, 150, 153, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	142, 136, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 174, 159, 0, 0, 0, 0, 119, 124, 155,
	0, 171, 140, 186, 145, 184, 183, 141, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 139,
	176, 0, 177, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 192, 191, 193, 125, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 187,
	0, 0, 0, 0, 0, 130, 0, 0, 172, 185,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 144, 0, 0, 181, 182, 131, 188, 0, 0,
	123, 0, 0, 165, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 152, 138, 147, 169, 157, 170, 148,
	163, 162, 164, 0, 0, 0, 175, 0, 0, 143,
	137, 179, 134, 160, 127, 121, 0, 128, 129, 133,
	132, 0, 151, 158, 161, 167, 168, 173, 0, 0,
	0, 0, 0, 0, 0, 166, 0, 120, 0, 0,
	0, 146, 0, 150, 153, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 0, 142, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	174, 159, 0, 119, 124, 155, 0, 171, 140, 186,
	201, 184, 183, 202, 0, 203, 0, 0, 117, 0,
	1404, 0, 0, 0, 0, 139, 176, 126, 177, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 192, 191,
	193, 125, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 130, 0, 0, 172, 185, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	144, 0, 0, 181, 182, 131, 188, 0, 0, 123,
	0, 0, 165, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 152, 138, 147, 169, 157, 170, 148, 163,
	162, 164, 0, 0, 0, 175, 0, 0, 143, 137,
	179, 134, 160, 127, 121, 0, 128, 129, 133, 132,
	0, 151, 158, 161, 167, 168, 173, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 120, 0, 0, 0,
	146, 0, 150, 153, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 142, 0, 0, 0, 136,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 174,
	159, 0, 119, 124, 155, 0, 171, 140, 186, 145,
	184, 183, 141, 0, 58, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 139, 176, 126, 177, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 192, 191, 193,
	125, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
	0, 0, 0, 130, 0, 0, 172, 185, 0, 122,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 144,
	0, 0, 181, 182, 131, 188, 0, 0, 123, 0,
	0, 165, 0, 180, 0, 0, 0, 0, 0, 0,
	0, 152, 138, 147, 169, 157, 170, 148, 163, 162,
	164, 0, 0, 0, 175, 0, 0, 143, 137, 179,
	134, 160, 127, 121, 0, 128, 129, 133, 132, 0,
	151, 158, 161, 167, 168, 173, 0, 0, 0, 0,
	166, 0, 120, 0, 0, 0, 146, 0, 150, 153,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 0, 142, 136, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 174, 159, 0, 0, 0,
	0, 119, 124, 155, 0, 171, 140, 186, 145, 184,
	183, 141, 0, 394, 0, 1159, 0, 0, 0, 0,
	0, 0, 126, 139, 176, 0, 177, 0, 0, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 192, 191, 193, 125,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 187, 0, 0, 0, 0, 0, 130,
	0, 0, 172, 185, 0, 122, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 144, 0, 0, 181, 182,
	131, 188, 0, 0, 123, 0, 0, 165, 0, 180,
	0, 0, 0, 0, 0, 0, 0, 152, 138, 147,
	169, 157, 170, 148, 163, 162, 164, 0, 0, 0,
	175, 0, 0, 143, 137, 179, 134, 160, 127, 121,
	0, 128, 129, 133, 132, 0, 151, 158, 161, 167,
	168, 173, 0, 0, 0, 0, 0, 0, 0, 166,
	0, 120, 0, 0, 0, 146, 0, 150, 153, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 0,
	142, 0, 0, 754, 136, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 174, 159, 0, 119, 124, 155,
	0, 171, 140, 186, 145, 184, 183, 141, 0, 0,
	0, 0, 117, 0, 0, 0, 0, 0, 0, 139,
	176, 126, 177, 0, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 192, 191, 193, 125, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 130, 0,
	0, 172, 185, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 144, 0, 0, 181, 182, 131,
	188, 0, 0, 123, 0, 0, 165, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 152, 138, 147, 169,
	157, 170, 148, 163, 162, 164, 0, 0, 0, 175,
	0, 0, 143, 137, 179, 134, 160, 127, 121, 0,
	128, 129, 133, 132, 0, 151, 158, 161, 167, 168,
	173, 0, 0, 0, 0, 166, 0, 120, 0, 0,
	0, 146, 0, 150, 153, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 142,
	136, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	174, 159, 0, 0, 0, 0, 119, 124, 155, 0,
	171, 140, 186, 145, 184, 183, 141, 0, 404, 0,
	450, 0, 0, 0, 0, 0, 0, 126, 139, 176,
	0, 177, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 192, 191, 193, 125, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 130, 0, 0, 172, 185, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	144, 0, 0, 181, 182, 131, 188, 0, 0, 123,
	0, 0, 165, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 152, 138, 147, 169, 157, 170, 148, 163,
	162, 164, 0, 0, 0, 175, 0, 0, 143, 137,
	179, 134, 160, 127, 121, 0, 128, 129, 133, 132,
	0, 151, 158, 161, 167, 168, 173, 0, 0, 0,
	0, 166, 0, 120, 0, 0, 0, 146, 0, 150,
	153, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 142, 136, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 174, 159, 0, 0,
	0, 0, 119, 124, 155, 0, 171, 140, 186, 145,
	184, 183, 141, 0, 394, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 139, 176, 0, 177, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 192, 191, 193,
	125, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	130, 0, 0, 172, 185, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 144, 0, 0, 181,
	182, 131, 188, 0, 0, 123, 0, 0, 165, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 152, 138,
	147, 169, 157, 170, 148, 163, 162, 164, 0, 0,
	0, 175, 0, 0, 143, 137, 179, 134, 160, 127,
	121, 0, 128, 129, 133, 132, 0, 151, 158, 161,
	167, 168, 173, 0, 0, 0, 0, 166, 0, 120,
	0, 0, 0, 146, 0, 150, 153, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 142, 136, 0, 0, 0, 0, 0, 0, 156,
	0, 0, 174, 159, 0, 0, 0, 0, 119, 124,
	155, 0, 171, 140, 186, 145, 184, 183, 141, 0,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	139, 176, 0, 177, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 192, 191, 193, 125, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	187, 0, 0, 0, 0, 0, 130, 0, 0, 172,
	185, 0, 122, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 144, 0, 0, 181, 182, 131, 188, 0,
	0, 123, 0, 0, 165, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 152, 138, 147, 169, 157, 170,
	148, 163, 162, 164, 0, 0, 0, 175, 0, 0,
	143, 137, 179, 134, 160, 127, 121, 0, 128, 129,
	133, 132, 0, 151, 158, 161, 167, 168, 173, 0,
	0, 0, 0, 166, 0, 120, 0, 0, 0, 146,
	0, 150, 153, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 0, 142, 136, 0,
	0, 0, 0, 0, 0, 156, 0, 0, 174, 159,
	0, 0, 0, 0, 119, 124, 155, 0, 171, 140,
	186, 145, 184, 183, 141, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 139, 176, 0, 177,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 192,
	191, 193, 125, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 187, 0, 0, 0,
	0, 0, 130, 0, 0, 172, 185, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 144, 0,
	0, 181, 182, 131, 188, 0, 0, 123, 0, 0,
	165, 0, 180, 0, 0, 0, 0, 0, 0, 0,
	152, 138, 147, 169, 157, 170, 148, 163, 162, 164,
	0, 0, 0, 175, 0, 0, 143, 137, 179, 134,
	160, 127, 121, 0, 128, 129, 133, 132, 0, 151,
	158, 161, 167, 168, 173, 0, 0, 0, 0, 166,
	0, 120, 0, 0, 0, 146, 0, 150, 153, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 0, 142, 136, 0, 0, 0, 0, 0,
	0, 156, 0, 0, 174, 159, 0, 0, 0, 0,
	119, 124, 155, 0, 171, 140, 186, 145, 184, 183,
	141, 0, 117, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 139, 176, 0, 177, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 192, 191, 193, 125, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 187, 0, 0, 0, 0, 0, 130, 0,
	0, 172, 185, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 144, 0, 0, 181, 182, 131,
	188, 0, 0, 123, 0, 0, 165, 0, 180, 0,
	0, 0, 0, 0, 0, 0, 152, 138, 147, 169,
	157, 170, 148, 163, 162, 164, 0, 0, 0, 175,
	0, 0, 143, 137, 179, 134, 160, 127, 121, 0,
	128, 129, 133, 132, 0, 151, 158, 161, 167, 168,
	173, 0, 0, 0, 0, 166, 0, 120, 0, 0,
	0, 146, 0, 150, 153, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 142,
	136, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	174, 159, 0, 0, 0, 0, 119, 124, 155, 0,
	171, 140, 186, 145, 184, 183, 141, 0, 1242, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 139, 176,
	0, 177, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 192, 191, 193, 125, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 187, 0,
	0, 0, 0, 0, 130, 0, 0, 172, 185, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	144, 0, 0, 181, 182, 131, 188, 0, 0, 123,
	0, 0, 165, 0, 180, 0, 0, 0, 0, 0,
	0, 0, 152, 138, 147, 169, 157, 170, 148, 163,
	162, 164, 0, 0, 0, 175, 0, 0, 143, 137,
	179, 134, 160, 127, 121, 0, 128, 129, 133, 132,
	0, 151, 158, 161, 167, 168, 173, 0, 0, 0,
	0, 166, 0, 120, 0, 0, 0, 146, 0, 150,
	153, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 0, 142, 136, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 174, 159, 0, 0,
	0, 0, 119, 124, 155, 0, 171, 140, 186, 145,
	184, 183, 141, 0, 415, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 139, 176, 0, 177, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 192, 191, 193,
	125, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 187, 0, 0, 0, 0, 0,
	130, 0, 0, 172, 185, 0, 122, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 144, 0, 0, 181,
	182, 131, 188, 0, 0, 123, 0, 0, 165, 0,
	180, 0, 0, 0, 0, 0, 0, 0, 152, 138,
	147, 169, 157, 170, 148, 163, 162, 164, 0, 0,
	0, 175, 0, 0, 143, 137, 179, 134, 160, 127,
	121, 0, 128, 129, 133, 132, 0, 151, 158, 161,
	167, 168, 173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 124,
	155, 0, 171, 140, 186, 145, 184, 183, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 176, 0, 177, 0, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 192, 191, 193, 125, 194, 195,
}
var yyPact = [...]int{

	156, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1052, 1075, -1000, -1000,
	-1000, -1000, -1000, -1000, 836, 239, 41, 152, 140, 138,
	437, 54, 11192, -1000, 9329, 4337, -25, -1000, -157, -1000,
	-1000, -160, -1000, -185, 798, -1000, -1000, -1000, -1000, -1000,
	-1000, 1025, 1048, 893, 980, 928, -1000, -9, -22, 11192,
	1062, 2477, -120, 10780, 164, 159, 157, 155, 164, -1000,
	-1000, -1000, 127, 11604, -1000, 54, 680, 162, -1000, 11192,
	-1000, 11192, -51, 52, -1000, -1000, -34, 362, -1000, -1000,
	-1000, -59, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11192, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10368, 243, 171,
	234, 334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 495, -1000, -1000,
	-1000, -1000, -1000, -1000, 808, 808, -1000, 11192, -1000, -1000,
	-187, -1000, 54, -1000, -1000, 591, 976, 6930, 6930, 1052,
	-1000, 798, -1000, -1000, -1000, 953, -1000, -1000, 371, 143,
	-1000, -1000, -1000, 143, -1000, -1000, 962, 11192, 810, -1000,
	-1000, -172, 3097, -1000, -1000, -1000, -1000, 333, 9123, 9123,
	-1000, -1000, -1000, 961, -1000, -1000, -1000, -1000, -1000, 1038,
	1034, 729, -1000, 1638, -1000, -1000, 11604, 345, 662, 660,
	658, 11192, 11192, 72, -1000, -1000, -1000, 162, 856, 11604,
	970, -1000, -1000, 1061, 11192, 11192, -1000, -1000, 362, 362,
	-1000, -1000, 11192, -1000, -1000, -1000, -1000, -1000, 362, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 67, -1000, -1000, -1000,
	-1000, -1000, 3, -1000, -1000, -1000, -1000, -1000, -1000, 325,
	5267, -26, -1000, -1000, -1000, 6930, -1000, -1000, 229, -1000,
	-1000, -1000, -1000, -1000, 11192, -1000, -1000, -1000, 1071, 254,
	546, -1000, 6930, 1746, 808, 808, -1000, -1000, 210, -1000,
	-1000, 7203, 7203, 7203, 7203, 7203, 7203, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	808, 232, -1000, 6653, 808, 808, 808, 808, 808, 808,
	6930, 808, 808, 808, 808, 808, 808, 808, 808, 808,
	808, 808, 808, 808, -1000, -1000, 805, -1000, 244, 1025,
	591, 928, 8917, 882, -1000, -1000, 10162, 10162, 10986, 1059,
	2787, -1000, 804, 799, -168, -178, -1000, -172, 5822, -1000,
	-1000, -1000, -1000, 248, -1000, 808, 118, 375, 7959, 1544,
	39, -1000, -1000, -1000, 820, -1000, 820, 820, 820, 820,
	82, 82, 82, 82, -1000, -1000, -1000, -1000, -1000, 847,
	841, -1000, 820, 820, 820, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 838, 838, 838, 824, 824, 72, 969,
	855, 854, 849, -1000, 114, -1000, 72, -1000, 100, -190,
	-1000, 11192, 11192, -1000, -1000, 1025, -56, -1000, -1000, 351,
	11192, 11192, 362, -1000, 11192, -1000, -1000, -1000, 494, -127,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 725, 373,
	-1000, 11192, -1000, -1000, -1000, -1000, -1000, 772, -1000, 934,
	6930, 6930, 527, 6930, 6930, 278, 7203, 383, 335, 7203,
	7203, 7203, 7203, 7203, 7203, 7203, 7203, 7203, 7203, 7203,
	7203, 7203, 7203, 7203, 484, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 641, -1000, 798, 685, 685, 184, 184,
	184, 184, 184, 7476, 5545, 4957, 591, 6653, 6376, 6376,
	6930, 6930, 6376, 975, 340, 373, 10574, -1000, 591, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6376, 6376, 6376, 6376,
	6930, -1000, -1000, -1000, 976, -1000, 975, 1030, -1000, 943,
	941, 6376, -1000, -131, 11192, -1000, -131, 845, -1000, 321,
	-1000, 221, 1052, 6930, -1000, 4027, -1000, -175, -1000, -165,
	-189, -1000, -1000, -1000, -1000, -1000, 373, -1000, 638, 10780,
	808, 808, -1000, 375, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 297,
	297, 139, 297, 297, 297, 297, 297, -2, -11, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, -1000, -1000, 611, 286, 245, -1000, -1000, -1000,
	-1000, 991, -1000, 1544, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 363, 250, -1000, 987,
	-1000, 985, 566, 1067, 427, 175, 213, 23, -1000, -1000,
	492, 82, 82, -1000, -1000, -1000, 960, -1000, -1000, -1000,
	564, 564, -1000, -1000, -1000, -1000, 487, -1000, -1000, -1000,
	486, -1000, -1000, -1000, 11192, 11192, 11192, -1000, 301, 316,
	125, 186, 185, 181, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 297, 297, -1000, -1000, 956, 955, 297,
	842, 974, -1000, 562, -1000, -1000, -1000, 549, 6930, -1000,
	362, 1059, -1000, -1000, -1000, -1000, 188, 6930, -1000, -1000,
	932, 278, 323, -1000, -1000, 497, -1000, -1000, 373, 373,
	1761, -1000, -1000, -1000, -1000, 383, 7203, 7203, 7203, 1133,
	1761, 1484, 840, 819, 184, 578, 578, 241, 241, 241,
	241, 241, 554, 554, -1000, -1000, -1000, 591, -1000, -1000,
	-1000, 591, 6376, 732, -1000, -1000, 7753, 218, 808, 216,
	-1000, -1000, 591, 703, 703, 367, 514, 703, 6376, 377,
	-1000, 6930, 591, -1000, 703, 591, 703, 703, -1000, -1000,
	11192, -1000, -1000, -1000, -1000, 802, 807, 808, -1000, 748,
	1052, 10986, 6930, 4957, 1025, 373, -1000, -1000, -1000, -182,
	-184, -1000, -1000, 591, 10780, 10780, -1000, 548, -1000, 427,
	297, 297, 480, 476, 472, 544, 538, 297, 297, 447,
	534, 633, 436, 433, 432, 473, 529, 741, 444, 441,
	439, 11398, 116, -1000, 611, -1000, 983, 286, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 837, -1000, -1000,
	-1000, -1000, -1000, -1000, -72, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 695, -1000, -1000, 265,
	710, -1000, 708, 727, 705, 808, 808, 808, -1000, 11192,
	-1000, -1000, -1000, 628, 81, 836, 626, 10780, 606, 312,
	-1000, -1000, 438, -1000, -1000, -1000, -1000, 1014, 950, 297,
	297, -1000, -1000, -1000, 373, 351, -1000, -1000, 373, -1000,
	-1000, -1000, -1000, -1000, -1000, 1133, 1761, 1228, -1000, 7203,
	7203, -1000, -1000, 703, 6376, -1000, -1000, 9953, -1000, -1000,
	3717, 6376, 4647, -1000, -1000, -1000, 196, 484, 196, -93,
	833, 313, -1000, 6930, 395, -1000, -1000, -1000, -1000, -1000,
	-1000, 1059, 9747, 846, 10986, 808, -1000, 8711, 10780, -1000,
	10986, 1025, -1000, 373, -1000, -1000, -1000, -1000, -1000, -1000,
	591, 591, -1000, -1000, 427, 427, -1000, -1000, -1000, -1000,
	-1000, 528, 513, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 835, -1000, 1008, 831, 116, 611,
	404, -1000, -1000, -1000, -1000, -1000, 508, -1000, 418, -1000,
	415, 10574, 10574, 10574, -1000, -1000, -1000, 954, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 606, 606, -1000, -1000, 7203, 1761, 1761,
	-1000, -1000, -1000, -1000, 215, 591, -1000, 591, 820, 820,
	-1000, 820, 824, -1000, 820, 106, 820, 102, 591, 591,
	808, -88, -1000, 373, 6930, 1056, 722, 826, -1000, -1000,
	-1000, 972, 8232, 8438, -1000, 965, 737, 699, -1000, -1000,
	6099, 591, 701, 203, 694, -1000, 550, -1000, 808, -142,
	-1000, -1000, -1000, -1000, 10574, -1000, -1000, -1000, -1000, 10574,
	823, 116, -1000, 684, -1000, 655, 616, 677, -1000, 820,
	677, 677, 601, -1000, -1000, 1761, 3407, -1000, -1000, -1000,
	178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7203,
	591, 502, 373, 1054, 1028, 9747, 9747, 9747, 9747, -1000,
	910, 908, -1000, 902, 884, 922, 11192, -1000, 666, 8232,
	262, -1000, 9538, -1000, -1000, 979, -1000, 808, -1000, -1000,
	844, 10780, 10574, 10780, -1000, -132, -1000, 405, 654, 637,
	10574, 813, -1000, -1000, -1000, -1000, 10574, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 120, -1000, -1000, -1000, 6930, 6930,
	826, 709, 681, -1000, -1000, -1000, -1000, 905, -1000, 887,
	-1000, -1000, -1000, -1000, -1000, 153, 145, 133, -1000, 1065,
	-1000, 808, -1000, 798, 198, -1000, -1000, 632, -1000, 586,
	-1000, -1000, -1000, 615, 10574, 270, -1000, 142, 707, 591,
	109, -102, 373, 717, 6930, 6930, -1000, -1000, 808, 808,
	808, 10986, 699, 591, 10780, -132, -1000, 940, 130, 130,
	-1000, 590, -1000, -1000, -1000, -1000, 297, 499, 1022, -1000,
	-1000, -1000, 1003, -1000, -1000, -1000, 931, -96, -116, 373,
	373, 10574, 10574, 10574, 550, -1000, -1000, -1000, 247, -1000,
	297, -1000, 485, 1002, 130, -1000, 392, -1000, -1000, -1000,
	-1000, 581, -1000, 926, -1000, 585, -1000, 585, 585, 808,
	382, -1000, 573, 130, -1000, -1000, -98, -1000, 10574, -1000,
	-1000, -1000, -1000, -1000, -108, -1000, -123, -1000,
}
var yyPgo = [...]int{

	0, 18, 24, 1385, 1383, 1381, 32, 1026, 1380, 1379,
	1377, 1375, 60, 1374, 1372, 1371, 1369, 1368, 30, 937,
	1366, 1364, 1094, 1092, 1090, 1084, 1363, 1362, 1359, 1358,
	1357, 1356, 1355, 1354, 1351, 1332, 1331, 107, 1328, 1327,
	54, 1326, 1325, 1322, 77, 1321, 93, 1320, 1319, 1317,
	38, 129, 49, 37, 136, 1316, 34, 22, 17, 1315,
	1309, 20, 1308, 274, 91, 1307, 61, 112, 1306, 1305,
	50, 1304, 1303, 1302, 1300, 80, 1299, 1298, 2, 33,
	1297, 66, 1296, 58, 75, 1089, 1295, 1294, 1293, 1290,
	1289, 1288, 59, 10, 6, 1, 9, 1287, 131, 12,
	1286, 57, 1284, 1283, 1281, 1276, 39, 1275, 96, 1274,
	36, 94, 1272, 79, 1271, 25, 14, 55, 1270, 1269,
	76, 97, 88, 73, 1268, 68, 1266, 1265, 95, 1261,
	1260, 1259, 102, 1258, 101, 471, 1257, 1256, 1255, 1254,
	1253, 1251, 1250, 103, 63, 52, 0, 15, 35, 56,
	1237, 19, 1013, 41, 16, 1236, 108, 1233, 1232, 1609,
	44, 89, 40, 1231, 1230, 1229, 1227, 1226, 1225, 1224,
	266, 1223, 1222, 1221, 1220, 1219, 1216, 1204, 1201, 1194,
	1191, 1185, 1182, 1180, 1179, 1174, 1172, 81, 1168, 1166,
	1165, 1164, 1162, 1161, 1157, 1156, 1151, 1149, 1148, 21,
	1147, 1146, 1144, 1143, 29, 1137, 67, 3, 69, 1136,
	1135, 1132, 100, 26, 1131, 1130, 1126, 1124, 64, 42,
	1123, 86, 53, 51, 1122, 1120, 1119, 78, 5, 28,
	1117, 1116, 1111, 11, 23, 1109, 1108, 1107, 1106, 13,
	48, 47, 1104, 1102, 27, 1101, 1100, 65, 83, 1099,
	82, 4, 1098, 1096, 1088, 1086, 7, 147, 1082, 99,
}
var yyR1 = [...]int{

	0, 254, 255, 255, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 18, 18, 18,
	19, 20, 20, 21, 21, 22, 22, 23, 23, 42,
	42, 42, 42, 43, 43, 43, 114, 114, 113, 113,
	24, 25, 26, 26, 252, 252, 251, 175, 175, 7,
	7, 27, 27, 27, 27, 27, 253, 253, 253, 253,
	253, 253, 243, 243, 244, 244, 236, 234, 234, 231,
	231, 237, 237, 230, 230, 235, 235, 232, 232, 239,
	239, 239, 239, 239, 240, 241, 248, 248, 249, 249,
	203, 203, 250, 250, 250, 250, 208, 208, 207, 207,
	206, 206, 206, 209, 209, 209, 30, 223, 225, 225,
	226, 226, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 177, 179, 181, 182,
	183, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	192, 193, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 195, 195, 196, 196,
	197, 197, 198, 198, 180, 204, 204, 178, 174, 176,
	224, 224, 224, 219, 151, 151, 163, 163, 163, 163,
	245, 245, 246, 246, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 166, 166, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 165, 165, 165, 165, 165,
	167, 167, 167, 167, 167, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	169, 169, 169, 169, 169, 169, 169, 169, 218, 218,
	170, 170, 212, 212, 213, 213, 213, 210, 210, 211,
	211, 214, 214, 171, 171, 171, 171, 171, 171, 41,
	40, 40, 40, 130, 130, 130, 215, 199, 199, 199,
	173, 200, 200, 201, 201, 201, 202, 202, 202, 216,
	216, 217, 217, 172, 220, 220, 220, 220, 6, 6,
	238, 238, 238, 238, 233, 233, 4, 4, 4, 1,
	2, 2, 3, 3, 3, 5, 5, 222, 222, 221,
	221, 229, 229, 228, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 157, 157, 136, 136, 141, 141, 141,
	29, 29, 29, 75, 75, 142, 142, 8, 31, 9,
	137, 137, 137, 71, 71, 71, 10, 12, 12, 12,
	12, 12, 72, 72, 72, 72, 72, 72, 11, 11,
	11, 11, 205, 205, 205, 205, 205, 13, 140, 140,
	140, 14, 16, 16, 16, 16, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 49, 49, 69, 69, 69, 66,
	66, 67, 67, 68, 68, 65, 65, 70, 70, 70,
	73, 73, 73, 35, 143, 143, 33, 74, 74, 74,
	36, 34, 258, 37, 38, 38, 39, 39, 39, 46,
	46, 46, 44, 44, 45, 45, 52, 52, 51, 51,
	53, 53, 53, 53, 150, 150, 150, 149, 149, 55,
	55, 56, 56, 57, 57, 58, 58, 58, 76, 59,
	59, 59, 59, 158, 158, 155, 155, 155, 154, 154,
	60, 60, 60, 60, 61, 61, 61, 61, 62, 62,
	64, 64, 63, 63, 77, 77, 77, 77, 78, 78,
	79, 79, 54, 54, 54, 54, 54, 54, 54, 133,
	133, 81, 81, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 91, 91, 91, 91, 91, 91, 82,
	82, 82, 82, 82, 82, 82, 50, 50, 92, 92,
	92, 98, 93, 93, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 89, 89, 89, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 88, 88, 88, 88,
	88, 88, 88, 88, 259, 259, 90, 90, 90, 90,
	47, 47, 47, 47, 47, 160, 160, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	102, 102, 48, 48, 100, 100, 101, 103, 103, 99,
	99, 99, 84, 84, 84, 84, 84, 84, 84, 86,
	86, 86, 104, 104, 105, 105, 106, 106, 107, 107,
	108, 109, 109, 109, 110, 110, 110, 110, 111, 111,
	111, 83, 83, 83, 83, 83, 83, 112, 112, 112,
	112, 115, 115, 94, 94, 96, 96, 95, 97, 116,
	116, 117, 118, 118, 121, 121, 120, 120, 120, 120,
	120, 129, 129, 128, 128, 128, 119, 119, 122, 122,
	126, 126, 125, 127, 127, 127, 127, 124, 124, 123,
	123, 161, 161, 161, 131, 131, 134, 134, 135, 135,
	132, 132, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 144, 144, 144, 139, 139, 242, 242, 147,
	147, 148, 148, 152, 152, 153, 153, 156, 156, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 256, 257, 159,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 6, 7,
	10, 1, 3, 1, 3, 8, 9, 7, 8, 0,
	1, 1, 1, 0, 1, 1, 1, 3, 0, 4,
	8, 7, 3, 3, 1, 3, 5, 0, 2, 1,
	1, 3, 5, 11, 11, 11, 0, 1, 1, 5,
	9, 7, 1, 1, 1, 1, 2, 3, 2, 0,
	2, 1, 1, 0, 2, 1, 3, 0, 2, 0,
	1, 1, 2, 2, 3, 3, 0, 1, 1, 2,
	1, 1, 4, 4, 2, 4, 0, 1, 0, 1,
	1, 2, 2, 1, 1, 1, 4, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 4, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 3, 3, 4,
	1, 3, 3, 3, 1, 1, 3, 1, 1, 1,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 3, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 4, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 3, 4, 1, 1, 1, 1, 0, 3, 3,
	2, 0, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 2, 7, 7, 8, 9, 0, 1,
	3, 1, 2, 3, 0, 2, 0, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 3, 2, 6, 7, 7, 7, 9, 7,
	7, 7, 4, 0, 1, 0, 1, 0, 1, 1,
	6, 6, 4, 1, 3, 0, 1, 3, 3, 2,
	1, 1, 1, 0, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 3, 3, 3, 1, 1, 3, 5,
	3, 6, 0, 1, 1, 1, 1, 2, 0, 1,
	1, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	3, 3, 4, 4, 4, 6, 5, 5, 3, 3,
	5, 6, 7, 3, 3, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 0, 3, 1, 1, 1, 0,
	2, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	0, 1, 1, 5, 1, 1, 2, 0, 1, 1,
	4, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	5, 5, 3, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 1, 2, 3, 3, 3, 2,
	3, 1, 2, 1, 1, 1, 2, 3, 2, 2,
	0, 2, 3, 2, 2, 2, 1, 0, 2, 2,
	2, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0,
}
var yyChk = [...]int{

	-1000, -254, -17, -18, -22, -23, -24, -25, -26, -27,
	-28, -29, -8, -31, -32, -35, -33, -9, -10, -11,
	-13, -14, -16, -15, -34, -36, -19, -20, 6, 7,
	258, 8, 9, 44, -30, 125, 126, 127, 150, 129,
	145, 47, 64, 278, -137, 148, 285, 288, 289, 292,
	291, 307, 149, 151, -256, 144, 143, 142, 67, -255,
	315, -106, 14, -39, 5, -37, -258, -37, -37, -37,
	-37, -37, -223, 67, -7, -242, 23, 31, 138, 250,
	251, 34, -132, 250, 134, -136, 135, -7, 33, -142,
	138, 138, 243, 125, 238, 280, -68, -69, 282, 283,
	245, 138, 284, 241, 281, 240, 237, 175, 70, 46,
	135, 27, 25, -143, 138, 239, -152, 70, -146, 264,
	19, 206, 152, 171, 265, 312, 79, 205, 208, 209,
	146, 167, 211, 210, 203, 161, 42, 201, 185, 286,
	269, 274, 247, 200, 162, 271, 23, 186, 190, 293,
	25, 213, 184, 26, 27, 266, 49, 188, 214, 53,
	204, 215, 192, 191, 193, 174, 17, 216, 217, 187,
	189, 268, 149, 218, 52, 197, 287, 289, 245, 202,
	176, 165, 166, 273, 272, 150, 270, 140, 168, 307,
	308, 310, 309, 311, 313, 314, -159, -63, -72, 129,
	-152, 271, 274, 276, -205, 70, 72, -145, -146, 85,
	38, 40, 195, 88, 158, 120, 180, 15, 21, 89,
	169, 172, 175, 119, 246, 207, 259, 125, 62, 249,
	252, 248, 250, 238, 163, 43, 9, 142, 143, 37,
	113, 127, 92, 93, 280, 147, 39, 144, 82, 18,
	65, 10, 46, 12, 13, 148, 133, 134, 104, 135,
	60, 7, 156, 157, 121, 41, 101, 56, 35, 58,
	102, 16, 253, 254, 45, 183, 179, 263, 182, 155,
	178, 115, 63, 50, 86, 80, 164, 83, 66, 151,
	84, 14, 61, 283, 137, 136, 282, 160, 103, 128,
	258, 29, 59, 251, 6, 262, 44, 145, 154, 57,
	138, 239, 33, 181, 153, 177, 91, 139, 81, 284,
	5, 34, 198, 8, 64, 141, 255, 256, 257, 48,
	173, 170, 281, 267, 90, 11, 199, -140, 268, 208,
	-159, 290, -159, -159, 308, 310, 309, 311, 312, 314,
	278, -159, -74, 306, 294, -18, -110, 16, 15, -21,
	-19, -256, 6, 36, 37, -46, 54, 55, -38, -42,
	224, 223, 225, -43, 224, 223, -63, 10, -118, -119,
	-121, 290, -161, -120, 294, 295, 293, -148, -129, 296,
	-147, -145, 175, 172, 70, -146, -253, 293, 287, 279,
	275, -224, -219, -151, 70, -146, -135, 133, 135, 135,
	135, -135, 138, -157, -156, 70, -146, -143, 70, -134,
	133, -63, -63, 242, 138, 250, -159, -159, 239, -65,
	246, 247, -67, 10, 104, -159, -159, -159, 245, -159,
	-159, -159, -159, -159, -159, -159, -75, -63, -71, -151,
	72, -12, 18, -18, -24, -22, -23, -25, -12, 271,
	122, 94, 73, -159, -95, -256, -95, -159, -63, -159,
	-159, 313, 291, 292, -143, -257, 69, -111, 18, 45,
	-54, -80, 86, -85, 43, 39, -84, -81, -99, -97,
	-98, 120, 109, 110, 117, 87, 121, -89, -87, -88,
	-90, 72, 71, 73, 74, 75, 76, 80, 81, 82,
	-147, -152, -95, -256, 58, 59, 259, 260, 263, 261,
	89, 48, 248, 257, 256, 255, 253, 254, 249, 252,
	133, 250, 115, 258, 70, -146, -107, -108, -54, -106,
	-18, -37, 50, -44, 37, 78, -132, -132, 44, -63,
	68, -122, -125, -123, 297, 299, -120, 290, 94, -128,
	-147, 72, 43, -128, 44, 15, 15, 69, 68, -163,
	-166, -168, -167, -169, -164, -165, 169, 170, 120, 173,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	44, 146, 165, 166, 167, 168, 186, 187, 188, 189,
	190, 191, 192, 193, 152, 171, 265, 153, 154, 155,
	156, 157, 158, 160, 161, 162, 163, 164, -156, 86,
	70, 70, 70, -63, -63, -248, -249, -250, -208, 299,
	43, -134, 66, -156, 39, -49, 10, -63, -152, -66,
	-67, -67, -63, -66, 68, -73, 137, 274, 208, 94,
	-153, -152, -145, 184, 272, 273, -159, -159, -93, -54,
	-159, -144, 139, 38, -159, -159, -159, -75, 8, 104,
	85, 84, 101, 68, 17, -54, -82, 104, 86, 102,
	103, 88, 106, 105, 116, 109, 110, 111, 112, 113,
	114, 115, 107, 108, 119, 94, 95, 96, 97, 98,
	99, 100, -133, -256, -98, -256, 123, 124, -85, -85,
	-85, -85, -85, -85, -256, 122, -18, -256, -256, -256,
	-256, -256, -256, -256, -102, -54, -256, -259, -256, -259,
	-259, -259, -259, -259, -259, -259, -256, -256, -256, -256,
	68, -109, 40, 142, -110, -257, -46, -86, -147, 73,
	76, -45, 57, -64, 41, -63, -64, -116, -117, -99,
	-147, -152, -79, 11, -121, -161, -124, 68, -126, 68,
	298, 300, 301, -122, 66, 83, -54, -200, 119, -256,
	277, 24, -225, -226, -227, -178, -174, -176, -177, -179,
	-180, -181, -182, -183, -184, -185, -186, -187, -188, -189,
	-190, -191, -192, -193, -194, -195, -196, -197, -198, 79,
	286, -208, 195, 206, 47, 207, 208, 209, 135, 211,
	212, 213, 26, 214, 215, 216, 217, 218, 219, 220,
	221, 222, -219, -220, -221, -5, -4, 135, 35, 31,
	23, 22, -245, -246, -247, -214, -171, -215, -216, -217,
	-172, -41, -173, -201, -202, 80, 86, 43, 195, 136,
	35, 34, 79, 66, 119, 205, 202, -210, 198, -170,
	67, -170, -170, -170, -170, -199, 172, -199, -199, -199,
	67, 67, -170, -170, -170, -212, 67, -212, -212, -213,
	67, -213, -248, 39, 66, 66, 66, -138, 128, 286,
	259, 130, 127, 131, 126, 195, 172, 79, 43, 14,
	270, 70, -250, 119, -206, -187, 175, 172, 169, 301,
	-75, -63, -110, 244, -159, -159, -70, 102, 11, -152,
	-63, -66, -159, -63, -159, 73, 272, 68, -257, -63,
	52, -54, -54, -91, 80, 86, 81, 82, -54, -54,
	-85, -92, -95, -98, 77, 104, 102, 103, 88, -85,
	-85, -85, -85, -85, -85, -85, -85, -85, -85, -85,
	-85, -85, -85, -85, -160, 70, 72, 70, -84, -84,
	-147, -52, 37, -51, -53, 111, -54, -152, -148, -153,
	-145, -257, -18, -51, -51, -54, -54, -51, -44, -100,
	-101, 90, -147, -257, -51, -52, -51, -51, -108, -111,
	-131, 18, 10, 48, 48, -51, -113, 275, -63, -113,
	-79, 68, 94, 122, -106, -54, -123, -125, -127, 302,
	299, 305, 70, -151, -256, -256, -227, -207, 94, -207,
	119, -206, -207, -207, -207, -207, -207, 210, 210, -207,
	-207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
	-207, -207, -6, 70, -222, -221, 136, 34, 32, -247,
	80, 72, 73, 74, 80, -40, -81, -130, 248, 253,
	254, 35, 35, 72, 8, -204, 70, 72, 200, 201,
	43, 43, 203, 204, -211, 199, 73, -199, -199, 44,
	-218, 72, -218, 73, 73, -63, -63, -63, -159, -144,
	-139, 135, 35, 94, 139, 132, 132, 132, -207, -207,
	44, 44, -207, -141, 29, 21, -239, -240, -241, 45,
	19, -159, 72, 72, -54, -66, -79, -12, -54, -159,
	53, 80, 81, 82, -92, -85, -85, -85, -50, 147,
	85, -257, -257, -51, 68, -150, -149, 38, -147, 72,
	122, -256, 122, -257, -257, -257, 68, 141, 38, -257,
	-51, -103, -101, 92, -54, -257, -257, -257, -257, -257,
	-63, -55, 10, -83, 44, 48, -18, -256, -256, -83,
	44, -106, -117, -54, -148, -110, 299, 303, 304, -257,
	-151, -151, 72, -204, -207, -207, 73, 73, 73, 72,
	72, -207, -207, 73, 72, 70, 73, 73, 73, 73,
	43, 72, 43, 201, 200, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 73, 43, 73, 43,
	73, 43, 70, -146, -2, -1, 141, -6, 35, -222,
	67, -40, 69, 70, 120, 69, 68, 69, 68, 69,
	68, -256, -256, -256, -63, -159, 70, 172, -223, 70,
	-219, -244, 70, 43, -209, 70, 120, 43, -203, 73,
	43, -241, -240, -207, -207, -70, -50, 85, -85, -85,
	-257, -53, -149, 111, -153, -52, -148, -162, 120, 169,
	146, 167, 163, 184, 174, 197, 165, 198, -160, -162,
	264, -106, 93, -54, 91, -79, -56, -57, -58, -59,
	-76, -98, -256, -63, -115, 66, -116, -94, -96, -95,
	-256, -18, -112, -151, -114, -151, -116, -110, -257, -257,
	-204, -204, 72, 72, 67, -3, 24, 20, 30, 67,
	-2, -6, 69, 73, 72, 73, 73, -229, -228, -147,
	-229, -229, 44, -244, -244, -85, 122, -257, -257, -170,
	-170, -170, -213, -170, 157, -170, 157, -257, -257, -256,
	-48, 262, -54, -104, 12, 68, -60, -61, -62, 56,
	60, 62, 57, 58, 59, 63, -158, 38, -56, -256,
	-155, -154, 38, -152, 72, 42, -115, 68, -257, -257,
	-257, 68, 122, 68, -257, -256, -175, 276, -229, -229,
	67, -2, 69, 69, 69, -257, 68, -170, -257, -257,
	70, 111, -199, 70, -85, -257, 72, -105, 13, 15,
	-57, -58, -57, -58, 56, 56, 56, 61, 56, 61,
	56, -61, -152, -257, -77, 64, 134, 65, -154, 35,
	-96, 48, -18, -256, -151, -147, -151, -252, -251, 275,
	73, 69, 69, -229, 67, -231, -228, -230, -232, -47,
	104, 267, -54, -93, 66, 66, 56, 56, 135, 135,
	135, 8, -94, -18, 122, 68, -257, 70, -233, -233,
	69, -229, -239, -237, -234, -236, 26, 79, 141, -239,
	-235, -234, 267, -239, -234, -257, 265, 63, 268, -54,
	-54, -256, -256, -256, -116, -257, -151, -251, 48, -238,
	26, -1, 79, 267, -233, 69, -207, 72, -243, 24,
	20, 28, 53, 266, 269, -78, -147, -78, -78, 104,
	-207, 72, 28, -233, 73, 70, 53, -257, 68, -257,
	-257, -95, 73, 70, 267, -147, 268, 269,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 666, 0, 452, 452,
	452, 452, 452, 452, 0, 757, 740, 345, 355, 0,
	433, 0, 0, 976, 372, 382, 388, 976, 0, 976,
	976, 0, 976, 447, 0, 360, 361, 362, 974, 1,
	3, 674, 0, 0, 456, 459, 454, 39, 43, 0,
	0, 0, 66, 0, 738, 0, 0, 0, 738, 59,
	60, 758, 0, 343, 741, 0, 0, 736, 346, 0,
	356, 0, 0, 0, 976, 976, 0, 0, 976, 976,
	976, 0, 976, 976, 976, 976, 976, 976, 976, 434,
	426, 427, 428, 0, 444, 445, 446, 763, 764, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 359, 363, 0, 0,
	512, 923, -2, 377, 387, 383, 384, 385, 386, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 0, 389, 390,
	392, 976, 394, 395, 0, 0, 976, 0, 976, 976,
	0, 451, 0, 448, 449, 31, 678, 0, 0, 666,
	33, 0, 452, 457, 458, 462, 460, 461, 453, 740,
	40, 41, 42, 740, 44, 45, 0, 0, 52, 53,
	702, 0, 0, 704, 731, 732, -2, 0, 0, 0,
	761, 762, -2, 781, 759, 760, 61, 67, 68, 0,
	0, 0, 190, 0, 194, 195, 0, 0, 0, 0,
	0, 0, 0, -2, 344, 767, 768, 736, 0, 0,
	0, 357, 358, 424, 0, 0, 408, 409, 429, 0,
	435, 436, 0, 431, 432, 413, 414, 415, 429, 417,
	418, 419, 420, 421, 422, 423, 440, 353, 366, 364,
	365, 378, 0, -2, 368, 369, 370, 371, 380, 0,
	0, 0, 976, 393, 976, 0, 976, 398, 752, 400,
	401, 976, 976, 976, 0, 32, 975, 27, 0, 0,
	675, 522, 0, 527, 529, 0, 564, 565, 566, 567,
	568, 0, 0, 0, 0, 0, 0, 590, 591, 592,
	593, 652, 653, 654, 655, 656, 657, 658, 531, 532,
	649, 0, 698, 0, 0, 0, 0, 0, 0, 0,
	640, 0, 614, 614, 614, 614, 614, 614, 614, 614,
	0, 0, 0, 0, -2, -2, 667, 668, 671, 674,
	31, 459, 0, 464, 463, 455, 0, 0, 0, 520,
	0, 716, 727, 720, 0, 0, 705, 0, 0, 709,
	713, 714, 715, 291, 712, 0, 0, -2, 316, 200,
	267, 197, 198, 199, 260, 215, 260, 260, 260, 260,
	287, 287, 287, 287, 243, 244, 245, 246, 247, 0,
	0, 230, 260, 260, 260, 234, 250, 251, 252, 253,
	254, 255, 256, 257, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 262, 262, 262, 264, 264, -2, 0,
	0, 0, 0, 116, 0, 342, -2, 98, 0, 0,
	107, 0, 0, 352, 737, 674, 0, 976, 976, 437,
	0, 0, 429, 976, 0, 976, 441, 442, 0, 0,
	513, 765, 766, 373, 374, 375, 391, 396, 0, 562,
	397, 0, 753, 754, 402, 403, 404, 450, 679, 0,
	0, 0, 0, 0, 0, 525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 551, 552, 553,
	554, 555, 528, 0, 542, 0, 0, 0, 584, 585,
	586, 587, 588, 0, 466, 0, 31, 0, 0, 0,
	0, 0, 0, 462, 0, 641, 0, 606, 0, 607,
	608, 609, 610, 611, 612, 613, 0, 466, 0, 0,
	0, 670, 672, 673, 678, 34, 462, 0, 659, 0,
	0, 0, 465, 48, 0, 511, 48, 520, 699, 0,
	649, 0, 666, 0, 703, 0, 718, 0, 719, 0,
	0, 729, 730, 717, 706, 707, 708, 710, 0, 0,
	0, 0, 117, -2, 120, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 108,
	108, 0, 108, 108, 108, 108, 108, 0, 0, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 191, 192, 308, 327, 0, 329, 330, 325,
	-2, 317, 193, 201, 202, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 271, 0, 0, 286, 0,
	300, 302, 0, 0, 0, 0, 0, 269, 268, 214,
	0, 287, 287, 237, 238, 239, 0, 240, 241, 242,
	0, 0, 231, 232, 233, 225, 0, 226, 227, 228,
	0, 229, 62, 739, 0, 0, 0, 976, 752, 0,
	749, 0, 747, 0, 742, 743, 744, 745, 746, 748,
	750, 751, 99, 108, 108, 104, 110, 0, 0, 108,
	347, 89, 976, 0, 406, 407, 410, 0, 0, 430,
	429, 520, 416, 354, 443, 379, 0, 0, 697, 976,
	0, 523, 524, 526, 543, 0, 545, 547, 676, 677,
	533, 534, 558, 559, 560, 0, 0, 0, 0, 556,
	538, 0, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 583, 625, 626, 0, 581, 582,
	589, 0, 0, 467, 468, 470, 474, 0, 650, 0,
	-2, 561, 31, 0, 0, 0, 0, 0, 0, 647,
	644, 0, 0, 615, 0, 0, 0, 0, 669, 28,
	0, 734, 735, 660, 661, 479, 0, 0, 510, 0,
	666, 0, 0, 0, 674, 521, 728, 721, 722, 0,
	0, 726, 292, 0, 0, 0, 121, 0, 109, 0,
	108, 108, 0, 0, 0, 0, 0, 108, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 320, 309, 308, 328, 0, 327, 318, 203,
	272, 273, 274, 275, 276, 277, 278, 280, 283, 284,
	285, 299, 301, 303, 0, 290, 185, 186, 293, 294,
	295, 296, 297, 298, 196, 270, 0, 235, 236, 0,
	0, 258, 0, 0, 0, 0, 0, 0, 334, 0,
	976, 755, 756, 0, 0, 0, 0, 0, 0, 0,
	111, 112, 0, 350, 348, 349, 351, 90, 91, 108,
	108, 405, 425, 438, 439, 437, 411, 381, 563, 399,
	680, 544, 546, 548, 535, 556, 539, 0, 536, 0,
	0, 530, 594, 0, 0, 471, 475, 0, 477, 478,
	0, 466, 0, -2, 597, 598, 0, 0, 0, 0,
	666, 0, 645, 0, 0, 605, 616, 617, 618, 619,
	29, 520, 0, 691, 0, 0, -2, 0, 0, 37,
	0, 674, 700, 701, 650, 51, 723, 724, 725, 69,
	0, 0, 187, 188, 0, 0, 146, 147, 184, 149,
	150, 0, 0, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 0, 321, 0, 0, 320, 308,
	0, 279, 261, 288, 289, 248, 0, 249, 0, 265,
	0, 0, 0, 0, 335, 336, 337, 0, 339, 340,
	341, 102, 74, 75, 103, 113, 114, 115, 105, 100,
	101, 92, 93, 0, 0, 412, 537, 0, 557, 540,
	595, 469, 476, 472, 0, 0, 651, 0, 260, 260,
	630, 260, 264, 633, 260, 635, 260, 638, 0, 0,
	0, 642, 604, 648, 0, 662, 480, 481, 483, 484,
	485, 493, 0, 495, 35, 0, 691, 681, 693, 695,
	0, 31, 0, 687, 0, 46, 38, 50, 0, 57,
	148, 189, 151, 152, 0, 319, 322, 323, 324, 0,
	0, 320, 281, 0, 259, 0, 0, 0, 331, 260,
	0, 0, 0, 94, 95, 541, 0, 596, 599, 627,
	287, 631, 632, 634, 636, 637, 639, 601, 600, 0,
	0, 0, 646, 664, 0, 0, 0, 0, 0, 500,
	0, 0, 503, 0, 0, 0, 0, 494, 0, 0,
	514, 496, 0, 498, 499, 0, 36, 0, 696, -2,
	0, 0, 0, 0, 49, 0, 71, 0, 0, 0,
	0, 0, 282, 263, 266, 79, 0, 333, 83, 87,
	338, 473, 628, 629, 620, 603, 643, 30, 0, 0,
	482, 489, 0, 492, 501, 502, 504, 0, 506, 0,
	508, 509, 486, 487, 488, 0, 0, 0, 497, 0,
	694, 0, -2, 0, 689, 688, 47, 0, 54, 0,
	58, 314, 314, 0, 0, 89, 332, 89, 89, 0,
	0, 0, 665, 663, 0, 0, 505, 507, 0, 0,
	0, 0, 684, 31, 0, 0, 70, 0, 304, 305,
	314, 0, 63, 80, 81, 82, 108, 0, 0, 64,
	84, 85, 0, 65, 88, 602, 0, 0, 0, 490,
	491, 0, 0, 0, 692, -2, 690, 55, 0, 315,
	108, 311, 0, 0, 306, 314, 0, 78, 76, 72,
	73, 0, 621, 0, 624, 0, 518, 0, 0, 0,
	0, 312, 0, 307, 77, 86, 622, 515, 0, 516,
	517, 56, 310, 313, 0, 519, 0, 623,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 114, 106, 3,
	67, 69, 111, 109, 68, 110, 122, 112, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 315,
	95, 94, 96, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 116, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 117,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 107, 108, 113, 115,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1084
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1086
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1118
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1126
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 30:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1157
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1163
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = InsertStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			ins.OnDup = OnDup(yyDollar[8].updateExprs)
			yyVAL.statement = ins
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1176
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[9].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: InsertStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[9].updateExprs)}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1188
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[7].ins
			ins.Action = ReplaceStr
			ins.Comments = yyDollar[2].bytes2
			ins.LockOption = yyDollar[3].str
			ins.Ignore = yyDollar[4].str
			ins.Table = yyDollar[5].tableName
			ins.Partitions = yyDollar[6].partitions
			yyVAL.statement = ins
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1200
		{
			cols := make(Columns, 0, len(yyDollar[8].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[8].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: ReplaceStr, Comments: Comments(yyDollar[2].bytes2), LockOption: yyDollar[3].str, Ignore: yyDollar[4].str, Table: yyDollar[5].tableName, Partitions: yyDollar[6].partitions, Columns: cols, Rows: Values{vals}}
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.str = ""
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1228
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1250
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1283
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1293
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1299
		{
			yyVAL.optVal = nil
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1303
		{
			if string(yyDollar[2].bytes) == "0" {
				yylex.Error("Number of partitions must be a positive integer")
				return 1
			}
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].tableSpec
			yyDollar[1].ddl.PartitionOption = yyDollar[3].partitionOption
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1330
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: yyDollar[2].str, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 64:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: FullTextStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexType: SpatialStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName, IndexOpts: NewIndexOptions(yyDollar[8].indexColumns, yyDollar[10].indexOptionList), indexLockAndAlgorithm: yyDollar[11].indexLockAndAlgorithm}
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.partitionOption = &PartOptNormal{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.partitionOption = &PartOptGlobal{}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.partitionOption = &PartOptSingle{}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.partitionOption = &PartOptSingle{
				BackendName: yyDollar[4].colIdent.String(),
			}
		}
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.partitionOption = &PartOptList{
				Name:     yyDollar[5].colIdent.String(),
				PartDefs: yyDollar[8].partitionDefinitions,
			}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.partitionOption = &PartOptHash{
				Name:         yyDollar[5].colIdent.String(),
				PartitionNum: yyDollar[7].optVal,
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = "hash"
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.str = "btree"
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.str = "default"
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote([]byte(yyDollar[2].str)),
			}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1423
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.indexOption = yyDollar[1].indexOption
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1481
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: AlgorithmOptionEmpty,
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      LockOptionEmpty,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[1].lockOptionType,
				AlgorithmOption: yyDollar[2].algorithmOptionType,
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.indexLockAndAlgorithm = &IndexLockAndAlgorithm{
				LockOption:      yyDollar[2].lockOptionType,
				AlgorithmOption: yyDollar[1].algorithmOptionType,
			}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1518
		{
			switch StrToLower(yyDollar[3].str) {
			case "none":
				yyVAL.lockOptionType = LockOptionNone
			case "default":
				yyVAL.lockOptionType = LockOptionDefault
			case "shared":
				yyVAL.lockOptionType = LockOptionShared
			case "exclusive":
				yyVAL.lockOptionType = LockOptionExclusive
			default:
				yylex.Error("unknown lock type, the option should be NONE, DEFAULT, SHARED or EXCLUSIVE")
				return 1
			}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1536
		{
			switch StrToLower(yyDollar[3].str) {
			case "default":
				yyVAL.algorithmOptionType = AlgorithmOptionDefault
			case "copy":
				yyVAL.algorithmOptionType = AlgorithmOptionCopy
			case "inplace":
				yyVAL.algorithmOptionType = AlgorithmOptionInplace
			case "instant":
				yyVAL.algorithmOptionType = AlgorithmOptionInstant
			default:
				yylex.Error("unknown algorithm type, the option should be DEFAULT, COPY, INPLACE or INSTANT")
				return 1
			}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			switch string(yyDollar[1].bytes) {
			case "0", "1":
				yyVAL.str = string(yyDollar[1].bytes)
				break
			default:
				yylex.Error("Invalid ternary option, argument (should be 0, 1 or 'default')")
				return 1
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1587
		{
			yyVAL.str = "default"
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1593
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].bytes),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: string(yyDollar[2].str),
				Value:   NewStrValWithoutQuote([]byte(yyDollar[4].str)),
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.databaseOption = &DatabaseOption{
				OptType: "encryption",
				Value:   yyDollar[2].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.databaseOption = &DatabaseOption{
				ReadOnlyValue: yyDollar[4].str,
			}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1621
		{
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1623
		{
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1626
		{
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.str = "character set"
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = "char set"
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.str = "default"
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1660
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.tableSpec = yyDollar[2].tableSpec

			if len(yyDollar[4].tableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].tableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.tableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.tableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.tableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionAvgRowLength); val != nil {
					yyVAL.tableSpec.Options.AvgRowLength = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionChecksum); val != nil {
					yyVAL.tableSpec.Options.Checksum = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCollate); val != nil {
					yyVAL.tableSpec.Options.Collate = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionCompression); val != nil {
					yyVAL.tableSpec.Options.Compression = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionConnection); val != nil {
					yyVAL.tableSpec.Options.Connection = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDataDirectory); val != nil {
					yyVAL.tableSpec.Options.DataDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionIndexDirectory); val != nil {
					yyVAL.tableSpec.Options.IndexDirectory = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionDelayKeyWrite); val != nil {
					yyVAL.tableSpec.Options.DelayKeyWrite = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionEncryption); val != nil {
					yyVAL.tableSpec.Options.Encryption = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionInsertMethod); val != nil {
					yyVAL.tableSpec.Options.InsertMethod = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionKeyBlockSize); val != nil {
					yyVAL.tableSpec.Options.KeyBlockSize = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMaxRows); val != nil {
					yyVAL.tableSpec.Options.MaxRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionMinRows); val != nil {
					yyVAL.tableSpec.Options.MinRows = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPackKeys); val != nil {
					yyVAL.tableSpec.Options.PackKeys = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionPassword); val != nil {
					yyVAL.tableSpec.Options.Password = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionRowFormat); val != nil {
					yyVAL.tableSpec.Options.RowFormat = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsAutoRecalc); val != nil {
					yyVAL.tableSpec.Options.StatsAutoRecalc = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsPersistent); val != nil {
					yyVAL.tableSpec.Options.StatsPersistent = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionStatsSamplePages); val != nil {
					yyVAL.tableSpec.Options.StatsSamplePages = String(val)
				}
				if val := yyDollar[4].tableOptionListOpt.GetTableOptValByType(TableOptionTableSpace); val != nil {
					yyVAL.tableSpec.Options.TableSpace = String(val)
				}
			}
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.tableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1756
		{
			yyVAL.tableOptionListOpt.TblOptList = yyDollar[1].tableOptionList
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.tableOptionList = append(yyVAL.tableOptionList, yyDollar[1].tableOption)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.tableOptionList = append(yyDollar[1].tableOptionList, yyDollar[2].tableOption)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1779
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAvgRowLength,
				Val:  yyDollar[1].optVal,
			}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionChecksum,
				Val:  yyDollar[1].optVal,
			}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCollate,
				Val:  yyDollar[1].optVal,
			}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1821
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCompression,
				Val:  yyDollar[1].optVal,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionConnection,
				Val:  yyDollar[1].optVal,
			}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDataDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionIndexDirectory,
				Val:  yyDollar[1].optVal,
			}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionDelayKeyWrite,
				Val:  yyDollar[1].optVal,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEncryption,
				Val:  yyDollar[1].optVal,
			}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1863
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionInsertMethod,
				Val:  yyDollar[1].optVal,
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionKeyBlockSize,
				Val:  yyDollar[1].optVal,
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMaxRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionMinRows,
				Val:  yyDollar[1].optVal,
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPackKeys,
				Val:  yyDollar[1].optVal,
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionPassword,
				Val:  yyDollar[1].optVal,
			}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionRowFormat,
				Val:  yyDollar[1].optVal,
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1912
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsAutoRecalc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsPersistent,
				Val:  yyDollar[1].optVal,
			}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionStatsSamplePages,
				Val:  yyDollar[1].optVal,
			}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableSpace,
				Val:  yyDollar[1].optVal,
			}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1942
		{
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "zlib", "lz4", "none":
				break
			default:
				yylex.Error("Invalid compression option, argument (should be 'ZLIB', 'LZ4' or 'NONE')")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1971
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1977
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.optVal = NewStrVal(yyDollar[4].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1995
		{
			switch string(yyDollar[3].bytes) {
			case "Y", "y":
				yylex.Error("The encryption option is parsed but ignored by all storage engines.")
				return 1
			case "N", "n":
				break
			default:
				yylex.Error("Invalid encryption option, argument (should be Y or N)")
				return 1
			}
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2011
		{
			switch StrToLower(string(yyDollar[3].bytes)) {
			case "no", "first", "last":
				break
			default:
				yylex.Error("Invalid insert_method option, argument (should be NO, FIRST or LAST)")
				return 1
			}
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2030
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[3].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.optVal = NewIntVal(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2170
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.tableSpec = &TableSpec{}
			yyVAL.tableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.tableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.tableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2210
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyDollar[2].columnType.Collate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionCollate).Collate
			yyDollar[2].columnType.ColumnFormat = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionFormat).ColumnFormat
			yyDollar[2].columnType.Storage = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionStorage).Storage
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2301
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].str,
			}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionCollate,
				Collate: yyDollar[1].optVal,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionFormat,
				ColumnFormat: yyDollar[1].str,
			}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionStorage,
				Storage: yyDollar[1].str,
			}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2441
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.optVal = nil
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2560
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2568
		{
			yyVAL.lengthScaleOption = LengthScaleOption{}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2572
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.lengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2606
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(yyDollar[2].str))
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2636
		{
			if yyDollar[2].boolVal {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("true"))
			} else {
				yyVAL.optVal = NewStrValWithoutQuote([]byte("false"))
			}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.str = yyDollar[3].str
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + ")"
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.str = string(yyDollar[1].bytes) + "(" + string(yyDollar[3].bytes) + ")"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2683
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2692
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2696
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2703
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2718
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2732
		{
			// "default" is not in official doc: https://dev.mysql.com/doc/refman/5.7/en/create-table.html
			// but actually mysql support it, see: https://github.com/mysql/mysql-server/blob/5.7/sql/sql_yacc.yy#L6953
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2738
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2752
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2761
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2765
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2771
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2777
		{
			// TODO(): in the future we'll support format out index_type, currently skip it.
			// If index_name is empty, becarful that the `name` result will be diffirent when doing format.
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[1].str),
				Name:    NewColIdent(yyDollar[2].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 305:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2789
		{
			typ := string(yyDollar[1].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[2].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[3].str),
				Opts:    NewIndexOptions(yyDollar[5].indexColumns, yyDollar[7].indexOptionList),
				Primary: false,
				Unique:  false,
			}
		}
	case 306:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2803
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes),
				Name:    NewColIdent("PRIMARY"),
				Opts:    NewIndexOptions(yyDollar[6].indexColumns, yyDollar[8].indexOptionList),
				Primary: true,
				Unique:  true,
			}
		}
	case 307:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2814
		{
			// TODO(): in the future we'll support format out index_type, currently skip it
			typ := string(yyDollar[2].bytes)
			if yyDollar[3].str != "" {
				typ = typ + " " + string(yyDollar[3].str)
			}
			yyVAL.indexDefinition = &IndexDefinition{
				Type:    typ,
				Name:    NewColIdent(yyDollar[4].str),
				Opts:    NewIndexOptions(yyDollar[7].indexColumns, yyDollar[9].indexOptionList),
				Primary: false,
				Unique:  true,
			}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionBlockSize,
				Val:  NewIntVal(yyDollar[3].bytes),
			}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionUsing,
				Val:  NewStrValWithoutQuote(yyDollar[1].bytes),
			}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionComment,
				Val:  NewStrVal(yyDollar[2].bytes),
			}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2861
		{
			yyVAL.indexOption = &IndexOption{
				Type: IndexOptionParser,
				Val:  NewStrValWithoutQuote(yyDollar[3].bytes),
			}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.indexOptionList = []*IndexOption{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.indexOptionList = append(yyDollar[1].indexOptionList, yyDollar[2].indexOption)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2879
		{
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2885
		{
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2896
		{
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2913
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2928
		{
			// set empty
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2933
		{
			yyVAL.str = yyDollar[1].str
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2940
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2950
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2960
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 334:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2966
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2970
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2975
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].tableSpec}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2992
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2996
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3000
		{
			yyVAL.statement = &DDL{Action: AlterDatabase, Database: yyDollar[3].tableIdent, DatabaseOptions: yyDollar[4].databaseOptionListOpt}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3005
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3009
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3014
		{
			yyVAL.byt = 0
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3018
		{
			yyVAL.byt = 1
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3023
		{
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3025
		{
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3027
		{
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3031
		{
			var exists bool
			if yyDollar[4].byt != 0 {
				exists = true
			}
			if yyDollar[2].byt != 0 {
				yyVAL.statement = &DDL{Action: DropTempTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			} else {
				yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[5].tableNames, IfExists: exists}
			}
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3043
		{
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName, indexLockAndAlgorithm: yyDollar[6].indexLockAndAlgorithm}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3047
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3057
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3061
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3067
		{
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3069
		{
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3073
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3079
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3085
		{
			yyVAL.statement = &Xa{}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3091
		{
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3093
		{
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3095
		{
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3098
		{
			yyVAL.showFilter = nil
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3102
		{
			yyVAL.showFilter = &ShowFilter{Like: yyDollar[1].colIdent.String()}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3106
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[1].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3112
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[2].tableName, Filter: yyDollar[3].showFilter}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3118
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3122
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3126
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3130
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3134
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3139
		{
			yyVAL.explainType = ExplainTypeEmpty
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3143
		{
			yyVAL.explainType = ExplainTypeJSON
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3147
		{
			yyVAL.explainType = ExplainTypeTree
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3151
		{
			yyVAL.explainType = ExplainTypeTraditional
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3155
		{
			yyVAL.explainType = ExplainTypeExtended
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3159
		{
			yyVAL.explainType = ExplainTypePartitions
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3165
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3169
		{
			// Currently we just parse it.
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: &OtherRead{}}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3174
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[3].statement}
		}
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3178
		{
			yyVAL.statement = &Explain{Type: ExplainTypeEmpty, Analyze: true, Statement: yyDollar[6].statement}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3183
		{
			yyVAL.optVal = nil
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3187
		{
			// Normal str as an identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3192
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3197
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3201
		{
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3207
		{
			yyVAL.statement = &Help{HelpInfo: yyDollar[2].optVal}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3212
		{
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3214
		{
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3216
		{
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3220
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3226
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3230
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3234
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3238
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3244
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3248
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3252
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3256
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3260
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3264
		{
			yyVAL.statement = &Radon{Action: RebalanceStr}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3268
		{
			yyVAL.statement = &Radon{Action: XARecoverStr}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3272
		{
			yyVAL.statement = &Radon{Action: XACommitStr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3276
		{
			yyVAL.statement = &Radon{Action: XARollbackStr}
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3282
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3286
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3290
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableIdent.v}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3294
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3298
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3302
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 411:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3306
		{
			if yyDollar[5].str != "" {
				yyDollar[4].tableName.Qualifier.v = yyDollar[5].str
			}
			var filter *ShowFilter
			if yyDollar[6].expr != nil {
				filter = &ShowFilter{Filter: yyDollar[6].expr}
			}
			yyVAL.statement = &Show{Type: ShowIndexStr, Table: yyDollar[4].tableName, Filter: filter}
		}
	case 412:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:3317
		{
			if yyDollar[6].str != "" {
				yyDollar[5].tableName.Qualifier.v = yyDollar[6].str
			}
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[7].showFilter}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3324
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3328
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3332
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3336
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].str}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3340
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3344
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3348
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3352
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3356
		{
			yyVAL.statement = &Show{Type: ShowCollationStr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3360
		{
			yyVAL.statement = &Show{Type: ShowCharsetStr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3364
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3369
		{
			yyVAL.str = ""
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3373
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3379
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3383
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3387
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3393
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3397
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3403
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3407
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3413
		{
			yyVAL.str = ""
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3417
		{
			yyVAL.str = "full "
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3423
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3427
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3433
		{
			yyVAL.showFilter = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3437
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3441
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3446
		{
			yyVAL.checksumOptionEnum = ChecksumOptionNone
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3450
		{
			yyVAL.checksumOptionEnum = ChecksumOptionQuick
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3454
		{
			yyVAL.checksumOptionEnum = ChecksumOptionExtended
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3460
		{
			yyVAL.statement = &Checksum{Tables: yyDollar[3].tableNames, ChecksumOption: yyDollar[4].checksumOptionEnum}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3466
		{
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3468
		{
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3472
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3477
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNone
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3481
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionNoWriteToBinlog
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3485
		{
			yyVAL.optimizeOptionEnum = OptimizeOptionLocal
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3491
		{
			yyVAL.statement = &Optimize{OptimizeOption: yyDollar[2].optimizeOptionEnum, Tables: yyDollar[4].tableNames}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3497
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3502
		{
			setAllowComments(yylex, true)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3505
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3511
		{
			yyVAL.bytes2 = nil
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3515
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3521
		{
			yyVAL.str = UnionStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3525
		{
			yyVAL.str = UnionAllStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3529
		{
			yyVAL.str = UnionDistinctStr
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3534
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3538
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3542
		{
			yyVAL.str = SQLCacheStr
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3547
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3551
		{
			yyVAL.str = DistinctStr
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3556
		{
			yyVAL.str = ""
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3560
		{
			yyVAL.str = StraightJoinHint
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3565
		{
			yyVAL.selectExprs = nil
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3569
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3575
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3579
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3585
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3589
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3593
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3597
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3602
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3606
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3610
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3617
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3622
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3626
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3632
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3636
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3646
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3650
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3654
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3660
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3673
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3677
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3681
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3685
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3690
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3694
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3699
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3703
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3707
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3714
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3720
		{
			yyVAL.str = JoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3724
		{
			yyVAL.str = JoinStr
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3728
		{
			yyVAL.str = JoinStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3732
		{
			yyVAL.str = StraightJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3738
		{
			yyVAL.str = LeftJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3742
		{
			yyVAL.str = LeftJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3746
		{
			yyVAL.str = RightJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3750
		{
			yyVAL.str = RightJoinStr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3756
		{
			yyVAL.str = NaturalJoinStr
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3760
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3770
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3774
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3780
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3784
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3789
		{
			yyVAL.indexHints = nil
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3793
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3797
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 517:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3801
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3807
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3811
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3816
		{
			yyVAL.expr = nil
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3820
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3826
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3830
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3834
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3838
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3842
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3846
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3850
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3856
		{
			yyVAL.str = ""
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3860
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3866
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3870
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3876
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3880
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3884
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3888
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3892
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3896
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:3900
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:3904
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:3908
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3912
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3918
		{
			yyVAL.str = IsNullStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3922
		{
			yyVAL.str = IsNotNullStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3926
		{
			yyVAL.str = IsTrueStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3930
		{
			yyVAL.str = IsNotTrueStr
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3934
		{
			yyVAL.str = IsFalseStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3938
		{
			yyVAL.str = IsNotFalseStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3944
		{
			yyVAL.str = EqualStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3948
		{
			yyVAL.str = LessThanStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3952
		{
			yyVAL.str = GreaterThanStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3956
		{
			yyVAL.str = LessEqualStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3960
		{
			yyVAL.str = GreaterEqualStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3964
		{
			yyVAL.str = NotEqualStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3968
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3973
		{
			yyVAL.expr = nil
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3977
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3983
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3987
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3991
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:3997
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4003
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4007
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4013
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4017
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4021
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4025
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4029
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4033
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4037
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4041
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4045
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4049
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4053
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4057
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4061
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4065
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4069
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4073
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4077
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4081
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4085
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4089
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4093
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4097
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4105
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4119
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4123
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4127
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4145
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4149
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4153
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4163
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4167
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4171
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4175
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4179
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 602:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:4183
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 603:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4187
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4191
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4195
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4205
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4209
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4213
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4217
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4222
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4227
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4232
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4237
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4252
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4256
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4260
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4264
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4270
		{
			yyVAL.str = ""
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4274
		{
			yyVAL.str = BooleanModeStr
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4278
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 623:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:4282
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4286
		{
			yyVAL.str = QueryExpansionStr
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4292
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4296
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4302
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4306
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4310
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4314
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4318
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4322
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].lengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].lengthScaleOption.Scale
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4328
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4332
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4336
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4340
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4344
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4348
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4352
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4357
		{
			yyVAL.expr = nil
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4361
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4366
		{
			yyVAL.str = string("")
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4370
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4376
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4380
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4386
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4391
		{
			yyVAL.expr = nil
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4395
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4401
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4405
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4409
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4415
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4419
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4423
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4427
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4431
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4435
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4439
		{
			yyVAL.expr = &NullVal{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4445
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4454
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4458
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4463
		{
			yyVAL.exprs = nil
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4467
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4472
		{
			yyVAL.expr = nil
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4476
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4481
		{
			yyVAL.orderBy = nil
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4485
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4491
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4495
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4501
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4506
		{
			yyVAL.str = AscScr
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4510
		{
			yyVAL.str = AscScr
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4514
		{
			yyVAL.str = DescScr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4519
		{
			yyVAL.limit = nil
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4523
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4527
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4531
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4536
		{
			yyVAL.str = ""
		}
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4540
		{
			yyVAL.str = ForUpdateStr
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4544
		{
			yyVAL.str = ShareModeStr
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4557
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4561
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4565
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4570
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:4574
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 686:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:4578
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4585
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4589
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4593
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4597
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4602
		{
			yyVAL.updateExprs = nil
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:4606
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4612
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4616
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4622
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4626
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4632
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4638
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4648
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4652
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4658
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4664
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4668
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4674
		{
			yyVAL.setExpr = yyDollar[1].setExpr
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4678
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4685
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("on"))}}
		}
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4689
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: NewStrVal([]byte("off"))}}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4693
		{
			yyVAL.setExpr = &SetExpr{Type: yyDollar[1].colIdent, Val: &OptVal{Value: yyDollar[3].expr}}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4697
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: yyDollar[2].expr}}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4701
		{
			yyVAL.setExpr = &SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: &OptVal{Value: &CollateExpr{Expr: yyDollar[2].expr, Charset: yyDollar[3].str}}}
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4708
		{
			yyVAL.bytes = []byte("charset")
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4714
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4718
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4722
		{
			yyVAL.expr = &Default{}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4728
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Type: NewColIdent(string(yyDollar[1].bytes)), Val: yyDollar[2].setVal}}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4732
		{
			yyVAL.setExprs = SetExprs{&SetExpr{Scope: yyDollar[1].str, Type: NewColIdent(string(yyDollar[2].bytes)), Val: yyDollar[3].setVal}}
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4738
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[1].str, Mode: yyDollar[2].str}
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4742
		{
			yyVAL.setVal = &TxnVal{Level: yyDollar[2].str, Mode: yyDollar[1].str}
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4748
		{
			yyVAL.str = ""
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4752
		{
			yyVAL.str = yyDollar[2].str
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4758
		{
			yyVAL.str = yyDollar[3].str
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4764
		{
			yyVAL.str = RepeatableRead
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4768
		{
			yyVAL.str = ReadCommitted
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4772
		{
			yyVAL.str = ReadUncommitted
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4776
		{
			yyVAL.str = Serializable
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4782
		{
			yyVAL.str = ""
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4786
		{
			yyVAL.str = yyDollar[2].str
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4792
		{
			yyVAL.str = TxReadWrite
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4796
		{
			yyVAL.str = TxReadOnly
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4802
		{
			yyVAL.str = SessionStr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4806
		{
			yyVAL.str = SessionStr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4810
		{
			yyVAL.str = GlobalStr
		}
	case 736:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4819
		{
			yyVAL.byt = 0
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:4823
		{
			yyVAL.byt = 1
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4828
		{
			yyVAL.byt = 0
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:4832
		{
			yyVAL.byt = 1
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4837
		{
			yyVAL.str = ""
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4841
		{
			yyVAL.str = IgnoreStr
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4847
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4851
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4855
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4859
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4863
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4867
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4871
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4875
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4879
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4883
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4888
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4892
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4896
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4902
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4906
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:4911
		{
			yyVAL.str = IndexStr
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4915
		{
			yyVAL.str = UniqueStr
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4921
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4925
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4932
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4938
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4942
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4949
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4955
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:4959
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5191
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:5200
		{
			decNesting(yylex)
		}
	case 976:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:5205
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
