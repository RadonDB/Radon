// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const WARNINGS = 57505
const VARIABLES = 57506
const EVENTS = 57507
const BINLOG = 57508
const GTID = 57509
const STATUS = 57510
const COLUMNS = 57511
const FIELDS = 57512
const CURRENT_TIMESTAMP = 57513
const DATABASE = 57514
const CURRENT_DATE = 57515
const CURRENT_TIME = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const UTC_DATE = 57519
const UTC_TIME = 57520
const UTC_TIMESTAMP = 57521
const REPLACE = 57522
const CONVERT = 57523
const CAST = 57524
const GROUP_CONCAT = 57525
const SEPARATOR = 57526
const MATCH = 57527
const AGAINST = 57528
const BOOLEAN = 57529
const LANGUAGE = 57530
const WITH = 57531
const QUERY = 57532
const EXPANSION = 57533
const UNUSED = 57534
const PARTITION = 57535
const PARTITIONS = 57536
const HASH = 57537
const LIST = 57538
const XA = 57539
const DISTRIBUTED = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556
const RADON = 57557
const ATTACH = 57558
const ATTACHLIST = 57559
const DETACH = 57560
const RESHARD = 57561
const CLEANUP = 57562

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"CLEANUP",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sql.y:3655

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 180,
	83, 673,
	-2, 40,
	-1, 185,
	83, 550,
	-2, 498,
	-1, 412,
	111, 534,
	-2, 530,
	-1, 413,
	111, 535,
	-2, 531,
	-1, 440,
	158, 56,
	161, 56,
	-2, 69,
	-1, 479,
	1, 50,
	238, 50,
	-2, 56,
	-1, 594,
	5, 27,
	-2, 474,
	-1, 617,
	158, 56,
	161, 56,
	-2, 70,
	-1, 684,
	1, 51,
	238, 51,
	-2, 56,
	-1, 769,
	111, 537,
	-2, 533,
	-1, 899,
	5, 28,
	-2, 353,
	-1, 923,
	5, 28,
	-2, 475,
	-1, 1011,
	5, 27,
	-2, 477,
	-1, 1114,
	5, 28,
	-2, 478,
}

const yyPrivate = 57344

const yyLast = 6815

var yyAct = [...]int{

	413, 960, 500, 1151, 1117, 1070, 597, 1002, 390, 1056,
	366, 943, 388, 1001, 798, 936, 962, 56, 799, 667,
	981, 763, 884, 607, 1067, 184, 554, 3, 753, 892,
	760, 74, 159, 816, 768, 66, 611, 310, 140, 598,
	795, 680, 311, 72, 730, 710, 368, 779, 819, 503,
	642, 626, 685, 762, 618, 636, 355, 421, 676, 178,
	168, 415, 493, 55, 140, 146, 74, 364, 313, 149,
	151, 150, 152, 153, 307, 613, 614, 158, 183, 308,
	1118, 1165, 181, 1150, 1164, 765, 1139, 1162, 630, 1080,
	1149, 994, 1050, 831, 832, 833, 1138, 326, 143, 947,
	701, 834, 330, 337, 707, 391, 50, 117, 118, 332,
	333, 325, 176, 841, 660, 966, 855, 821, 700, 1087,
	820, 140, 140, 668, 624, 1045, 1043, 867, 866, 865,
	320, 315, 1109, 1111, 565, 116, 864, 1131, 140, 1130,
	1129, 316, 318, 137, 121, 703, 95, 120, 637, 319,
	639, 635, 639, 140, 699, 612, 50, 1077, 347, 349,
	82, 1035, 505, 926, 164, 327, 821, 92, 898, 820,
	98, 93, 353, 140, 896, 119, 140, 141, 74, 808,
	417, 60, 553, 74, 544, 545, 661, 428, 312, 522,
	183, 418, 532, 862, 181, 434, 505, 78, 532, 737,
	951, 696, 694, 690, 1110, 693, 695, 62, 63, 64,
	65, 1155, 507, 735, 736, 734, 712, 142, 668, 145,
	835, 147, 148, 510, 154, 155, 156, 157, 817, 629,
	1121, 521, 520, 530, 531, 523, 524, 525, 526, 527,
	528, 529, 522, 144, 698, 532, 358, 416, 1137, 638,
	952, 638, 107, 780, 863, 348, 348, 634, 807, 697,
	504, 432, 79, 996, 97, 480, 105, 76, 830, 322,
	50, 509, 508, 780, 136, 909, 81, 87, 625, 628,
	103, 104, 80, 108, 692, 627, 77, 423, 510, 94,
	431, 102, 861, 1025, 504, 702, 711, 314, 135, 90,
	83, 1090, 328, 329, 99, 334, 335, 336, 691, 338,
	339, 340, 341, 342, 101, 140, 86, 1032, 140, 140,
	140, 344, 1024, 140, 346, 508, 115, 140, 140, 350,
	982, 352, 75, 937, 91, 938, 96, 85, 106, 509,
	508, 510, 639, 1122, 1030, 53, 998, 419, 877, 878,
	879, 84, 100, 123, 984, 733, 510, 941, 89, 512,
	130, 109, 110, 112, 111, 113, 114, 853, 317, 902,
	986, 852, 990, 754, 985, 755, 983, 842, 826, 345,
	1134, 988, 580, 581, 1023, 509, 508, 935, 904, 172,
	871, 987, 870, 851, 1031, 838, 989, 991, 1028, 511,
	496, 716, 510, 525, 526, 527, 528, 529, 522, 1084,
	542, 532, 723, 725, 726, 509, 508, 124, 724, 134,
	132, 74, 122, 968, 129, 1027, 140, 509, 508, 140,
	965, 74, 510, 586, 501, 509, 508, 946, 599, 903,
	600, 638, 313, 183, 510, 945, 513, 181, 1158, 354,
	582, 594, 510, 827, 604, 125, 133, 127, 128, 131,
	1132, 354, 354, 602, 1054, 354, 1021, 1020, 541, 543,
	890, 354, 1083, 669, 670, 671, 811, 501, 756, 631,
	584, 957, 956, 1082, 563, 954, 953, 948, 140, 481,
	609, 925, 354, 806, 552, 140, 140, 555, 556, 557,
	558, 559, 560, 561, 140, 564, 566, 566, 566, 566,
	566, 566, 566, 566, 574, 575, 576, 577, 610, 24,
	682, 497, 706, 498, 731, 499, 321, 502, 716, 354,
	595, 686, 441, 440, 678, 679, 567, 568, 569, 570,
	571, 572, 573, 24, 921, 615, 592, 57, 22, 796,
	593, 806, 74, 523, 524, 525, 526, 527, 528, 529,
	522, 1054, 732, 532, 759, 74, 183, 955, 918, 53,
	767, 656, 655, 24, 1010, 890, 704, 781, 430, 769,
	608, 652, 771, 380, 379, 381, 382, 383, 384, 578,
	890, 583, 385, 53, 720, 721, 74, 727, 728, 797,
	53, 662, 800, 599, 658, 600, 784, 163, 804, 681,
	772, 773, 757, 758, 776, 890, 313, 657, 650, 777,
	67, 805, 802, 53, 651, 809, 806, 823, 783, 165,
	785, 786, 677, 672, 1125, 663, 664, 665, 666, 788,
	787, 501, 796, 794, 774, 775, 688, 487, 1102, 50,
	673, 674, 675, 1103, 1104, 1100, 1062, 1063, 814, 818,
	1101, 555, 590, 822, 416, 1128, 1127, 1099, 719, 708,
	709, 1098, 815, 717, 715, 169, 170, 654, 1156, 53,
	1148, 876, 422, 843, 844, 1147, 356, 793, 792, 140,
	630, 825, 829, 828, 810, 1033, 420, 940, 846, 801,
	437, 50, 357, 427, 845, 140, 847, 848, 849, 530,
	531, 523, 524, 525, 526, 527, 528, 529, 522, 812,
	813, 532, 653, 919, 687, 486, 1066, 770, 166, 167,
	422, 1008, 837, 836, 824, 856, 686, 854, 1135, 782,
	859, 1119, 160, 731, 520, 530, 531, 523, 524, 525,
	526, 527, 528, 529, 522, 361, 1093, 532, 439, 438,
	873, 1058, 1061, 1062, 1063, 1059, 74, 1060, 1064, 791,
	161, 1126, 57, 1092, 1053, 608, 494, 790, 894, 880,
	495, 732, 1058, 1061, 1062, 1063, 1059, 490, 1060, 1064,
	140, 175, 1074, 839, 506, 59, 61, 54, 872, 1,
	1116, 684, 874, 683, 641, 640, 942, 633, 617, 616,
	309, 632, 850, 313, 313, 889, 647, 599, 646, 600,
	645, 183, 643, 927, 74, 930, 908, 840, 659, 1029,
	1026, 906, 623, 622, 769, 621, 944, 620, 920, 619,
	648, 649, 931, 644, 444, 445, 928, 443, 447, 446,
	442, 177, 1065, 939, 1069, 932, 933, 891, 74, 69,
	140, 860, 689, 540, 789, 182, 910, 858, 313, 433,
	183, 803, 579, 897, 414, 1091, 1052, 907, 389, 562,
	949, 950, 778, 367, 869, 722, 378, 501, 375, 958,
	959, 377, 376, 929, 74, 585, 875, 591, 514, 74,
	365, 967, 359, 1108, 970, 969, 894, 1004, 484, 183,
	331, 183, 975, 767, 126, 980, 138, 424, 1057, 140,
	1055, 1003, 769, 976, 995, 993, 74, 74, 979, 887,
	800, 978, 992, 888, 917, 74, 1018, 489, 1013, 1014,
	1009, 999, 174, 1000, 899, 900, 901, 183, 1049, 905,
	1120, 1011, 589, 25, 911, 1019, 912, 913, 914, 915,
	1015, 58, 171, 961, 14, 1005, 21, 15, 13, 12,
	29, 10, 9, 8, 922, 923, 924, 7, 6, 5,
	4, 162, 23, 2, 20, 19, 18, 934, 17, 16,
	11, 0, 0, 0, 0, 997, 0, 0, 0, 174,
	174, 0, 0, 0, 0, 0, 0, 140, 140, 0,
	0, 0, 0, 0, 0, 0, 174, 74, 1078, 800,
	0, 0, 74, 0, 1006, 1075, 0, 801, 1041, 183,
	1012, 174, 0, 1081, 944, 0, 74, 0, 964, 1076,
	961, 0, 0, 0, 0, 0, 0, 0, 183, 0,
	0, 174, 980, 1005, 174, 140, 140, 140, 140, 1086,
	0, 0, 974, 1095, 0, 1097, 140, 0, 1094, 140,
	1096, 0, 140, 0, 1105, 0, 0, 1112, 74, 0,
	0, 1113, 0, 0, 1051, 599, 0, 600, 0, 0,
	1115, 0, 0, 0, 0, 771, 1124, 0, 0, 0,
	1048, 1005, 1005, 1005, 1005, 1016, 1017, 0, 0, 0,
	0, 0, 1068, 0, 0, 1005, 801, 0, 50, 0,
	0, 0, 961, 1079, 0, 546, 547, 548, 549, 550,
	551, 1022, 0, 0, 74, 1146, 0, 1145, 0, 0,
	0, 0, 0, 74, 74, 74, 183, 1153, 1154, 0,
	0, 0, 1036, 0, 1037, 1152, 1152, 1152, 0, 74,
	1006, 1006, 1006, 1006, 1161, 1046, 1047, 0, 0, 1038,
	1039, 1163, 1040, 0, 1068, 1042, 0, 1044, 1123, 501,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 479, 0, 0, 174, 174, 174, 0,
	0, 488, 0, 0, 0, 174, 174, 0, 0, 0,
	0, 1140, 1141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1142, 1143, 1144, 0, 961,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 173, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 0, 1133,
	0, 0, 0, 1136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 174, 0, 601, 603, 323, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 343, 1159, 1160, 521, 520,
	530, 531, 523, 524, 525, 526, 527, 528, 529, 522,
	351, 0, 532, 95, 0, 88, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 82, 0, 0,
	426, 0, 0, 429, 92, 0, 174, 98, 93, 0,
	0, 0, 0, 174, 174, 0, 0, 0, 0, 0,
	0, 0, 174, 0, 0, 73, 0, 895, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 509,
	508, 521, 520, 530, 531, 523, 524, 525, 526, 527,
	528, 529, 522, 0, 0, 532, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 766, 603, 0, 0, 766, 766, 0, 0, 766,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 766, 766, 766, 766, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 766, 0,
	0, 601, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 881, 882, 883, 0, 0, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 482, 483, 485, 0, 0,
	0, 101, 0, 86, 491, 492, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 521, 520, 530, 531,
	523, 524, 525, 526, 527, 528, 529, 522, 84, 100,
	532, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 0, 0, 0, 174, 0, 0,
	0, 0, 95, 0, 88, 0, 0, 0, 0, 0,
	761, 0, 363, 174, 0, 0, 82, 362, 0, 0,
	0, 0, 399, 92, 0, 0, 98, 93, 0, 0,
	0, 0, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 596, 412, 380, 379, 381, 382, 383,
	384, 0, 0, 78, 385, 386, 387, 0, 0, 0,
	360, 373, 0, 398, 0, 0, 0, 0, 0, 0,
	766, 972, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 371, 764, 766, 0, 0, 410,
	0, 372, 0, 0, 369, 374, 0, 0, 174, 0,
	0, 0, 0, 0, 0, 705, 0, 0, 107, 0,
	0, 408, 713, 714, 0, 601, 0, 603, 79, 0,
	97, 718, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 1034, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	101, 0, 86, 400, 409, 406, 407, 404, 405, 403,
	402, 401, 411, 394, 395, 397, 0, 396, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 766,
	0, 0, 0, 0, 0, 603, 766, 84, 100, 450,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 114, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 462, 1088, 0, 0, 0, 467, 468,
	469, 470, 471, 472, 473, 0, 474, 475, 476, 477,
	478, 463, 464, 465, 466, 448, 449, 0, 0, 451,
	0, 0, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 516, 0, 519, 0, 0, 0, 0, 0,
	533, 534, 535, 536, 537, 538, 539, 0, 517, 518,
	515, 521, 520, 530, 531, 523, 524, 525, 526, 527,
	528, 529, 522, 886, 0, 532, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 1072, 0, 0, 0,
	0, 0, 868, 521, 520, 530, 531, 523, 524, 525,
	526, 527, 528, 529, 522, 0, 0, 532, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 174, 174, 174, 174, 0, 0, 0,
	0, 0, 0, 0, 1106, 0, 0, 174, 0, 0,
	1072, 0, 0, 601, 0, 0, 0, 0, 290, 275,
	235, 293, 211, 226, 305, 228, 229, 265, 196, 245,
	95, 224, 88, 0, 0, 291, 242, 916, 214, 189,
	221, 190, 212, 239, 82, 210, 277, 248, 227, 0,
	299, 92, 257, 0, 98, 93, 0, 0, 241, 280,
	243, 274, 234, 266, 203, 256, 294, 225, 262, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 259, 288, 223, 261, 264, 188, 258, 0,
	192, 197, 304, 286, 217, 218, 0, 0, 0, 0,
	0, 0, 0, 240, 244, 271, 232, 963, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 255, 0, 0,
	0, 199, 194, 238, 0, 0, 0, 202, 0, 216,
	272, 0, 0, 0, 281, 233, 107, 287, 231, 230,
	295, 268, 0, 278, 213, 222, 79, 220, 97, 263,
	105, 76, 284, 279, 253, 236, 237, 193, 0, 270,
	81, 87, 209, 260, 103, 104, 80, 108, 198, 301,
	77, 186, 300, 94, 185, 102, 285, 254, 250, 195,
	283, 252, 249, 90, 83, 0, 191, 0, 99, 292,
	306, 208, 282, 0, 0, 0, 0, 0, 101, 200,
	86, 206, 207, 204, 205, 246, 247, 296, 297, 298,
	273, 201, 0, 0, 276, 251, 75, 0, 91, 303,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 219,
	302, 269, 267, 289, 0, 84, 100, 0, 0, 0,
	0, 0, 180, 179, 187, 109, 110, 112, 111, 113,
	114, 290, 275, 235, 293, 211, 226, 305, 228, 229,
	265, 196, 245, 95, 224, 88, 0, 0, 291, 242,
	0, 214, 189, 221, 190, 212, 239, 82, 210, 277,
	248, 227, 0, 299, 92, 257, 0, 98, 93, 0,
	0, 241, 280, 243, 274, 234, 266, 203, 256, 294,
	225, 262, 53, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 259, 288, 223, 261, 264,
	188, 258, 0, 192, 197, 304, 286, 217, 218, 0,
	0, 0, 0, 0, 0, 0, 240, 244, 271, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	255, 0, 0, 0, 199, 194, 238, 0, 0, 0,
	202, 0, 216, 272, 0, 0, 0, 281, 233, 107,
	287, 231, 230, 295, 268, 0, 278, 213, 222, 79,
	220, 97, 263, 105, 76, 284, 279, 253, 236, 237,
	193, 0, 270, 81, 87, 209, 260, 103, 104, 80,
	108, 198, 301, 77, 605, 300, 94, 606, 102, 285,
	254, 250, 195, 283, 252, 249, 90, 83, 0, 191,
	0, 99, 292, 306, 208, 282, 0, 0, 0, 0,
	0, 101, 200, 86, 206, 207, 204, 205, 246, 247,
	296, 297, 298, 273, 201, 0, 0, 276, 251, 75,
	0, 91, 303, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 219, 302, 269, 267, 289, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 290, 275, 235, 293, 211, 226,
	305, 228, 229, 265, 196, 245, 95, 224, 88, 0,
	0, 291, 242, 0, 214, 189, 221, 190, 212, 239,
	82, 210, 277, 248, 227, 0, 299, 92, 257, 0,
	98, 93, 0, 0, 241, 280, 243, 274, 234, 266,
	203, 256, 294, 225, 262, 0, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 259, 288,
	223, 261, 264, 188, 258, 0, 192, 197, 304, 286,
	217, 218, 0, 0, 0, 0, 0, 0, 0, 240,
	244, 271, 232, 0, 0, 0, 0, 0, 0, 1085,
	0, 215, 0, 255, 0, 0, 0, 199, 194, 238,
	0, 0, 0, 202, 0, 216, 272, 0, 0, 0,
	281, 233, 107, 287, 231, 230, 295, 268, 0, 278,
	213, 222, 79, 220, 97, 263, 105, 76, 284, 279,
	253, 236, 237, 193, 0, 270, 81, 87, 209, 260,
	103, 104, 80, 108, 198, 301, 77, 605, 300, 94,
	606, 102, 285, 254, 250, 195, 283, 252, 249, 90,
	83, 0, 191, 0, 99, 292, 306, 208, 282, 0,
	0, 0, 0, 0, 101, 200, 86, 206, 207, 204,
	205, 246, 247, 296, 297, 298, 273, 201, 0, 0,
	276, 251, 75, 0, 91, 303, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 219, 302, 269, 267, 289,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 114, 290, 275, 235,
	293, 211, 226, 305, 228, 229, 265, 196, 245, 95,
	224, 88, 0, 0, 291, 242, 0, 214, 189, 221,
	190, 212, 239, 82, 210, 277, 248, 227, 0, 299,
	92, 257, 0, 98, 93, 0, 0, 241, 280, 243,
	274, 234, 266, 203, 256, 294, 225, 262, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 259, 288, 223, 261, 264, 188, 258, 0, 192,
	197, 304, 286, 217, 218, 0, 0, 0, 0, 0,
	0, 0, 240, 244, 271, 232, 0, 0, 0, 0,
	0, 0, 977, 0, 215, 0, 255, 0, 0, 0,
	199, 194, 238, 0, 0, 0, 202, 0, 216, 272,
	0, 0, 0, 281, 233, 107, 287, 231, 230, 295,
	268, 0, 278, 213, 222, 79, 220, 97, 263, 105,
	76, 284, 279, 253, 236, 237, 193, 0, 270, 81,
	87, 209, 260, 103, 104, 80, 108, 198, 301, 77,
	605, 300, 94, 606, 102, 285, 254, 250, 195, 283,
	252, 249, 90, 83, 0, 191, 0, 99, 292, 306,
	208, 282, 0, 0, 0, 0, 0, 101, 200, 86,
	206, 207, 204, 205, 246, 247, 296, 297, 298, 273,
	201, 0, 0, 276, 251, 75, 0, 91, 303, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 219, 302,
	269, 267, 289, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 0, 109, 110, 112, 111, 113, 114,
	290, 275, 235, 293, 211, 226, 305, 228, 229, 265,
	196, 245, 95, 224, 88, 0, 0, 291, 242, 0,
	214, 189, 221, 190, 212, 239, 82, 210, 277, 248,
	227, 0, 299, 92, 257, 0, 98, 93, 0, 0,
	241, 280, 243, 274, 234, 266, 203, 256, 294, 225,
	262, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 259, 288, 223, 261, 264, 188,
	258, 0, 192, 197, 304, 286, 217, 218, 0, 0,
	0, 0, 0, 0, 0, 240, 244, 271, 232, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 0, 255,
	0, 0, 0, 199, 194, 238, 0, 0, 0, 202,
	0, 216, 272, 0, 0, 0, 281, 233, 107, 287,
	231, 230, 295, 268, 0, 278, 213, 222, 79, 220,
	97, 263, 105, 76, 284, 279, 253, 236, 237, 193,
	0, 270, 81, 87, 209, 260, 103, 104, 80, 108,
	198, 301, 77, 186, 300, 94, 185, 102, 285, 254,
	250, 195, 283, 252, 249, 90, 83, 0, 191, 0,
	99, 292, 306, 208, 282, 0, 0, 0, 0, 0,
	101, 200, 86, 206, 207, 204, 205, 246, 247, 296,
	297, 298, 273, 201, 0, 0, 276, 251, 75, 0,
	91, 303, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 219, 302, 269, 267, 289, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 187, 109, 110, 112,
	111, 113, 114, 290, 275, 235, 293, 211, 226, 305,
	228, 229, 265, 196, 245, 95, 224, 88, 0, 0,
	291, 242, 0, 214, 189, 221, 190, 212, 239, 82,
	210, 277, 248, 227, 0, 299, 92, 257, 0, 98,
	93, 0, 0, 241, 280, 243, 274, 234, 266, 203,
	256, 294, 225, 262, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 259, 288, 223,
	261, 264, 188, 258, 0, 192, 197, 304, 286, 217,
	218, 0, 0, 0, 0, 0, 0, 0, 240, 244,
	271, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 0, 255, 0, 0, 0, 199, 194, 238, 0,
	0, 0, 202, 0, 216, 272, 0, 0, 0, 281,
	233, 107, 287, 231, 230, 295, 268, 0, 278, 213,
	222, 79, 220, 97, 263, 105, 76, 284, 279, 253,
	236, 237, 193, 0, 270, 81, 87, 209, 260, 103,
	104, 80, 108, 198, 301, 77, 605, 300, 94, 606,
	102, 285, 254, 250, 195, 283, 252, 249, 90, 83,
	0, 191, 0, 99, 292, 306, 208, 282, 0, 0,
	0, 0, 0, 101, 200, 86, 206, 207, 204, 205,
	246, 247, 296, 297, 298, 273, 201, 0, 0, 276,
	251, 75, 0, 91, 303, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 219, 302, 269, 267, 289, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 0,
	109, 110, 112, 111, 113, 114, 290, 275, 235, 293,
	211, 226, 305, 228, 229, 265, 196, 245, 95, 224,
	88, 0, 0, 291, 242, 0, 214, 189, 221, 190,
	212, 239, 82, 210, 277, 248, 227, 0, 299, 92,
	257, 0, 98, 93, 0, 0, 241, 280, 243, 274,
	234, 266, 203, 256, 294, 225, 262, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	259, 288, 223, 261, 264, 188, 258, 0, 192, 197,
	304, 286, 217, 218, 0, 0, 0, 0, 0, 0,
	0, 240, 244, 271, 232, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 0, 255, 0, 0, 0, 199,
	194, 238, 0, 0, 0, 202, 0, 216, 272, 0,
	0, 0, 281, 233, 107, 287, 231, 230, 295, 268,
	0, 278, 213, 222, 79, 220, 97, 263, 105, 76,
	284, 279, 253, 236, 237, 193, 0, 270, 81, 87,
	209, 260, 103, 104, 80, 108, 198, 301, 77, 605,
	300, 94, 606, 102, 285, 254, 250, 195, 283, 252,
	249, 90, 83, 0, 191, 0, 99, 292, 306, 208,
	282, 0, 0, 0, 0, 0, 101, 200, 86, 206,
	207, 204, 205, 246, 247, 296, 297, 298, 273, 201,
	0, 0, 276, 251, 75, 0, 91, 303, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 219, 302, 269,
	267, 289, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 114, 290,
	275, 235, 293, 211, 226, 305, 228, 229, 265, 196,
	245, 95, 224, 88, 0, 0, 291, 242, 0, 214,
	189, 221, 190, 212, 239, 82, 210, 277, 248, 227,
	0, 299, 92, 257, 0, 98, 93, 0, 0, 241,
	280, 243, 274, 234, 266, 203, 256, 294, 225, 262,
	0, 0, 0, 139, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 259, 288, 223, 261, 264, 188, 258,
	0, 192, 197, 304, 286, 217, 218, 0, 0, 0,
	0, 0, 0, 0, 240, 244, 271, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 255, 0,
	0, 0, 199, 194, 238, 0, 0, 0, 202, 0,
	216, 272, 0, 0, 0, 281, 233, 107, 287, 231,
	230, 295, 268, 0, 278, 213, 222, 79, 220, 97,
	263, 105, 76, 284, 279, 253, 236, 237, 193, 0,
	270, 81, 87, 209, 260, 103, 104, 80, 108, 198,
	301, 77, 605, 300, 94, 606, 102, 285, 254, 250,
	195, 283, 252, 249, 90, 83, 0, 191, 0, 99,
	292, 306, 208, 282, 0, 0, 0, 0, 0, 101,
	200, 86, 206, 207, 204, 205, 246, 247, 296, 297,
	298, 273, 201, 0, 0, 276, 251, 75, 0, 91,
	303, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	219, 302, 269, 267, 289, 0, 84, 100, 0, 0,
	0, 0, 95, 89, 88, 0, 109, 110, 112, 111,
	113, 114, 363, 0, 0, 0, 82, 362, 0, 0,
	0, 0, 399, 92, 0, 0, 98, 93, 0, 0,
	0, 0, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 412, 380, 379, 381, 382, 383,
	384, 0, 0, 78, 385, 386, 387, 0, 0, 0,
	360, 373, 0, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 371, 764, 0, 0, 0, 410,
	0, 372, 0, 0, 369, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 400, 409, 406, 407, 404, 405, 403,
	402, 401, 411, 394, 395, 397, 0, 396, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 95, 89, 88, 0, 109, 110, 112,
	111, 113, 114, 363, 0, 0, 0, 82, 362, 0,
	0, 0, 0, 399, 92, 0, 0, 98, 93, 0,
	0, 0, 0, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 354, 412, 380, 379, 381, 382,
	383, 384, 0, 0, 78, 385, 386, 387, 0, 0,
	0, 360, 373, 0, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	410, 0, 372, 0, 0, 369, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 400, 409, 406, 407, 404, 405,
	403, 402, 401, 411, 394, 395, 397, 0, 396, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 24, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 95, 89, 88, 0, 109, 110,
	112, 111, 113, 114, 363, 0, 0, 0, 82, 362,
	0, 0, 0, 0, 399, 92, 0, 0, 98, 93,
	0, 0, 0, 0, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 412, 380, 379, 381,
	382, 383, 384, 0, 0, 78, 385, 386, 387, 0,
	0, 0, 360, 373, 0, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 370, 371, 0, 0, 0,
	0, 410, 0, 372, 0, 0, 369, 374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 408, 0, 0, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 87, 0, 0, 103, 104,
	80, 108, 0, 0, 77, 0, 0, 94, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 90, 83, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 86, 400, 409, 406, 407, 404,
	405, 403, 402, 401, 411, 394, 395, 397, 0, 396,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 95, 89, 88, 0, 109,
	110, 112, 111, 113, 114, 363, 0, 0, 0, 82,
	362, 0, 0, 0, 0, 399, 92, 0, 0, 98,
	93, 0, 0, 0, 0, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 412, 380, 379,
	381, 382, 383, 384, 0, 0, 78, 385, 386, 387,
	0, 0, 0, 360, 373, 0, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 370, 371, 0, 0,
	0, 0, 410, 0, 372, 0, 0, 369, 374, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 87, 0, 0, 103,
	104, 80, 108, 0, 0, 77, 0, 0, 94, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 90, 83,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 86, 400, 409, 406, 407,
	404, 405, 403, 402, 401, 411, 394, 395, 397, 0,
	396, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 95, 0, 88, 0, 0, 89, 0, 0,
	109, 110, 112, 111, 113, 114, 82, 0, 0, 0,
	0, 0, 399, 92, 0, 0, 98, 93, 0, 0,
	0, 0, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 412, 380, 379, 381, 382, 383,
	384, 0, 0, 78, 385, 386, 387, 0, 0, 0,
	0, 373, 0, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 371, 0, 0, 0, 0, 410,
	0, 372, 0, 0, 369, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 400, 409, 406, 407, 404, 405, 403,
	402, 401, 411, 394, 395, 397, 0, 396, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 88, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 82, 109, 110, 112,
	111, 113, 114, 92, 0, 0, 98, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 521,
	520, 530, 531, 523, 524, 525, 526, 527, 528, 529,
	522, 0, 0, 532, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 95,
	0, 88, 81, 87, 71, 0, 103, 104, 80, 108,
	0, 0, 77, 82, 0, 94, 0, 102, 0, 0,
	92, 0, 0, 98, 93, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 73, 86, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 114, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 70, 0, 107, 0, 95, 0, 88,
	0, 0, 0, 0, 0, 79, 0, 97, 0, 105,
	76, 82, 0, 0, 0, 0, 0, 0, 92, 81,
	87, 98, 93, 103, 104, 80, 108, 0, 0, 77,
	0, 0, 94, 0, 102, 0, 53, 0, 0, 139,
	0, 0, 90, 83, 0, 0, 0, 99, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 86,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 91, 0, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 107, 109, 110, 112, 111, 113, 114,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 87, 0,
	0, 103, 104, 80, 108, 0, 0, 77, 0, 0,
	94, 0, 102, 0, 0, 0, 0, 0, 0, 0,
	90, 83, 0, 0, 95, 99, 88, 0, 0, 0,
	0, 0, 0, 1071, 0, 101, 0, 86, 82, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 98, 93,
	0, 0, 0, 75, 0, 91, 0, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 139, 0, 1073, 0,
	0, 0, 84, 100, 0, 78, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 95, 0, 88, 0, 0, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 82, 0, 0, 0,
	0, 0, 0, 92, 81, 87, 98, 93, 103, 104,
	80, 108, 0, 0, 77, 0, 0, 94, 0, 102,
	0, 53, 0, 0, 73, 0, 0, 90, 83, 0,
	0, 0, 99, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 107, 109,
	110, 112, 111, 113, 114, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 95,
	0, 88, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 82, 0, 94, 0, 102, 0, 0,
	92, 0, 0, 98, 93, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 73, 86, 0, 587, 0, 0, 588, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 95, 0, 88,
	0, 0, 0, 0, 0, 79, 0, 97, 0, 105,
	76, 82, 436, 0, 0, 0, 0, 0, 92, 81,
	87, 98, 93, 103, 104, 80, 108, 0, 0, 77,
	0, 0, 94, 0, 102, 0, 0, 0, 0, 73,
	0, 435, 90, 83, 0, 0, 0, 99, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 91, 0, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 107, 109, 110, 112, 111, 113, 114,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 0,
	0, 0, 95, 0, 88, 0, 0, 81, 87, 0,
	0, 103, 104, 80, 108, 0, 82, 77, 0, 0,
	94, 0, 102, 92, 0, 0, 98, 93, 0, 0,
	90, 83, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 101, 1073, 86, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 91, 0, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	95, 0, 88, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 82, 0, 0, 0, 0, 0,
	0, 92, 81, 87, 98, 93, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 53,
	0, 0, 139, 0, 0, 90, 83, 0, 0, 0,
	99, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 107, 109, 110, 112,
	111, 113, 114, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 0, 0, 0, 95, 0, 88, 0, 0,
	81, 87, 0, 0, 103, 104, 80, 108, 0, 82,
	77, 0, 0, 94, 0, 102, 92, 0, 0, 98,
	93, 0, 0, 90, 83, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 101, 895,
	86, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 0, 109, 110, 112, 111, 113,
	114, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 0, 0, 0,
	95, 0, 88, 0, 0, 81, 87, 0, 0, 103,
	104, 80, 108, 425, 82, 77, 0, 0, 94, 0,
	102, 92, 0, 0, 98, 93, 0, 0, 90, 83,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 101, 0, 86, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 0,
	109, 110, 112, 111, 113, 114, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 95, 0,
	88, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 82, 0, 0, 0, 0, 0, 0, 92,
	81, 87, 98, 93, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 0, 0, 0,
	73, 0, 0, 90, 83, 0, 0, 0, 99, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 107, 109, 110, 112, 111, 113,
	114, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 95, 0, 88, 0, 0, 81, 87,
	0, 0, 103, 104, 80, 108, 0, 82, 77, 0,
	0, 94, 0, 102, 92, 0, 0, 98, 93, 0,
	0, 90, 83, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 101, 0, 86, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 95, 0, 88, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 82, 0, 0, 0, 0,
	0, 0, 92, 81, 87, 98, 93, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 139, 0, 0, 90, 83, 0, 0,
	0, 99, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 107, 109, 110,
	112, 111, 113, 114, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 95, 0, 88, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	82, 77, 0, 0, 94, 0, 102, 92, 0, 0,
	98, 93, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 101,
	0, 86, 0, 0, 0, 0, 0, 78, 24, 51,
	26, 27, 0, 0, 0, 0, 0, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 28, 84, 100, 36, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 114, 0, 0, 0, 37, 0, 0, 53, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 0, 77, 0, 0, 94,
	0, 102, 0, 0, 0, 0, 0, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 30, 31, 32, 0,
	34, 0, 0, 0, 101, 0, 86, 0, 0, 0,
	0, 0, 35, 47, 39, 0, 0, 48, 49, 33,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 41, 42, 0, 44,
	43, 0, 0, 0, 45,
}
var yyPact = [...]int{

	6582, -1000, -175, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 758, 790, -1000, -1000, -1000, -1000, -1000, 564,
	4962, 10, -14, 26, 23, 239, 22, 6394, -1000, -1000,
	36, -1000, -161, -1000, -1000, -164, -1000, -1000, -1000, -1000,
	567, -1000, -1000, -1000, -1000, -1000, 726, 755, 623, 704,
	632, -1000, 10, 6394, 781, 1953, -136, 6519, 5, 19,
	5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 21, -1000, 4, 467, 4,
	6394, 6394, -71, -24, -1000, -1000, -77, -1000, -1000, -1000,
	-82, -1000, -1000, -1000, -1000, -1000, -1000, 6394, -1000, -1000,
	-1000, -1000, -1000, -1000, 317, -1000, -1000, -1000, -1000, 544,
	544, -1000, 6394, -1000, -1000, -1000, -1000, -1000, 404, 668,
	4428, 4428, 758, -1000, 567, -1000, -1000, -1000, 657, -1000,
	-1000, 220, 6053, 670, 76, 6394, 521, 2885, -1000, -1000,
	-1000, 178, 5570, -1000, -1000, -1000, 667, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 744, 743, 475,
	-1000, 1670, -1000, -1000, 6394, 190, 430, 6394, 6394, 6394,
	698, 592, 6394, -1000, -1000, 777, 6394, 6394, -1000, -1000,
	766, 770, -1000, -1000, -1000, -1000, -1000, 766, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4428, -1000,
	-1000, 136, -1000, -1000, -1000, -1000, 786, 119, 342, -1000,
	4428, 1767, 544, 544, -1000, -1000, 72, -1000, -1000, 4635,
	4635, 4635, 4635, 4635, 4635, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 544, 71,
	-1000, 4217, 544, 544, 544, 544, 544, 544, 4428, 544,
	544, 544, 544, 544, 544, 544, 544, 544, 544, 544,
	544, 544, -1000, -1000, 532, -1000, 354, 726, 404, 632,
	5462, 616, -1000, -1000, 513, 6394, -1000, 6286, 3584, 764,
	2885, 521, 4428, 47, -1000, -1000, -1000, -1000, -137, 544,
	56, 129, 549, -62, -1000, -1000, 545, -1000, 545, 545,
	545, 545, -35, -35, -35, -35, -1000, -1000, -1000, -1000,
	-1000, 577, -1000, 545, 545, 545, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 576, 576, 576, 553, 553, 658,
	697, 591, -1000, 86, 519, -1000, -1000, 6394, -1000, 726,
	-80, -1000, -1000, 205, 6394, 6394, -1000, -1000, -1000, -1000,
	471, 198, -1000, 6394, -1000, -1000, -1000, 627, 4428, 4428,
	343, 4428, 4428, 133, 4635, 289, 122, 4635, 4635, 4635,
	4635, 4635, 4635, 4635, 4635, 4635, 4635, 4635, 4635, 4635,
	4635, 4635, 314, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 419, -1000, 567, 523, 523, 90, 90, 90, 90,
	90, 4835, 1555, 3351, 404, 4217, 3795, 3795, 4428, 4428,
	3795, 705, 174, 198, 6161, -1000, 404, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3795, 3795, 3795, 3795, 4428, -1000,
	-1000, -1000, 668, -1000, 705, 759, -1000, 651, 650, 3795,
	-1000, 587, 6286, 544, -1000, 5335, -1000, 569, -1000, 175,
	-1000, 68, -1000, -1000, -1000, -1000, -1000, 758, 4428, -1000,
	198, -1000, 417, 544, 544, 6519, -1000, 56, -1000, -1000,
	-1000, -1000, -1000, -1000, 145, 145, -41, -1000, -1000, 145,
	-1000, -1000, -1000, 571, 711, 319, 394, 127, -1000, -1000,
	-1000, 549, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 199, 32, -1000, 710, -1000, 709, 334, 785, -64,
	-1000, -1000, 315, -35, -35, -1000, -1000, 47, 665, 47,
	47, 47, 332, -1000, -1000, -1000, -1000, 309, -1000, -1000,
	-1000, 305, -1000, -1000, 658, -1000, 8, -1000, 6394, -1000,
	170, 171, 12, 0, -1, -2, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6394, -1000, -1000, 331, -1000, -1000,
	-1000, 329, 4428, -1000, 205, -1000, 4428, -1000, -1000, 639,
	133, 251, -1000, -1000, 279, -1000, -1000, 198, 198, 1234,
	-1000, -1000, -1000, -1000, 289, 4635, 4635, 4635, 1307, 1234,
	1799, 613, 649, 90, 303, 303, 84, 84, 84, 84,
	84, 455, 455, -1000, -1000, -1000, 404, -1000, -1000, -1000,
	404, 3795, 518, -1000, -1000, 1326, 63, 544, 57, -1000,
	-1000, 404, 413, 413, 312, 362, 413, 3795, 194, -1000,
	4428, 404, -1000, 413, 404, 413, 413, -1000, -1000, 6394,
	-1000, -1000, -1000, -1000, 558, -1000, 692, 494, 487, -1000,
	-1000, 4006, 404, 434, 52, 758, 6286, 4428, 3351, 726,
	198, -1000, 6519, 6519, 404, -1000, 326, -1000, 274, 145,
	-1000, 664, 295, 6161, -1000, 386, -1000, -1000, 378, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -89,
	-1000, -1000, 429, 47, 47, -1000, 141, -1000, -1000, -1000,
	428, -1000, 510, 424, -1000, 145, 145, 2186, -1000, 6394,
	-1000, -1000, -1000, 371, -43, 564, 364, 6519, -1000, -1000,
	-1000, -1000, 198, -1000, 198, -1000, -1000, -1000, -1000, -1000,
	-1000, 1307, 1234, 1442, -1000, 4635, 4635, -1000, -1000, 413,
	3795, -1000, -1000, 5928, -1000, -1000, 2652, 3795, 3118, -1000,
	-1000, -1000, 221, 314, 221, -112, 533, 181, -1000, 4428,
	266, -1000, -1000, -1000, -1000, -1000, -1000, 764, 5803, 708,
	-1000, 544, -1000, -1000, 537, 6161, 6161, 726, -1000, 198,
	-1000, -1000, 404, 404, 2186, -1000, -1000, -1000, -1000, 274,
	-1000, -1000, 409, -1000, 545, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 323, 260, -1000, 231, 366, 285,
	-1000, -1000, -1000, -1000, -1000, -1000, 662, -1000, -1000, -1000,
	-1000, 4635, 1234, 1234, -1000, -1000, -1000, -1000, 50, 404,
	-1000, 404, 545, 545, -1000, 545, 553, -1000, 545, -17,
	545, -18, 404, 404, 544, -109, -1000, 198, 4428, 762,
	504, 737, -1000, -1000, -1000, 700, 5070, 5227, 784, -1000,
	544, -1000, 567, 46, -1000, -1000, 2186, 544, -1000, -1000,
	-117, 6161, -1000, -1000, 425, 414, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 350, 1234, 2419, -1000, -1000, -1000, 60,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4635, 404,
	240, 198, 760, 741, 5803, 5803, 5803, 5803, -1000, 626,
	622, -1000, 610, 603, 609, 6394, -1000, 407, 5070, 79,
	-1000, 5695, -1000, -1000, 6286, 487, 404, 6161, -1000, -130,
	721, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 137, -1000,
	-1000, -1000, 4428, 4428, 737, 579, 716, -1000, -1000, -1000,
	-1000, 621, -1000, 620, -1000, -1000, -1000, -1000, -1000, 18,
	17, 15, -1000, 436, -1000, -1000, 403, -1000, 321, 717,
	404, 44, -121, 198, 344, 4428, 4428, -1000, -1000, 544,
	544, 544, -130, 2186, 648, -1000, -1000, 638, -115, -125,
	198, 198, 6161, 6161, 6161, -1000, -1000, 118, -1000, 636,
	-1000, 391, -1000, 391, 391, 544, -119, -1000, 6161, -1000,
	-1000, -1000, -123, -1000, -127, -1000,
}
var yyPgo = [...]int{

	0, 990, 989, 988, 986, 985, 984, 983, 26, 548,
	982, 981, 980, 979, 978, 977, 973, 972, 971, 970,
	969, 968, 967, 966, 964, 181, 962, 961, 953, 57,
	952, 60, 950, 948, 937, 22, 53, 30, 21, 85,
	934, 24, 13, 7, 921, 920, 9, 918, 1187, 917,
	62, 914, 910, 45, 908, 907, 903, 3, 23, 902,
	900, 898, 897, 67, 755, 895, 892, 891, 888, 886,
	885, 44, 2, 14, 8, 18, 883, 46, 10, 882,
	47, 879, 877, 876, 875, 17, 874, 61, 872, 32,
	56, 871, 40, 6, 39, 112, 59, 869, 865, 864,
	326, 863, 149, 297, 862, 49, 861, 859, 25, 0,
	12, 16, 29, 857, 42, 878, 34, 5, 854, 852,
	177, 1, 28, 851, 20, 850, 849, 848, 847, 845,
	844, 186, 843, 841, 840, 839, 837, 835, 833, 832,
	19, 36, 15, 830, 48, 33, 51, 829, 828, 827,
	58, 41, 822, 820, 818, 816, 812, 37, 811, 55,
	35, 810, 809, 808, 54, 807, 11, 806, 805, 804,
	50, 803, 801, 52, 4, 800, 799, 797, 105, 172,
	796, 134,
}
var yyR1 = [...]int{

	0, 176, 177, 177, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 123,
	123, 175, 175, 174, 16, 16, 16, 16, 16, 16,
	171, 171, 172, 172, 173, 173, 146, 146, 145, 145,
	144, 144, 143, 143, 147, 147, 147, 19, 160, 162,
	162, 163, 163, 164, 164, 164, 164, 164, 139, 142,
	142, 135, 136, 137, 138, 138, 161, 161, 161, 157,
	114, 114, 125, 125, 125, 168, 168, 169, 169, 170,
	170, 170, 170, 170, 170, 170, 128, 128, 126, 126,
	126, 126, 126, 126, 126, 127, 127, 127, 127, 127,
	129, 129, 129, 129, 129, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 156,
	156, 131, 131, 150, 150, 151, 151, 151, 148, 148,
	149, 149, 152, 152, 132, 132, 132, 132, 132, 133,
	153, 140, 140, 140, 141, 141, 154, 154, 155, 155,
	134, 158, 158, 165, 165, 165, 165, 165, 159, 159,
	167, 167, 166, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 54, 54, 1, 20, 2, 3,
	4, 4, 5, 5, 5, 5, 6, 6, 6, 6,
	6, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 34, 34, 50,
	50, 51, 51, 52, 52, 53, 53, 53, 24, 22,
	23, 23, 23, 23, 180, 25, 26, 26, 27, 27,
	27, 31, 31, 31, 29, 29, 30, 30, 37, 37,
	36, 36, 38, 38, 38, 38, 113, 113, 113, 112,
	112, 40, 40, 41, 41, 42, 42, 43, 43, 43,
	55, 44, 44, 44, 44, 119, 119, 118, 118, 118,
	117, 117, 45, 45, 45, 45, 46, 46, 46, 46,
	47, 47, 49, 49, 48, 48, 56, 56, 56, 56,
	57, 57, 58, 58, 39, 39, 39, 39, 39, 39,
	39, 101, 101, 60, 60, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 70, 70, 70, 70, 70,
	70, 61, 61, 61, 61, 61, 61, 61, 35, 35,
	71, 71, 71, 77, 72, 72, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 68, 68, 68, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 67, 67, 67, 181, 181, 69, 69,
	69, 69, 32, 32, 32, 32, 32, 122, 122, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 81, 81, 33, 33, 79, 79, 80, 82,
	82, 78, 78, 78, 63, 63, 63, 63, 63, 63,
	63, 65, 65, 65, 83, 83, 84, 84, 85, 85,
	86, 86, 87, 88, 88, 88, 89, 89, 89, 89,
	90, 90, 90, 62, 62, 62, 62, 62, 62, 91,
	91, 91, 91, 92, 92, 73, 73, 75, 75, 74,
	76, 93, 93, 94, 95, 95, 96, 96, 98, 98,
	98, 97, 97, 97, 99, 99, 102, 102, 103, 103,
	100, 100, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 105, 105, 105, 106, 106, 107, 107, 107,
	110, 110, 111, 111, 115, 115, 116, 116, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 178,
	179, 120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 2, 9, 12, 8, 5, 7,
	0, 1, 1, 2, 4, 4, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 1,
	1, 3, 3, 4, 1, 1, 1, 3, 3, 3,
	1, 1, 3, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 1, 2, 1,
	2, 4, 7, 2, 3, 2, 2, 3, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 5, 4, 1, 3, 3, 3, 2, 2,
	3, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	3, 6, 5, 5, 3, 3, 5, 6, 3, 3,
	3, 5, 3, 3, 3, 3, 3, 0, 3, 0,
	2, 0, 1, 1, 1, 0, 2, 2, 4, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -176, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 214, 132,
	221, 224, 225, 228, 227, 232, 29, 131, 135, 136,
	-178, 7, 197, 56, -177, 238, -85, 14, -27, 5,
	-25, -180, -25, -25, -25, -25, -160, 56, 189, -107,
	121, 22, -110, 59, -109, 203, 138, 157, 68, 133,
	153, 147, 31, 171, 222, 208, 187, 148, 19, 229,
	170, 205, 38, 42, 160, 17, 207, 135, 41, 175,
	223, 185, 162, 151, 152, 137, 209, 123, 154, 232,
	233, 235, 234, 236, 237, -100, 125, 121, 122, 189,
	121, 121, 183, 114, 178, 216, -51, 218, 219, 185,
	121, 220, 181, 217, 180, 59, 35, 121, -115, 59,
	-109, -120, -120, 62, 207, -120, 226, -120, -120, 233,
	235, 234, 236, 237, -120, -120, -120, -120, -8, -89,
	16, 15, -11, -9, -178, 6, 24, 25, -31, 43,
	44, -26, -100, -48, -115, 10, -95, -123, -96, 230,
	229, -111, -98, -110, -108, 161, 158, 231, 74, 26,
	28, 173, 77, 144, 109, 166, 15, 78, 155, 108,
	186, 198, 114, 51, 190, 191, 188, 189, 178, 149,
	32, 9, 29, 131, 25, 102, 116, 81, 82, 216,
	134, 27, 132, 71, 18, 54, 10, 35, 12, 13,
	126, 125, 93, 122, 49, 7, 142, 143, 110, 30,
	90, 45, 23, 47, 91, 16, 192, 193, 34, 169,
	165, 202, 168, 141, 164, 104, 52, 39, 75, 69,
	150, 72, 55, 136, 73, 14, 50, 219, 128, 218,
	146, 92, 117, 197, 48, 6, 201, 33, 130, 140,
	46, 121, 179, 167, 139, 163, 80, 124, 70, 220,
	5, 22, 176, 8, 53, 127, 194, 195, 196, 37,
	159, 156, 217, 206, 79, 11, 177, 210, 215, -161,
	-157, -114, 59, -109, -103, 126, 122, -103, 121, -102,
	126, 59, -102, -48, -48, 182, 121, 189, -120, -120,
	179, -52, 186, 187, -120, -120, -120, 185, -120, -120,
	-120, -120, -120, -48, -120, 62, -120, -74, -178, -74,
	-120, -48, -120, -179, 58, -90, 18, 34, -39, -59,
	75, -64, 32, 27, -63, -60, -78, -76, -77, 109,
	98, 99, 106, 76, 110, -68, -66, -67, -69, 61,
	60, 62, 63, 64, 65, 69, 70, 71, -110, -115,
	-74, -178, 47, 48, 198, 199, 202, 200, 78, 37,
	188, 196, 195, 194, 192, 193, 190, 191, 126, 189,
	104, 197, 59, -109, -86, -87, -39, -85, -8, -25,
	39, -29, 25, 67, -49, 30, -48, 33, 111, -48,
	57, -95, 83, -97, -110, 61, 32, 33, 15, 15,
	58, 57, -125, -128, -130, -129, -126, -127, 155, 156,
	109, 159, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 133, 151, 152, 153, 154, 138, 139, 140,
	141, 142, 143, 144, 146, 147, 148, 149, 150, -115,
	75, 59, -48, -48, -54, -48, 27, 55, -115, -34,
	10, -48, -48, -50, 10, 10, -50, -120, -120, -120,
	-72, -39, -120, -105, 124, 26, 8, 93, 74, 73,
	90, 57, 17, -39, -61, 93, 75, 91, 92, 77,
	95, 94, 105, 98, 99, 100, 101, 102, 103, 104,
	96, 97, 108, 83, 84, 85, 86, 87, 88, 89,
	-101, -178, -77, -178, 112, 113, -64, -64, -64, -64,
	-64, -64, -178, 111, -8, -178, -178, -178, -178, -178,
	-178, -178, -81, -39, -178, -181, -178, -181, -181, -181,
	-181, -181, -181, -181, -178, -178, -178, -178, 57, -88,
	28, 29, -89, -179, -31, -65, -110, 62, 65, -30,
	46, -62, 33, 37, -8, -178, -48, -93, -94, -78,
	-110, -115, -116, -115, -108, 158, 161, -58, 11, -96,
	-39, -141, 108, 212, 213, -178, -162, -163, -164, -135,
	-136, -137, -138, -139, 68, 222, -146, 229, 223, 173,
	32, -157, -158, -165, 128, 22, -159, 19, 122, 23,
	-168, -169, -170, -152, -132, -153, -154, -155, -134, -133,
	69, 75, 32, 173, 128, 23, 22, 68, 55, -148,
	176, -131, 56, -131, -131, -131, -131, -140, 158, -140,
	-140, -140, 56, -131, -131, -131, -150, 56, -150, -150,
	-151, 56, -151, -171, -172, -173, -146, 27, 55, -104,
	117, 222, 198, 119, 116, 120, 115, 173, 158, 68,
	32, 14, 209, 59, 57, -48, -89, 184, -120, -120,
	-53, 91, 11, -48, -48, -120, 57, -179, -48, 41,
	-39, -39, -70, 69, 75, 70, 71, -39, -39, -64,
	-71, -74, -77, 66, 93, 91, 92, 77, -64, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -122, 59, 61, 59, -63, -63, -110,
	-37, 25, -36, -38, 100, -39, -115, -111, -116, -108,
	-179, -8, -36, -36, -39, -39, -36, -29, -79, -80,
	79, -110, -179, -36, -37, -36, -36, -87, -90, -99,
	18, 10, 37, 37, -36, -92, 55, -93, -73, -75,
	-74, -178, -8, -91, -110, -58, 57, 83, 111, -85,
	-39, 59, -178, -178, -114, -164, -145, 83, -145, -144,
	161, 158, -145, 56, 23, -159, 59, 59, -159, -170,
	69, 61, 62, 63, 69, 188, 23, 23, 61, 8,
	-149, 177, 62, -140, -140, -141, 33, -141, -141, -141,
	-156, 61, 62, 62, -173, 108, -144, -48, -120, -105,
	-106, 122, 23, 83, 124, 129, 129, 129, -48, -120,
	61, 61, -39, -53, -39, -120, 42, 69, 70, 71,
	-71, -64, -64, -64, -35, 134, 74, -179, -179, -36,
	57, -113, -112, 26, -110, 61, 111, -178, 111, -179,
	-179, -179, 57, 127, 26, -179, -36, -82, -80, 81,
	-39, -179, -179, -179, -179, -179, -48, -40, 10, 31,
	-92, 57, -179, -179, -179, 57, 111, -85, -94, -39,
	-111, -89, -114, -114, -179, 61, -142, 59, 61, -145,
	33, 62, -167, -166, -110, 59, 59, 188, 58, -141,
	-141, 59, 109, 58, 57, 57, 58, 57, -145, -145,
	-121, -178, -111, -48, -120, 59, 158, -160, 59, -157,
	-35, 74, -64, -64, -179, -38, -112, 100, -116, -37,
	-111, -124, 109, 155, 133, 153, 149, 170, 160, 175,
	151, 176, -122, -124, 203, -85, 82, -39, 80, -58,
	-41, -42, -43, -44, -55, -77, -178, -48, 23, -75,
	37, -8, -178, -110, -110, -89, -179, -179, -121, -142,
	58, 57, -131, 61, 62, 62, -143, 59, 32, -147,
	59, 109, 32, 33, -64, 111, -179, -179, -131, -131,
	-131, -151, -131, 143, -131, 143, -179, -179, -178, -33,
	201, -39, -83, 12, 57, -45, -46, -47, 45, 49,
	51, 46, 47, 48, 52, -119, 26, -41, -178, -118,
	-117, 26, -115, 61, 8, -73, -8, 111, -121, -178,
	206, -166, 58, 58, 59, 100, -140, 59, -64, -179,
	61, -84, 13, 15, -42, -43, -42, -43, 45, 45,
	45, 50, 45, 50, 45, -46, -115, -179, -56, 53,
	125, 54, -117, -93, -179, -110, -175, -174, 210, 20,
	-32, 93, 206, -39, -72, 55, 55, 45, 45, 122,
	122, 122, 57, -179, 59, 21, -179, 204, 52, 207,
	-39, -39, -178, -178, -178, -174, -121, 37, 42, 205,
	208, -57, -110, -57, -57, 93, 42, -179, 57, -179,
	-179, -74, 206, -110, 207, 208,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 458, 0, 244, 244, 244, 244, 244, 0,
	527, 510, 0, 0, 0, 231, 0, 0, 701, 701,
	0, 701, 0, 701, 701, 0, 701, 701, 701, 701,
	0, 33, 34, 699, 1, 3, 466, 0, 0, 248,
	251, 246, 510, 0, 0, 0, 44, 0, 508, 0,
	508, 528, 529, 530, 531, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 0, 511, 506, 0, 506,
	0, 0, 0, 0, 701, 701, 0, 701, 701, 701,
	0, 701, 701, 701, 701, 701, 232, 0, 239, 534,
	535, 198, 199, 701, 0, 202, 701, 204, 205, 0,
	0, 701, 0, 701, 240, 241, 242, 243, 27, 470,
	0, 0, 458, 29, 0, 244, 249, 250, 254, 252,
	253, 245, 0, 0, 304, 0, 37, 0, 494, 39,
	-2, 0, 0, 532, 533, -2, 549, 500, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 0, 0, 0,
	86, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 227, 0, 0, 214, 215,
	229, 0, 233, 234, 218, 219, 220, 229, 222, 223,
	224, 225, 226, 701, 200, 701, 203, 701, 0, 701,
	208, 522, 210, 28, 700, 23, 0, 0, 467, 314,
	0, 319, 321, 0, 356, 357, 358, 359, 360, 0,
	0, 0, 0, 0, 0, 382, 383, 384, 385, 444,
	445, 446, 447, 448, 449, 450, 323, 324, 441, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 432, 0,
	406, 406, 406, 406, 406, 406, 406, 406, 0, 0,
	0, 0, -2, -2, 459, 460, 463, 466, 27, 251,
	0, 256, 255, 247, 0, 0, 303, 0, 0, 312,
	0, 38, 0, 164, 501, 502, 503, 499, 0, 0,
	-2, 0, 95, 148, 93, 94, 141, 107, 141, 141,
	141, 141, 161, 161, 161, 161, 133, 134, 135, 136,
	137, 0, 120, 141, 141, 141, 124, 108, 109, 110,
	111, 112, 113, 114, 143, 143, 143, 145, 145, -2,
	0, 0, 67, 0, 191, 194, 507, 0, 193, 466,
	0, 701, 701, 235, 0, 0, 701, 238, 201, 206,
	0, 354, 207, 0, 523, 524, 471, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 341, 342, 343, 344, 345, 346, 347,
	320, 0, 334, 0, 0, 0, 376, 377, 378, 379,
	380, 0, 258, 0, 27, 0, 0, 0, 0, 0,
	0, 254, 0, 433, 0, 398, 0, 399, 400, 401,
	402, 403, 404, 405, 0, 258, 0, 0, 0, 462,
	464, 465, 470, 30, 254, 0, 451, 0, 0, 0,
	257, 483, 0, 0, -2, 0, 302, 312, 491, 0,
	441, 0, 305, 536, 537, 549, 550, 458, 0, 495,
	496, 497, 0, 0, 0, 0, 68, -2, 71, 73,
	74, 75, 76, 77, 58, 58, 0, 84, 85, 58,
	57, 87, 88, 0, 0, 0, 0, 672, 178, 179,
	89, 96, 97, 99, 100, 101, 102, 103, 104, 105,
	152, 0, 0, 160, 0, 167, 169, 0, 0, 150,
	149, 106, 0, 161, 161, 127, 128, 164, 0, 164,
	164, 164, 0, 121, 122, 123, 115, 0, 116, 117,
	118, 0, 119, 48, -2, 52, 0, 509, 0, 701,
	522, 0, 519, 0, 517, 0, 512, 513, 514, 515,
	516, 518, 520, 521, 0, 192, 701, 0, 212, 213,
	216, 0, 0, 230, 235, 221, 0, 489, 701, 0,
	315, 316, 318, 335, 0, 337, 339, 468, 469, 325,
	326, 350, 351, 352, 0, 0, 0, 0, 348, 330,
	0, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 375, 417, 418, 0, 373, 374, 381,
	0, 0, 259, 260, 262, 266, 0, 442, 0, -2,
	353, 27, 0, 0, 0, 0, 0, 0, 439, 436,
	0, 0, 407, 0, 0, 0, 0, 461, 24, 0,
	504, 505, 452, 453, 271, 31, 0, 483, 473, 485,
	487, 0, 27, 0, 479, 458, 0, 0, 0, 466,
	313, 165, 0, 0, 0, 72, 0, 59, 0, 58,
	60, 0, 0, 0, 173, 0, 175, 176, 0, 98,
	153, 154, 155, 156, 157, 158, 166, 168, 170, 0,
	92, 151, 0, 164, 164, 129, 0, 130, 131, 132,
	0, 139, 0, 0, 53, 58, 58, 702, 183, 0,
	701, 525, 526, 0, 0, 0, 0, 0, 195, 211,
	228, 236, 237, 217, 355, 209, 472, 336, 338, 340,
	327, 348, 331, 0, 328, 0, 0, 322, 386, 0,
	0, 263, 267, 0, 269, 270, 0, 258, 0, -2,
	389, 390, 0, 0, 0, 0, 458, 0, 437, 0,
	0, 397, 408, 409, 410, 411, 25, 312, 0, 0,
	32, 0, 488, -2, 0, 0, 0, 466, 492, 493,
	442, 36, 0, 0, 702, 81, 82, 79, 80, 0,
	61, 78, 0, 180, 141, 174, 177, 159, 142, 125,
	126, 162, 163, 138, 0, 0, 146, 0, 0, 0,
	49, 703, 704, 184, 185, 186, 0, 188, 189, 190,
	329, 0, 349, 332, 387, 261, 268, 264, 0, 0,
	443, 0, 141, 141, 422, 141, 145, 425, 141, 427,
	141, 430, 0, 0, 0, 434, 396, 440, 0, 454,
	272, 273, 275, 276, 277, 285, 0, 287, 0, 486,
	0, -2, 0, 481, 480, 35, 702, 0, 47, 83,
	171, 0, 182, 140, 0, 0, 54, 62, 63, 55,
	64, 65, 66, 0, 333, 0, 388, 391, 419, 161,
	423, 424, 426, 428, 429, 431, 393, 392, 0, 0,
	0, 438, 456, 0, 0, 0, 0, 0, 292, 0,
	0, 295, 0, 0, 0, 0, 286, 0, 0, 306,
	288, 0, 290, 291, 0, 476, 27, 0, 45, 0,
	0, 181, 144, 147, 187, 265, 420, 421, 412, 395,
	435, 26, 0, 0, 274, 281, 0, 284, 293, 294,
	296, 0, 298, 0, 300, 301, 278, 279, 280, 0,
	0, 0, 289, 484, -2, 482, 0, 41, 0, 0,
	0, 0, 0, 457, 455, 0, 0, 297, 299, 0,
	0, 0, 0, 702, 0, 172, 394, 0, 0, 0,
	282, 283, 0, 0, 0, 42, 46, 0, 413, 0,
	416, 0, 310, 0, 0, 0, 414, 307, 0, 308,
	309, 43, 0, 311, 0, 415,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 238,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:877
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:883
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:913
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:921
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:925
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:932
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:938
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:942
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:948
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:952
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:958
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:969
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:981
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:985
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:991
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:997
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1003
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1007
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1013
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1023
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1027
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1033
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1045
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1058
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1067
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1080
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1088
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1094
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1098
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1104
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1108
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1114
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1121
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1129
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1131
		{
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1134
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1136
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1140
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.str = "character set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1150
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1154
		{
			yyVAL.str = "default"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = "default"
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1174
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1185
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1212
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1216
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1222
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1226
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1232
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1239
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1269
		{
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1273
		{
			// Normal str as a identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1285
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1291
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1297
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1303
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1307
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1318
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1322
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1328
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1341
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1345
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1351
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1360
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1364
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1370
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1374
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1380
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1387
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1401
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1415
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1422
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1431
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1436
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1484
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1496
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1504
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1508
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1570
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1578
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1584
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1589
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1594
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1598
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1603
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1607
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1615
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1619
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1625
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1633
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1637
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1642
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1646
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1653
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1657
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1663
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1667
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1671
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1675
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1679
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1685
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1691
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1700
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1732
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1748
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1752
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1758
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1762
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1766
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1770
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1774
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1780
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1784
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1790
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1794
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1806
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1810
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1815
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1820
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1824
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1828
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1832
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1836
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1842
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1850
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1855
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1869
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1881
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.statement = &Xa{}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &Explain{}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1899
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1903
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1909
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1913
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1927
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1939
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &Radon{Action: CleanupStr}
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1949
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1957
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1961
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1969
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1973
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1981
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1985
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1989
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1993
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1997
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2001
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2005
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2009
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2014
		{
			yyVAL.str = ""
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2023
		{
			yyVAL.tableName = TableName{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2027
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2033
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = "full "
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2043
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2053
		{
			yyVAL.showFilter = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2057
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2061
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2067
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2073
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2079
		{
			yyVAL.statement = &OtherRead{}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2083
		{
			yyVAL.statement = &OtherRead{}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2087
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2091
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2096
		{
			setAllowComments(yylex, true)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2105
		{
			yyVAL.bytes2 = nil
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2109
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = UnionStr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = UnionAllStr
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = UnionDistinctStr
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = SQLCacheStr
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2141
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2145
		{
			yyVAL.str = DistinctStr
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2150
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2154
		{
			yyVAL.str = StraightJoinHint
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2159
		{
			yyVAL.selectExprs = nil
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2169
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2173
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2179
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2183
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2187
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2196
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2200
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2211
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2216
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2220
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2226
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2240
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2254
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2267
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2271
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2275
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2279
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2284
		{
			yyVAL.empty = struct{}{}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2288
		{
			yyVAL.empty = struct{}{}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2293
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2297
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2301
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.str = JoinStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = JoinStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = JoinStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.str = StraightJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.str = LeftJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2336
		{
			yyVAL.str = LeftJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.str = RightJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.str = RightJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = NaturalJoinStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2354
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2374
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2378
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2383
		{
			yyVAL.indexHints = nil
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2387
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2391
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2395
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2401
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2405
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2420
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2424
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2428
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2432
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2436
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2440
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2450
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2454
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2460
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2464
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2482
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2486
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2490
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2494
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2498
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2502
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2506
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2512
		{
			yyVAL.str = IsNullStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2516
		{
			yyVAL.str = IsNotNullStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2520
		{
			yyVAL.str = IsTrueStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2524
		{
			yyVAL.str = IsNotTrueStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2528
		{
			yyVAL.str = IsFalseStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2532
		{
			yyVAL.str = IsNotFalseStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2538
		{
			yyVAL.str = EqualStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2542
		{
			yyVAL.str = LessThanStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2546
		{
			yyVAL.str = GreaterThanStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2550
		{
			yyVAL.str = LessEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2554
		{
			yyVAL.str = GreaterEqualStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2558
		{
			yyVAL.str = NotEqualStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2562
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = nil
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2581
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2591
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2601
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2643
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2647
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2663
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2671
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2679
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2687
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2691
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2699
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2717
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2721
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2757
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2761
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2765
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2769
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2773
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 394:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2777
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2781
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2785
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2789
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2803
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2864
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2868
		{
			yyVAL.str = BooleanModeStr
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2872
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2876
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2880
		{
			yyVAL.str = QueryExpansionStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2886
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2904
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2916
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2938
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2942
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2960
		{
			yyVAL.str = string("")
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2964
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2970
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2974
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2980
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2989
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2999
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3003
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3009
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3013
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3017
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3021
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3025
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3029
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3033
		{
			yyVAL.expr = &NullVal{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3039
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3052
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3057
		{
			yyVAL.exprs = nil
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3061
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3066
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3070
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3075
		{
			yyVAL.orderBy = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3079
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3085
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3089
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3095
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3100
		{
			yyVAL.str = AscScr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.str = AscScr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.str = DescScr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3113
		{
			yyVAL.limit = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3117
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3121
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3125
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3130
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3134
		{
			yyVAL.str = ForUpdateStr
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3138
		{
			yyVAL.str = ShareModeStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3151
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3164
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3168
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3172
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3187
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3191
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3196
		{
			yyVAL.updateExprs = nil
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3200
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3206
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3210
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3216
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3220
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3226
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3242
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3246
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3252
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3262
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3268
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3272
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3279
		{
			yyVAL.bytes = []byte("charset")
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3286
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.expr = &Default{}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3303
		{
			yyVAL.byt = 0
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3307
		{
			yyVAL.byt = 1
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3312
		{
			yyVAL.byt = 0
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3316
		{
			yyVAL.byt = 1
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3321
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3325
		{
			yyVAL.str = IgnoreStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3331
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3335
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3339
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3351
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3355
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3363
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3367
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3372
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3376
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3380
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3386
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3390
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3395
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3403
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3409
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3413
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3437
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3625
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3634
		{
			decNesting(yylex)
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3639
		{
			forceEOF(yylex)
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3644
		{
			forceEOF(yylex)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3648
		{
			forceEOF(yylex)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3652
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
