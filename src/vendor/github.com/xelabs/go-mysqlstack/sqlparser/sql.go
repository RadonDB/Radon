//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                 int
	empty               struct{}
	statement           Statement
	selStmt             SelectStatement
	ddl                 *DDL
	ins                 *Insert
	byt                 byte
	bytes               []byte
	bytes2              [][]byte
	str                 string
	strs                []string
	selectExprs         SelectExprs
	selectExpr          SelectExpr
	columns             Columns
	colName             *ColName
	tableExprs          TableExprs
	tableExpr           TableExpr
	tableName           TableName
	tableNames          TableNames
	indexHints          *IndexHints
	expr                Expr
	exprs               Exprs
	boolVal             BoolVal
	colTuple            ColTuple
	values              Values
	valTuple            ValTuple
	subquery            *Subquery
	whens               []*When
	when                *When
	orderBy             OrderBy
	order               *Order
	limit               *Limit
	updateExprs         UpdateExprs
	updateExpr          *UpdateExpr
	setExprs            SetExprs
	setExpr             *SetExpr
	colIdent            ColIdent
	colIdents           []ColIdent
	tableIdent          TableIdent
	convertType         *ConvertType
	aliasedTableName    *AliasedTableExpr
	TableSpec           *TableSpec
	TableOptions        TableOptions
	columnType          ColumnType
	colPrimaryKeyOpt    ColumnPrimaryKeyOption
	colUniqueKeyOpt     ColumnUniqueKeyOption
	optVal              *SQLVal
	LengthScaleOption   LengthScaleOption
	columnDefinition    *ColumnDefinition
	indexDefinition     *IndexDefinition
	indexInfo           *IndexInfo
	indexColumn         *IndexColumn
	indexColumns        []*IndexColumn
	columnOptionListOpt ColumnOptionListOpt
	columnOptionList    ColumnOptionList
	columnOption        *ColumnOption
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const COLUMNS = 57513
const CURRENT_TIMESTAMP = 57514
const DATABASE = 57515
const CURRENT_DATE = 57516
const CURRENT_TIME = 57517
const LOCALTIME = 57518
const LOCALTIMESTAMP = 57519
const UTC_DATE = 57520
const UTC_TIME = 57521
const UTC_TIMESTAMP = 57522
const REPLACE = 57523
const CONVERT = 57524
const CAST = 57525
const GROUP_CONCAT = 57526
const SEPARATOR = 57527
const MATCH = 57528
const AGAINST = 57529
const BOOLEAN = 57530
const LANGUAGE = 57531
const WITH = 57532
const QUERY = 57533
const EXPANSION = 57534
const UNUSED = 57535
const PARTITION = 57536
const PARTITIONS = 57537
const HASH = 57538
const XA = 57539
const DISTRIBUTED = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556
const RADON = 57557
const ATTACH = 57558
const ATTACHLIST = 57559
const DETACH = 57560
const RESHARD = 57561

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 292,
	83, 611,
	-2, 40,
	-1, 297,
	83, 506,
	-2, 457,
	-1, 399,
	111, 493,
	-2, 489,
	-1, 400,
	111, 494,
	-2, 490,
	-1, 582,
	5, 27,
	-2, 433,
	-1, 737,
	111, 496,
	-2, 492,
	-1, 856,
	5, 28,
	-2, 312,
	-1, 880,
	5, 28,
	-2, 434,
	-1, 962,
	5, 27,
	-2, 436,
	-1, 1061,
	5, 28,
	-2, 437,
}

const yyPrivate = 57344

const yyLast = 7979

var yyAct = [...]int{

	400, 585, 488, 1090, 353, 1017, 355, 733, 1003, 953,
	348, 896, 766, 952, 653, 932, 1014, 375, 911, 721,
	841, 56, 593, 66, 296, 542, 3, 736, 271, 586,
	763, 74, 767, 728, 747, 698, 157, 615, 253, 731,
	640, 491, 609, 308, 408, 849, 402, 342, 72, 477,
	288, 649, 60, 55, 597, 351, 290, 670, 259, 971,
	156, 730, 603, 305, 253, 970, 74, 306, 599, 293,
	280, 1102, 378, 50, 1089, 669, 270, 256, 62, 63,
	64, 65, 377, 295, 262, 264, 263, 265, 1101, 1081,
	1099, 1027, 1088, 945, 1080, 997, 553, 793, 794, 795,
	141, 142, 672, 325, 900, 796, 682, 329, 323, 803,
	633, 668, 783, 972, 1034, 917, 641, 146, 629, 628,
	315, 992, 826, 50, 990, 825, 824, 316, 625, 311,
	140, 276, 1066, 509, 508, 518, 519, 511, 512, 513,
	514, 515, 516, 517, 510, 253, 253, 520, 823, 610,
	493, 631, 608, 612, 933, 157, 1076, 612, 665, 663,
	659, 612, 662, 664, 630, 623, 1075, 1056, 1058, 143,
	859, 624, 326, 1074, 340, 312, 1024, 821, 935, 156,
	493, 314, 250, 145, 144, 982, 497, 496, 883, 309,
	532, 533, 855, 788, 937, 634, 941, 853, 936, 776,
	934, 667, 541, 498, 415, 939, 513, 514, 515, 516,
	517, 510, 904, 641, 520, 938, 666, 598, 520, 495,
	940, 942, 498, 257, 627, 797, 1026, 509, 508, 518,
	519, 511, 512, 513, 514, 515, 516, 517, 510, 1057,
	860, 520, 661, 893, 500, 861, 1067, 1079, 492, 822,
	784, 253, 611, 671, 510, 496, 611, 520, 607, 705,
	611, 775, 905, 419, 318, 660, 253, 842, 947, 626,
	748, 498, 330, 703, 704, 702, 820, 748, 492, 866,
	345, 403, 497, 496, 499, 253, 568, 569, 253, 949,
	74, 467, 497, 496, 310, 74, 404, 792, 53, 498,
	497, 496, 405, 497, 496, 410, 979, 295, 701, 498,
	139, 253, 421, 978, 253, 253, 253, 498, 973, 253,
	498, 815, 722, 253, 723, 253, 253, 253, 814, 804,
	406, 497, 496, 333, 1037, 336, 336, 691, 693, 694,
	418, 977, 1063, 692, 489, 335, 337, 830, 498, 50,
	834, 835, 836, 813, 800, 501, 1031, 530, 309, 1096,
	341, 1001, 341, 975, 974, 313, 919, 534, 535, 536,
	537, 538, 539, 284, 916, 922, 847, 341, 910, 909,
	484, 1005, 1008, 1009, 1010, 1006, 489, 1007, 1011, 907,
	906, 1071, 899, 551, 898, 509, 508, 518, 519, 511,
	512, 513, 514, 515, 516, 517, 510, 894, 74, 520,
	889, 882, 341, 253, 789, 781, 253, 779, 74, 587,
	724, 468, 529, 531, 317, 574, 341, 596, 684, 341,
	428, 427, 588, 570, 22, 295, 1030, 582, 1029, 901,
	592, 684, 764, 590, 774, 24, 774, 875, 540, 878,
	1001, 543, 544, 545, 546, 547, 548, 549, 57, 552,
	554, 554, 554, 554, 554, 554, 554, 554, 562, 563,
	564, 565, 604, 908, 595, 253, 961, 572, 847, 253,
	655, 642, 643, 644, 583, 555, 556, 557, 558, 559,
	560, 561, 253, 275, 847, 53, 594, 673, 417, 600,
	676, 847, 566, 53, 688, 689, 24, 695, 696, 635,
	700, 681, 654, 697, 651, 652, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 511, 512, 513, 514, 515, 516, 517, 510, 1070,
	74, 520, 774, 367, 366, 368, 369, 370, 371, 277,
	24, 489, 372, 74, 742, 743, 53, 727, 67, 295,
	785, 1005, 1008, 1009, 1010, 1006, 737, 1007, 1011, 739,
	749, 650, 578, 645, 403, 764, 657, 580, 474, 376,
	571, 581, 765, 1073, 74, 587, 699, 1049, 725, 726,
	1047, 1072, 1050, 1046, 745, 1048, 1045, 752, 588, 53,
	53, 772, 778, 1094, 50, 1087, 740, 741, 773, 770,
	744, 735, 833, 755, 687, 777, 543, 251, 756, 1051,
	761, 1009, 1010, 409, 751, 760, 753, 754, 343, 281,
	282, 636, 637, 638, 639, 980, 808, 407, 424, 762,
	414, 892, 876, 286, 344, 656, 646, 647, 648, 473,
	1013, 787, 791, 790, 769, 409, 50, 959, 253, 843,
	278, 279, 799, 685, 768, 798, 786, 1077, 1064, 272,
	1040, 426, 780, 425, 253, 273, 57, 805, 806, 509,
	508, 518, 519, 511, 512, 513, 514, 515, 516, 517,
	510, 1039, 831, 520, 759, 807, 594, 809, 810, 811,
	1000, 818, 758, 478, 483, 324, 322, 287, 1021, 700,
	801, 494, 59, 61, 838, 839, 840, 738, 54, 1,
	614, 613, 895, 606, 286, 286, 601, 307, 605, 750,
	812, 620, 619, 618, 74, 616, 802, 632, 837, 509,
	508, 518, 519, 511, 512, 513, 514, 515, 516, 517,
	510, 851, 969, 520, 782, 602, 867, 891, 253, 508,
	518, 519, 511, 512, 513, 514, 515, 516, 517, 510,
	621, 622, 520, 617, 431, 432, 430, 489, 434, 587,
	433, 865, 429, 886, 289, 699, 74, 1012, 1016, 848,
	69, 846, 588, 819, 295, 884, 877, 658, 528, 757,
	294, 737, 420, 897, 885, 771, 888, 863, 854, 567,
	401, 1038, 999, 864, 550, 746, 354, 74, 690, 253,
	518, 519, 511, 512, 513, 514, 515, 516, 517, 510,
	286, 365, 520, 362, 295, 364, 363, 573, 579, 502,
	352, 346, 1055, 955, 471, 286, 887, 411, 918, 1004,
	1002, 74, 954, 923, 924, 874, 74, 482, 996, 921,
	902, 903, 1065, 577, 286, 25, 58, 286, 851, 283,
	920, 295, 14, 295, 948, 21, 253, 944, 737, 15,
	943, 929, 956, 74, 74, 946, 913, 926, 930, 912,
	466, 74, 951, 286, 286, 286, 927, 950, 475, 844,
	964, 965, 286, 845, 286, 286, 286, 962, 295, 968,
	13, 960, 12, 966, 856, 857, 858, 29, 10, 862,
	9, 8, 7, 735, 868, 931, 869, 870, 871, 872,
	6, 5, 4, 981, 274, 23, 2, 20, 19, 18,
	17, 16, 11, 0, 879, 880, 881, 0, 957, 0,
	0, 769, 988, 0, 963, 0, 890, 998, 253, 253,
	913, 768, 0, 912, 956, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 1022, 0, 74, 0, 0, 0,
	0, 0, 0, 74, 0, 295, 1025, 1028, 0, 1023,
	0, 0, 286, 897, 589, 591, 0, 0, 0, 0,
	295, 0, 253, 253, 253, 253, 1035, 0, 956, 956,
	956, 956, 1042, 253, 1044, 1041, 253, 1043, 995, 253,
	1052, 925, 956, 1060, 1059, 74, 587, 1033, 0, 0,
	1015, 0, 0, 0, 769, 0, 50, 913, 0, 588,
	912, 739, 1062, 1069, 768, 0, 0, 1068, 489, 0,
	0, 958, 931, 0, 286, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 957, 957, 957, 957, 1082, 1083,
	0, 0, 0, 0, 0, 74, 74, 74, 1015, 1092,
	1093, 0, 0, 976, 0, 0, 0, 74, 0, 0,
	0, 0, 1091, 1091, 1091, 983, 0, 984, 0, 0,
	0, 0, 0, 0, 1100, 285, 0, 0, 993, 994,
	734, 591, 0, 0, 734, 734, 0, 0, 734, 985,
	986, 0, 987, 0, 254, 989, 0, 991, 0, 0,
	0, 0, 734, 734, 734, 734, 0, 1084, 1085, 1086,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1036, 0, 0, 255, 0, 258, 0, 260, 261,
	0, 266, 267, 268, 269, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 0, 319, 320, 1061, 0,
	0, 0, 0, 0, 24, 51, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 28, 0, 0, 36, 0, 0, 286, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 286, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 0, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 321, 0, 0, 0, 0, 327, 328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 734,
	0, 0, 30, 31, 32, 0, 34, 339, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 35, 47,
	39, 0, 0, 48, 49, 33, 413, 286, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 589, 0, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 469, 470, 472, 0, 0,
	0, 0, 0, 0, 476, 0, 479, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 0, 0, 334, 0, 52, 0, 286, 338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 41, 42, 0, 44, 43, 734, 0, 0,
	45, 0, 0, 591, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 485, 0, 486, 449,
	487, 0, 490, 0, 454, 455, 456, 457, 458, 459,
	460, 0, 461, 462, 463, 464, 465, 450, 451, 452,
	453, 435, 436, 0, 0, 438, 0, 0, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 0, 286, 1019, 504,
	0, 507, 0, 686, 0, 0, 0, 521, 522, 523,
	524, 525, 526, 527, 0, 505, 506, 503, 509, 508,
	518, 519, 511, 512, 513, 514, 515, 516, 517, 510,
	0, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 286, 286, 286, 0, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 286, 0, 0, 1019, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 106, 0,
	91, 675, 0, 0, 678, 679, 680, 0, 350, 683,
	0, 0, 86, 349, 0, 0, 0, 0, 386, 97,
	0, 0, 112, 103, 0, 0, 0, 0, 379, 380,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	399, 367, 366, 368, 369, 370, 371, 0, 0, 81,
	372, 373, 374, 0, 0, 0, 347, 360, 0, 385,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	358, 732, 0, 0, 0, 397, 0, 359, 0, 0,
	356, 361, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 127, 0, 0, 395, 0, 108,
	0, 0, 0, 0, 82, 827, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 0,
	125, 104, 0, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 0, 0, 113, 123, 133, 0,
	0, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	387, 396, 393, 394, 391, 392, 390, 389, 388, 398,
	381, 382, 384, 817, 383, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 828, 0, 88, 115, 0, 829, 0, 0, 0,
	92, 832, 0, 134, 135, 137, 136, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 238,
	229, 200, 240, 177, 192, 249, 193, 194, 221, 164,
	208, 106, 190, 91, 0, 0, 239, 205, 0, 180,
	159, 187, 160, 178, 202, 86, 176, 231, 211, 148,
	914, 246, 97, 215, 0, 112, 103, 0, 0, 204,
	233, 206, 228, 199, 222, 170, 214, 241, 191, 219,
	0, 0, 0, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 217, 236, 189, 218, 220, 158, 216,
	0, 162, 165, 248, 234, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 203, 207, 225, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 213, 0,
	0, 0, 168, 163, 201, 0, 0, 0, 150, 0,
	182, 226, 0, 0, 915, 154, 198, 127, 235, 196,
	195, 242, 108, 0, 232, 179, 188, 82, 186, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 166, 125, 104, 167, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 161, 0, 113,
	123, 133, 175, 147, 128, 129, 130, 151, 152, 0,
	153, 0, 149, 173, 174, 171, 172, 209, 210, 243,
	244, 245, 227, 169, 0, 0, 230, 212, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 0, 0,
	185, 247, 224, 223, 237, 0, 88, 115, 0, 0,
	0, 0, 0, 92, 0, 0, 134, 135, 137, 136,
	138, 238, 229, 200, 240, 177, 192, 249, 193, 194,
	221, 164, 208, 106, 190, 91, 0, 0, 239, 205,
	0, 180, 159, 187, 160, 178, 202, 86, 176, 231,
	211, 302, 0, 246, 97, 215, 0, 112, 103, 0,
	0, 204, 233, 206, 228, 199, 222, 170, 214, 241,
	191, 219, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 217, 236, 189, 218, 220,
	158, 216, 0, 162, 165, 248, 234, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 203, 207, 225, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	213, 0, 0, 0, 168, 163, 201, 0, 0, 0,
	301, 0, 182, 226, 0, 0, 0, 303, 198, 127,
	235, 196, 195, 242, 108, 0, 232, 179, 188, 82,
	186, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 298, 125, 104, 297, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 161,
	0, 113, 123, 133, 175, 304, 128, 129, 130, 0,
	0, 0, 0, 0, 300, 173, 174, 171, 172, 209,
	210, 243, 244, 245, 227, 169, 0, 0, 230, 212,
	75, 0, 96, 131, 109, 89, 124, 0, 0, 0,
	0, 0, 185, 247, 224, 223, 237, 0, 88, 115,
	0, 0, 0, 0, 0, 292, 291, 299, 134, 135,
	137, 136, 138, 238, 229, 200, 240, 177, 192, 249,
	193, 194, 221, 164, 208, 106, 190, 91, 0, 0,
	239, 205, 0, 180, 159, 187, 160, 178, 202, 86,
	176, 231, 211, 302, 0, 246, 97, 215, 0, 112,
	103, 0, 0, 204, 233, 206, 228, 199, 222, 170,
	214, 241, 191, 219, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 217, 236, 189,
	218, 220, 158, 216, 0, 162, 165, 248, 234, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 203, 207,
	225, 197, 0, 0, 0, 0, 0, 0, 1032, 0,
	181, 0, 213, 0, 0, 0, 168, 163, 201, 0,
	0, 0, 301, 0, 182, 226, 0, 0, 0, 303,
	198, 127, 235, 196, 195, 242, 108, 0, 232, 179,
	188, 82, 186, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 166, 125, 104, 167,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 161, 0, 113, 123, 133, 175, 304, 128, 129,
	130, 0, 0, 0, 0, 0, 300, 173, 174, 171,
	172, 209, 210, 243, 244, 245, 227, 169, 0, 0,
	230, 212, 75, 0, 96, 131, 109, 89, 124, 0,
	0, 0, 0, 0, 185, 247, 224, 223, 237, 0,
	88, 115, 0, 0, 0, 0, 0, 92, 0, 0,
	134, 135, 137, 136, 138, 238, 229, 200, 240, 177,
	192, 249, 193, 194, 221, 164, 208, 106, 190, 91,
	0, 0, 239, 205, 0, 180, 159, 187, 160, 178,
	202, 86, 176, 231, 211, 302, 0, 246, 97, 215,
	0, 112, 103, 0, 0, 204, 233, 206, 228, 199,
	222, 170, 214, 241, 191, 219, 53, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 217,
	236, 189, 218, 220, 158, 216, 0, 162, 165, 248,
	234, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	203, 207, 225, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 213, 0, 0, 0, 168, 163,
	201, 0, 0, 0, 301, 0, 182, 226, 0, 0,
	0, 303, 198, 127, 235, 196, 195, 242, 108, 0,
	232, 179, 188, 82, 186, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 166, 125,
	104, 167, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 161, 0, 113, 123, 133, 175, 304,
	128, 129, 130, 0, 0, 0, 0, 0, 300, 173,
	174, 171, 172, 209, 210, 243, 244, 245, 227, 169,
	0, 0, 230, 212, 75, 0, 96, 131, 109, 89,
	124, 0, 0, 0, 0, 0, 185, 247, 224, 223,
	237, 0, 88, 115, 0, 0, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 138, 238, 229, 200,
	240, 177, 192, 249, 193, 194, 221, 164, 208, 106,
	190, 91, 0, 0, 239, 205, 0, 180, 159, 187,
	160, 178, 202, 86, 176, 231, 211, 302, 0, 246,
	97, 215, 0, 112, 103, 0, 0, 204, 233, 206,
	228, 199, 222, 170, 214, 241, 191, 219, 0, 0,
	0, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 217, 236, 189, 218, 220, 158, 216, 0, 162,
	165, 248, 234, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 203, 207, 225, 197, 0, 0, 0, 0,
	0, 0, 928, 0, 181, 0, 213, 0, 0, 0,
	168, 163, 201, 0, 0, 0, 301, 0, 182, 226,
	0, 0, 0, 303, 198, 127, 235, 196, 195, 242,
	108, 0, 232, 179, 188, 82, 186, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	166, 125, 104, 167, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 161, 0, 113, 123, 133,
	175, 304, 128, 129, 130, 0, 0, 0, 0, 0,
	300, 173, 174, 171, 172, 209, 210, 243, 244, 245,
	227, 169, 0, 0, 230, 212, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 185, 247,
	224, 223, 237, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 238,
	229, 200, 240, 177, 192, 249, 193, 194, 221, 164,
	208, 106, 190, 91, 0, 0, 239, 205, 0, 180,
	159, 187, 160, 178, 202, 86, 176, 231, 211, 302,
	0, 246, 97, 215, 0, 112, 103, 0, 0, 204,
	233, 206, 228, 199, 222, 170, 214, 241, 191, 219,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 217, 236, 189, 218, 220, 158, 216,
	0, 162, 165, 248, 234, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 203, 207, 225, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 213, 0,
	0, 0, 168, 163, 201, 0, 0, 0, 301, 0,
	182, 226, 0, 0, 0, 303, 198, 127, 235, 196,
	195, 242, 108, 0, 232, 179, 188, 82, 186, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 298, 125, 104, 297, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 161, 0, 113,
	123, 133, 175, 304, 128, 129, 130, 0, 0, 0,
	0, 0, 300, 173, 174, 171, 172, 209, 210, 243,
	244, 245, 227, 169, 0, 0, 230, 212, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 0, 0,
	185, 247, 224, 223, 237, 0, 88, 115, 0, 0,
	0, 0, 0, 92, 0, 299, 134, 135, 137, 136,
	138, 238, 229, 200, 240, 177, 192, 249, 193, 194,
	221, 164, 208, 106, 190, 91, 0, 0, 239, 205,
	0, 180, 159, 187, 160, 178, 202, 86, 176, 231,
	211, 302, 0, 246, 97, 215, 0, 112, 103, 0,
	0, 204, 233, 206, 228, 199, 222, 170, 214, 241,
	191, 219, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 217, 236, 189, 218, 220,
	158, 216, 0, 162, 165, 248, 234, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 203, 207, 225, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 181, 0,
	213, 0, 0, 0, 168, 163, 201, 0, 0, 0,
	301, 0, 182, 226, 0, 0, 0, 303, 198, 127,
	235, 196, 195, 242, 108, 0, 232, 179, 188, 82,
	186, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 166, 125, 104, 167, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 161,
	0, 113, 123, 133, 175, 304, 128, 129, 130, 0,
	0, 0, 0, 0, 300, 173, 174, 171, 172, 209,
	210, 243, 244, 245, 227, 169, 0, 0, 230, 212,
	75, 0, 96, 131, 109, 89, 124, 0, 0, 0,
	0, 0, 185, 247, 224, 223, 237, 0, 88, 115,
	0, 0, 0, 0, 0, 92, 0, 0, 134, 135,
	137, 136, 138, 238, 229, 200, 240, 177, 192, 249,
	193, 194, 221, 164, 208, 106, 190, 91, 0, 0,
	239, 205, 0, 180, 159, 187, 160, 178, 202, 86,
	176, 231, 211, 302, 0, 246, 97, 215, 0, 112,
	103, 0, 0, 204, 233, 206, 228, 199, 222, 170,
	214, 241, 191, 219, 0, 0, 0, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 217, 236, 189,
	218, 220, 158, 216, 0, 162, 165, 248, 234, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 203, 207,
	225, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	181, 0, 213, 0, 0, 0, 168, 163, 201, 0,
	0, 0, 301, 0, 182, 226, 0, 0, 0, 303,
	198, 127, 235, 196, 195, 242, 108, 0, 232, 179,
	188, 82, 186, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 166, 125, 104, 167,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 161, 0, 113, 123, 133, 175, 304, 128, 129,
	130, 0, 0, 0, 0, 0, 300, 173, 174, 171,
	172, 209, 210, 243, 244, 245, 227, 169, 0, 0,
	230, 212, 75, 0, 96, 131, 109, 89, 124, 0,
	0, 0, 0, 0, 185, 247, 224, 223, 237, 0,
	88, 115, 0, 0, 0, 0, 0, 92, 0, 0,
	134, 135, 137, 136, 138, 238, 229, 200, 240, 177,
	192, 249, 193, 194, 221, 164, 208, 106, 190, 91,
	0, 0, 239, 205, 0, 180, 159, 187, 160, 178,
	202, 86, 176, 231, 211, 302, 0, 246, 97, 215,
	0, 112, 103, 0, 0, 204, 233, 206, 228, 199,
	222, 170, 214, 241, 191, 219, 0, 0, 0, 252,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 217,
	236, 189, 218, 220, 158, 216, 0, 162, 165, 248,
	234, 183, 184, 0, 0, 0, 0, 0, 0, 0,
	203, 207, 225, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 213, 0, 0, 0, 168, 163,
	201, 0, 0, 0, 301, 0, 182, 226, 0, 0,
	0, 303, 198, 127, 235, 196, 195, 242, 108, 0,
	232, 179, 188, 82, 186, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 166, 125,
	104, 167, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 161, 0, 113, 123, 133, 175, 304,
	128, 129, 130, 0, 0, 0, 0, 0, 300, 173,
	174, 171, 172, 209, 210, 243, 244, 245, 227, 169,
	0, 0, 230, 212, 75, 0, 96, 131, 109, 89,
	124, 0, 0, 0, 0, 0, 185, 247, 224, 223,
	237, 0, 88, 115, 0, 0, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 138, 238, 229, 200,
	240, 177, 192, 249, 193, 194, 221, 164, 208, 106,
	190, 91, 0, 0, 239, 205, 0, 180, 159, 187,
	160, 178, 202, 86, 176, 231, 211, 302, 0, 246,
	97, 215, 0, 112, 103, 0, 0, 204, 233, 206,
	228, 199, 222, 170, 214, 241, 191, 219, 0, 0,
	0, 155, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 217, 236, 189, 218, 220, 158, 216, 0, 162,
	165, 248, 234, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 203, 207, 225, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 213, 0, 0, 0,
	168, 163, 201, 0, 0, 0, 301, 0, 182, 226,
	0, 0, 0, 303, 198, 127, 235, 196, 195, 242,
	108, 0, 232, 179, 188, 82, 186, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	166, 125, 104, 167, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 161, 0, 113, 123, 133,
	175, 304, 128, 129, 130, 0, 0, 0, 0, 0,
	300, 173, 174, 171, 172, 209, 210, 243, 244, 245,
	227, 169, 0, 0, 230, 212, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 185, 247,
	224, 223, 237, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 106,
	0, 91, 0, 0, 0, 0, 0, 729, 0, 350,
	0, 0, 0, 86, 349, 0, 0, 0, 0, 386,
	97, 0, 0, 112, 103, 0, 0, 0, 0, 379,
	380, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 399, 367, 366, 368, 369, 370, 371, 0, 0,
	81, 372, 373, 374, 0, 0, 0, 347, 360, 0,
	385, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 358, 732, 0, 0, 0, 397, 0, 359, 0,
	0, 356, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 395, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 387, 396, 393, 394, 391, 392, 390, 389, 388,
	398, 381, 382, 384, 0, 383, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 115, 0, 0, 0, 0,
	106, 92, 91, 0, 134, 135, 137, 136, 138, 0,
	350, 0, 0, 0, 86, 349, 0, 0, 0, 0,
	386, 97, 0, 0, 112, 103, 0, 0, 0, 0,
	379, 380, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 341, 399, 367, 366, 368, 369, 370, 371, 0,
	0, 81, 372, 373, 374, 0, 0, 0, 347, 360,
	0, 385, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 358, 0, 0, 0, 0, 397, 0, 359,
	0, 0, 356, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 395,
	0, 108, 0, 0, 0, 0, 82, 0, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 0, 125, 104, 0, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 0, 0, 113, 123,
	133, 0, 0, 128, 129, 130, 0, 0, 0, 0,
	0, 0, 387, 396, 393, 394, 391, 392, 390, 389,
	388, 398, 381, 382, 384, 0, 383, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 0, 0,
	24, 0, 0, 0, 0, 88, 115, 0, 0, 0,
	0, 106, 92, 91, 0, 134, 135, 137, 136, 138,
	0, 350, 0, 0, 0, 86, 349, 0, 0, 0,
	0, 386, 97, 0, 0, 112, 103, 0, 0, 0,
	0, 379, 380, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 399, 367, 366, 368, 369, 370, 371,
	0, 0, 81, 372, 373, 374, 0, 0, 0, 347,
	360, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 358, 0, 0, 0, 0, 397, 0,
	359, 0, 0, 356, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	395, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 387, 396, 393, 394, 391, 392, 390,
	389, 388, 398, 381, 382, 384, 0, 383, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 115, 0, 0,
	0, 0, 106, 92, 91, 0, 134, 135, 137, 136,
	138, 0, 350, 0, 0, 0, 86, 349, 0, 0,
	0, 0, 386, 97, 0, 0, 112, 103, 0, 0,
	0, 0, 379, 380, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 399, 367, 366, 368, 369, 370,
	371, 0, 0, 81, 372, 373, 374, 0, 0, 0,
	347, 360, 0, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 358, 0, 0, 0, 0, 397,
	0, 359, 0, 0, 356, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 395, 0, 108, 0, 0, 0, 0, 82, 0,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 0, 125, 104, 0, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 0, 0,
	113, 123, 133, 0, 0, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 387, 396, 393, 394, 391, 392,
	390, 389, 388, 398, 381, 382, 384, 0, 383, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	0, 0, 106, 0, 91, 0, 0, 88, 115, 0,
	0, 0, 0, 0, 92, 0, 86, 134, 135, 137,
	136, 138, 386, 97, 0, 0, 112, 103, 0, 0,
	0, 0, 379, 380, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 399, 367, 366, 368, 369, 370,
	371, 0, 0, 81, 372, 373, 374, 0, 0, 0,
	0, 360, 0, 385, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 358, 0, 0, 0, 0, 397,
	0, 359, 0, 0, 356, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 395, 0, 108, 0, 0, 0, 0, 82, 0,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 0, 125, 104, 0, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 0, 0,
	113, 123, 133, 0, 0, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 387, 396, 393, 394, 391, 392,
	390, 389, 388, 398, 381, 382, 384, 0, 383, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	0, 106, 0, 91, 0, 0, 0, 88, 115, 0,
	0, 0, 0, 0, 92, 86, 0, 134, 135, 137,
	136, 138, 97, 0, 0, 112, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 509, 508,
	518, 519, 511, 512, 513, 514, 515, 516, 517, 510,
	0, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 75, 91,
	96, 131, 109, 89, 124, 0, 850, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 88, 115, 97, 0,
	0, 112, 103, 92, 0, 0, 134, 135, 137, 136,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 852, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 497, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 91, 0, 75, 71, 96, 131, 109, 89,
	124, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 97, 88, 115, 112, 103, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 138, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 127, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 82, 0, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 0, 125, 104, 0, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 0, 0, 113, 123,
	133, 0, 0, 128, 129, 130, 0, 0, 0, 0,
	0, 0, 24, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 91, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 97, 88, 115, 112, 103, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
	0, 0, 53, 0, 0, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	75, 91, 96, 131, 109, 89, 124, 0, 1018, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 88, 115,
	97, 0, 0, 112, 103, 92, 0, 0, 134, 135,
	137, 136, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 252, 0, 1020, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 91, 0, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 97, 88, 115, 112, 103, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 0,
	0, 53, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 82, 0,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 0, 125, 104, 0, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 0, 0,
	113, 123, 133, 0, 0, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 91, 0, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 97, 88, 115, 112,
	103, 0, 0, 0, 92, 0, 0, 134, 135, 137,
	136, 138, 0, 0, 0, 0, 0, 73, 0, 0,
	575, 0, 0, 576, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	91, 0, 75, 0, 96, 131, 109, 89, 124, 0,
	0, 0, 86, 423, 0, 0, 0, 0, 0, 97,
	88, 115, 112, 103, 0, 0, 0, 92, 0, 0,
	134, 135, 137, 136, 138, 0, 0, 0, 0, 0,
	73, 0, 422, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 82, 0, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 0,
	125, 104, 0, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 0, 0, 113, 123, 133, 0,
	0, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 91, 0, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 97, 88, 115, 112, 103, 0, 0, 0,
	92, 0, 0, 134, 135, 137, 136, 138, 0, 0,
	0, 0, 0, 252, 0, 1020, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 91, 0, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 97, 88, 115, 112, 103,
	0, 0, 0, 92, 0, 0, 134, 135, 137, 136,
	138, 0, 0, 53, 0, 0, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	82, 0, 111, 107, 122, 77, 120, 114, 101, 93,
	94, 76, 0, 110, 85, 90, 84, 105, 117, 118,
	83, 132, 80, 126, 79, 0, 125, 104, 0, 116,
	121, 102, 99, 78, 119, 100, 98, 95, 87, 0,
	0, 0, 113, 123, 133, 0, 0, 128, 129, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 91,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 97, 88,
	115, 112, 103, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138, 0, 0, 0, 0, 0, 73,
	0, 852, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 91, 0, 75, 0, 96, 131, 109, 89,
	124, 0, 0, 412, 86, 0, 0, 0, 0, 0,
	0, 97, 88, 115, 112, 103, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 138, 0, 0, 0,
	0, 0, 252, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 82, 0, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 0, 125, 104, 0, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 0, 0, 113, 123,
	133, 0, 0, 128, 129, 130, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 91, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 97, 88, 115, 112, 103, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
	0, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 91, 0,
	75, 0, 96, 131, 109, 89, 124, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 97, 88, 115,
	112, 103, 0, 0, 0, 92, 0, 0, 134, 135,
	137, 136, 138, 0, 0, 0, 0, 0, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 82, 0, 111, 107, 122, 77, 120, 114,
	101, 93, 94, 76, 0, 110, 85, 90, 84, 105,
	117, 118, 83, 132, 80, 126, 79, 0, 125, 104,
	0, 116, 121, 102, 99, 78, 119, 100, 98, 95,
	87, 0, 0, 0, 113, 123, 133, 0, 0, 128,
	129, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 91, 0, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	97, 88, 115, 112, 103, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 138, 0, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138,
}
var yyPact = [...]int{

	1198, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 662, 707, -1000, -1000, -1000, -1000, -1000, 502,
	5543, 5, -21, 63, 62, 1834, 61, 7742, -1000, -1000,
	15, -1000, -168, -1000, -1000, -149, -1000, -1000, -1000, -1000,
	500, -1000, -1000, -1000, -1000, -1000, 653, 660, 543, 636,
	586, -1000, 5, 7742, 697, 2066, -148, 299, 3, 53,
	3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 60,
	-1000, 1, 365, 1, 7742, 7742, -1000, 696, -71, 695,
	-18, -1000, -1000, -78, 3922, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7742, -1000, -1000, -1000, -1000, -1000, -1000, 271, -1000, -1000,
	-1000, -1000, 447, 447, -1000, 7742, -1000, -1000, -1000, -1000,
	368, 610, 4775, 4775, 662, -1000, 500, -1000, -1000, -1000,
	598, -1000, -1000, 238, 7193, 607, 93, 7742, 441, 2994,
	-1000, -1000, -1000, 180, 6461, -1000, -1000, -1000, 605, -1000,
	-1000, -1000, -1000, -1000, -1000, 658, 656, 373, -1000, 1336,
	7742, 216, 362, 7742, 7742, 7742, 622, 523, 7742, -1000,
	-1000, -1000, 7742, 693, 7742, 7742, 7742, -1000, -1000, 694,
	693, -1000, -1000, -1000, -1000, -1000, 4775, -1000, -1000, 124,
	-1000, -1000, -1000, 703, 126, 227, -1000, 4775, 1464, 447,
	447, -1000, -1000, 78, -1000, -1000, 4975, 4975, 4975, 4975,
	4975, 4975, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 447, 91, -1000, 4564, 447,
	447, 447, 447, 447, 447, 4775, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, -1000,
	-1000, 445, -1000, 258, 653, 368, 586, 6278, 526, -1000,
	-1000, 544, 7742, -1000, 7559, 3690, 685, 2994, 441, 4775,
	109, -1000, -1000, -1000, -1000, -145, 447, -160, 130, 96,
	-66, -1000, -1000, 453, -1000, 453, 453, 453, 453, -42,
	-42, -42, -42, -1000, -1000, -1000, -1000, -1000, 517, -1000,
	453, 453, 453, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 515, 515, 515, 456, 456, -1000, 618, 521, -1000,
	43, 440, -1000, -1000, 7742, -1000, -1000, 685, 7742, -1000,
	-1000, -1000, 653, -81, -1000, -1000, -1000, -1000, 371, 230,
	-1000, 7742, -1000, -1000, -1000, 573, 4775, 4775, 268, 4775,
	4775, 132, 4975, 242, 182, 4975, 4975, 4975, 4975, 4975,
	4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975, 4975,
	263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 361,
	-1000, 500, 483, 483, 110, 110, 110, 110, 110, 5174,
	4142, 3458, 368, 4564, 1591, 1591, 4775, 4775, 1591, 630,
	191, 230, 7376, -1000, 368, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1591, 1591, 1591, 1591, 4775, -1000, -1000, -1000,
	610, -1000, 630, 684, -1000, 588, 583, 1591, -1000, 520,
	7559, 447, -1000, 6095, -1000, 485, -1000, 178, -1000, 88,
	-1000, -1000, -1000, 662, 4775, -1000, 230, -1000, 358, 447,
	356, -1000, -61, 167, -1000, -1000, 504, 643, 134, 355,
	138, -1000, -1000, -1000, 96, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 228, 36, -1000, 642, -1000, 639,
	293, 702, -68, -1000, -1000, 267, -42, -42, -1000, -1000,
	109, 603, 109, 109, 109, 292, -1000, -1000, -1000, -1000,
	266, -1000, -1000, -1000, 259, -1000, -1000, 7742, -1000, 154,
	166, 24, -3, -4, -7, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7742, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 286, -1000, 4775, -1000, -1000, 570, 132, 181,
	-1000, -1000, 281, -1000, -1000, 230, 230, 645, -1000, -1000,
	-1000, -1000, 242, 4975, 4975, 4975, 133, 645, 585, 724,
	664, 110, 106, 106, 149, 149, 149, 149, 149, 433,
	433, -1000, -1000, -1000, 368, -1000, -1000, -1000, 368, 1591,
	421, -1000, -1000, 5360, 86, 447, 81, -1000, -1000, 368,
	319, 319, 113, 219, 319, 1591, 198, -1000, 4775, 368,
	-1000, 319, 368, 319, 319, -1000, -1000, 7742, -1000, -1000,
	-1000, -1000, 437, -1000, 611, 387, 392, -1000, -1000, 4353,
	368, 354, 77, 662, 7559, 4775, 3458, 653, 230, -1000,
	351, 368, 609, 160, 348, 7376, -1000, 335, -1000, -1000,
	333, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -85, -1000, -1000, 381, 109, 109, -1000, 153, -1000,
	-1000, -1000, 332, -1000, 416, 321, 2530, -1000, 7742, -1000,
	-1000, -1000, 315, -43, 502, 307, 299, -1000, -1000, -1000,
	-1000, 230, -1000, -1000, -1000, -1000, -1000, -1000, 133, 645,
	301, -1000, 4975, 4975, -1000, -1000, 319, 1591, -1000, -1000,
	7010, -1000, -1000, 2762, 1591, 3226, -1000, -1000, -1000, 45,
	263, 45, -111, 444, 186, -1000, 4775, 209, -1000, -1000,
	-1000, -1000, -1000, -1000, 685, 6827, 634, -1000, 447, -1000,
	-1000, 439, 7376, 7376, 653, -1000, 230, -1000, -1000, 368,
	2530, -164, -48, 256, -1000, 306, -1000, 453, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 280, 251, -1000,
	244, -1000, -1000, -1000, -1000, -1000, -1000, 602, -1000, -1000,
	-1000, -1000, 4975, 645, 645, -1000, -1000, -1000, -1000, 74,
	368, -1000, 368, 453, 453, -1000, 453, 456, -1000, 453,
	-19, 453, -22, 368, 368, 447, -107, -1000, 230, 4775,
	688, 393, 516, -1000, -1000, -1000, 624, 5726, 5912, 700,
	-1000, 447, -1000, 500, 65, -1000, -1000, 2530, -1000, -1000,
	-1000, -1000, 143, -1000, -116, 7376, -1000, -1000, 380, 378,
	297, 645, 2298, -1000, -1000, -1000, 55, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4975, 368, 273, 230, 678,
	655, 6827, 6827, 6827, 6827, -1000, 551, 548, -1000, 545,
	542, 574, 7742, -1000, 304, 5726, 114, -1000, 6644, -1000,
	-1000, 7559, 392, 368, 7376, -1000, 283, 648, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39, -1000, -1000, -1000, 4775,
	4775, 516, 484, 336, -1000, -1000, -1000, -1000, 546, -1000,
	538, -1000, -1000, -1000, -1000, -1000, 51, 44, 34, -1000,
	389, -1000, -1000, -1000, 646, 368, 42, -119, 230, 384,
	4775, 4775, -1000, -1000, 447, 447, 447, -1000, -1000, 563,
	-114, -135, 230, 230, 7376, 7376, 7376, -1000, 561, -1000,
	302, -1000, 302, 302, -117, -1000, 7376, -1000, -1000, -120,
	-1000, -138, -1000,
}
var yyPgo = [...]int{

	0, 942, 941, 940, 939, 938, 937, 936, 25, 434,
	935, 934, 932, 931, 930, 922, 921, 920, 918, 917,
	912, 910, 879, 875, 872, 52, 869, 866, 865, 44,
	863, 70, 862, 858, 857, 20, 61, 33, 39, 7,
	855, 16, 13, 9, 852, 850, 8, 849, 1051, 847,
	49, 844, 843, 842, 3, 22, 841, 840, 839, 838,
	55, 10, 837, 836, 835, 833, 831, 818, 35, 2,
	12, 82, 32, 816, 6, 4, 815, 34, 814, 813,
	812, 811, 21, 810, 46, 809, 28, 47, 805, 30,
	1, 29, 50, 56, 802, 800, 799, 310, 798, 120,
	294, 797, 41, 793, 790, 24, 0, 17, 69, 45,
	789, 579, 27, 5, 788, 787, 1134, 18, 19, 784,
	15, 117, 782, 780, 778, 776, 775, 774, 195, 773,
	771, 770, 40, 54, 757, 755, 754, 752, 737, 736,
	51, 14, 735, 733, 732, 731, 730, 43, 728, 42,
	23, 727, 726, 723, 11, 722, 721, 720, 37, 719,
	718, 72, 174, 713, 96,
}
var yyR1 = [...]int{

	0, 159, 160, 160, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 119,
	119, 16, 16, 16, 16, 16, 19, 150, 152, 135,
	135, 134, 134, 136, 136, 137, 137, 137, 151, 151,
	151, 147, 122, 122, 122, 156, 156, 157, 157, 158,
	158, 158, 158, 158, 158, 158, 125, 125, 123, 123,
	123, 123, 123, 123, 123, 124, 124, 124, 124, 124,
	126, 126, 126, 126, 126, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 146,
	146, 128, 128, 140, 140, 141, 141, 141, 138, 138,
	139, 139, 142, 142, 129, 129, 129, 129, 129, 130,
	143, 132, 132, 132, 133, 133, 144, 144, 145, 145,
	131, 148, 148, 153, 153, 153, 153, 153, 149, 149,
	155, 155, 154, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 51, 51, 1, 20, 2, 3,
	4, 4, 5, 5, 5, 5, 6, 6, 6, 6,
	121, 121, 121, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 34, 34, 50, 50, 24, 22, 23,
	23, 23, 23, 163, 25, 26, 26, 27, 27, 27,
	31, 31, 31, 29, 29, 30, 30, 37, 37, 36,
	36, 38, 38, 38, 38, 110, 110, 110, 109, 109,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 52,
	44, 44, 44, 44, 115, 115, 114, 114, 114, 113,
	113, 45, 45, 45, 45, 46, 46, 46, 46, 47,
	47, 49, 49, 48, 48, 53, 53, 53, 53, 54,
	54, 55, 55, 39, 39, 39, 39, 39, 39, 39,
	98, 98, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 35, 35, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 65, 65, 65, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 64, 64, 64,
	64, 64, 64, 64, 64, 164, 164, 66, 66, 66,
	66, 32, 32, 32, 32, 32, 118, 118, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 78, 78, 33, 33, 76, 76, 77, 79, 79,
	75, 75, 75, 60, 60, 60, 60, 60, 60, 60,
	62, 62, 62, 80, 80, 81, 81, 82, 82, 83,
	83, 84, 85, 85, 85, 86, 86, 86, 86, 87,
	87, 87, 59, 59, 59, 59, 59, 59, 88, 88,
	88, 88, 89, 89, 70, 70, 72, 72, 71, 73,
	90, 90, 91, 92, 92, 93, 93, 95, 95, 95,
	94, 94, 94, 96, 96, 99, 99, 100, 100, 97,
	97, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 102, 102, 102, 103, 103, 104, 104, 104, 107,
	107, 108, 108, 111, 111, 112, 112, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 161, 162,
	116, 117, 117, 117,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 2, 9, 8, 4, 7, 4, 4, 4, 0,
	3, 0, 4, 0, 3, 0, 1, 1, 1, 3,
	3, 3, 3, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 1, 2, 1,
	2, 4, 7, 2, 3, 2, 2, 3, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 5, 4, 1, 3, 3, 3, 2, 2,
	3, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	1, 1, 1, 3, 5, 6, 5, 5, 5, 3,
	3, 6, 5, 0, 3, 0, 2, 4, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 5, 5, 3, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 1,
	3, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 2, 1, 2, 2, 1,
	2, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -159, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 214, 132,
	221, 224, 225, 228, 227, 232, 29, 131, 135, 136,
	-161, 7, 198, 56, -160, 237, -82, 14, -27, 5,
	-25, -163, -25, -25, -25, -25, -150, 56, 190, -104,
	121, 22, -107, 59, -106, 204, 144, 138, 166, 157,
	155, 68, 133, 153, 149, 147, 31, 171, 222, 209,
	148, 19, 229, 142, 143, 170, 206, 38, 169, 165,
	168, 141, 164, 42, 160, 150, 17, 136, 128, 208,
	146, 135, 41, 175, 140, 223, 162, 151, 152, 167,
	139, 163, 137, 176, 210, 159, 156, 123, 180, 181,
	182, 207, 154, 177, 232, 233, 235, 234, 236, -97,
	125, 121, 122, 190, 121, 121, -121, 179, 35, 188,
	114, 183, 184, 186, 121, 59, -105, -106, 74, 26,
	28, 173, 77, 109, 15, 78, 158, 161, 108, 199,
	51, 191, 192, 189, 190, 178, 32, 9, 29, 131,
	25, 102, 116, 81, 82, 216, 134, 27, 132, 71,
	18, 54, 10, 12, 13, 126, 125, 93, 122, 49,
	7, 110, 30, 90, 45, 23, 47, 91, 16, 193,
	194, 34, 203, 104, 52, 39, 75, 69, 72, 55,
	73, 14, 50, 219, 218, 92, 117, 198, 48, 6,
	202, 33, 130, 46, 80, 124, 70, 220, 5, 22,
	8, 53, 127, 195, 196, 197, 37, 217, 79, 11,
	121, -111, 59, -106, -116, -116, 62, 208, -116, 226,
	-116, -116, 233, 235, 234, 236, -116, -116, -116, -116,
	-8, -86, 16, 15, -11, -9, -161, 6, 24, 25,
	-31, 43, 44, -26, -97, -48, -111, 10, -92, -119,
	-93, 230, 229, -108, -95, -107, -105, 161, 158, 231,
	188, 114, 35, 121, 179, 211, 215, -151, -147, 59,
	-100, 126, 122, -100, 121, -99, 126, 59, -99, -48,
	-48, -116, 10, 179, 10, 121, 190, -116, -116, 185,
	-121, -48, -116, 62, -116, -71, -161, -71, -116, -48,
	-162, 58, -87, 18, 34, -39, -56, 75, -61, 32,
	27, -60, -57, -75, -73, -74, 109, 98, 99, 106,
	76, 110, -65, -63, -64, -66, 61, 60, 62, 63,
	64, 65, 69, 70, 71, -107, -111, -71, -161, 47,
	48, 199, 200, 203, 201, 78, 37, 189, 197, 196,
	195, 193, 194, 191, 192, 126, 190, 104, 198, 59,
	-106, -83, -84, -39, -82, -8, -25, 39, -29, 25,
	67, -49, 30, -48, 33, 111, -48, 57, -92, 83,
	-94, -107, 61, 32, 33, 15, 15, 58, 57, -122,
	-125, -127, -126, -123, -124, 155, 156, 109, 159, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 133,
	151, 152, 153, 154, 138, 139, 140, 141, 142, 143,
	144, 146, 147, 148, 149, 150, -111, 75, 59, -48,
	-48, -51, -48, 27, 55, -111, -48, -50, 10, -48,
	-48, -48, -34, 10, -50, -116, -116, -116, -69, -39,
	-116, -102, 124, 26, 8, 93, 74, 73, 90, 57,
	17, -39, -58, 93, 75, 91, 92, 77, 95, 94,
	105, 98, 99, 100, 101, 102, 103, 104, 96, 97,
	108, 83, 84, 85, 86, 87, 88, 89, -98, -161,
	-74, -161, 112, 113, -61, -61, -61, -61, -61, -61,
	-161, 111, -8, -161, -161, -161, -161, -161, -161, -161,
	-78, -39, -161, -164, -161, -164, -164, -164, -164, -164,
	-164, -164, -161, -161, -161, -161, 57, -85, 28, 29,
	-86, -162, -31, -62, -107, 62, 65, -30, 46, -59,
	33, 37, -8, -161, -48, -90, -91, -75, -107, -111,
	-112, -111, -105, -55, 11, -93, -39, -133, 108, 213,
	-161, -152, -135, 222, -147, -148, -153, 128, 22, -149,
	19, 122, 23, -156, -157, -158, -142, -129, -143, -144,
	-145, -131, -130, 69, 75, 32, 173, 128, 23, 22,
	68, 55, -138, 176, -128, 56, -128, -128, -128, -128,
	-132, 158, -132, -132, -132, 56, -128, -128, -128, -140,
	56, -140, -140, -141, 56, -141, 27, 55, -101, 117,
	222, 199, 119, 116, 120, 115, 173, 158, 68, 32,
	14, 210, 59, 57, -48, -116, -55, -48, -116, -116,
	-116, -86, 187, -116, 57, -162, -48, 41, -39, -39,
	-67, 69, 75, 70, 71, -39, -39, -61, -68, -71,
	-74, 66, 93, 91, 92, 77, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -118, 59, 61, 59, -60, -60, -107, -37, 25,
	-36, -38, 100, -39, -111, -108, -112, -105, -162, -8,
	-36, -36, -39, -39, -36, -29, -76, -77, 79, -107,
	-162, -36, -37, -36, -36, -84, -87, -96, 18, 10,
	37, 37, -36, -89, 55, -90, -70, -72, -71, -161,
	-8, -88, -107, -55, 57, 83, 111, -82, -39, 59,
	-161, 59, -136, 173, 83, 56, 23, -149, 59, 59,
	-149, -158, 69, 61, 62, 63, 69, 189, 23, 23,
	61, 8, -139, 177, 62, -132, -132, -133, 33, -133,
	-133, -133, -146, 61, 62, 62, -48, -116, -102, -103,
	122, 23, 83, 124, 129, 129, 129, -48, -116, -116,
	61, -39, -116, 42, 69, 70, 71, -68, -61, -61,
	-61, -35, 134, 74, -162, -162, -36, 57, -110, -109,
	26, -107, 61, 111, -161, 111, -162, -162, -162, 57,
	127, 26, -162, -36, -79, -77, 81, -39, -162, -162,
	-162, -162, -162, -48, -40, 10, 31, -89, 57, -162,
	-162, -162, 57, 111, -82, -91, -39, -108, -86, 59,
	-162, -134, 32, 83, 59, -155, -154, -107, 59, 59,
	189, 58, -133, -133, 59, 109, 58, 57, 57, 58,
	57, -117, -161, -108, -48, -116, 59, 158, -150, 59,
	-147, -35, 74, -61, -61, -162, -38, -109, 100, -112,
	-37, -108, -120, 109, 155, 133, 153, 149, 170, 160,
	175, 151, 176, -118, -120, 204, -82, 82, -39, 80,
	-55, -41, -42, -43, -44, -52, -74, -161, -48, 23,
	-72, 37, -8, -161, -107, -107, -86, -162, -117, -137,
	229, 223, 161, 62, 58, 57, -128, 61, 62, 62,
	33, -61, 111, -162, -162, -128, -128, -128, -141, -128,
	143, -128, 143, -162, -162, -161, -33, 202, -39, -80,
	12, 57, -45, -46, -47, 45, 49, 51, 46, 47,
	48, 52, -115, 26, -41, -161, -114, -113, 26, -111,
	61, 8, -70, -8, 111, -117, 83, 207, -154, 58,
	58, 59, 100, -132, 59, -61, -162, 61, -81, 13,
	15, -42, -43, -42, -43, 45, 45, 45, 50, 45,
	50, 45, -46, -111, -162, -53, 53, 125, 54, -113,
	-90, -162, -107, 59, 20, -32, 93, 207, -39, -69,
	55, 55, 45, 45, 122, 122, 122, 21, -162, 205,
	52, 208, -39, -39, -161, -161, -161, 42, 206, 209,
	-54, -107, -54, -54, 42, -162, 57, -162, -162, 207,
	-107, 208, 209,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 417, 0, 203, 203, 203, 203, 203, 0,
	486, 469, 0, 0, 0, 0, 0, 0, 660, 660,
	0, 660, 0, 660, 660, 0, 660, 660, 660, 660,
	0, 33, 34, 658, 1, 3, 425, 0, 0, 207,
	210, 205, 469, 0, 0, 0, 41, 0, 467, 0,
	467, 487, 488, 489, 490, 594, 595, 596, 597, 598,
	599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 0,
	470, 465, 0, 465, 0, 0, 660, 577, 534, 508,
	510, 660, 660, 0, 576, 180, 181, 182, 497, 498,
	499, 500, 501, 502, 503, 504, 505, 506, 507, 509,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 535, 536, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	0, 198, 493, 494, 168, 169, 660, 0, 172, 660,
	174, 175, 0, 0, 660, 0, 199, 200, 201, 202,
	27, 429, 0, 0, 417, 29, 0, 203, 208, 209,
	213, 211, 212, 204, 0, 0, 263, 0, 37, 0,
	453, 39, -2, 0, 0, 491, 492, -2, 505, 459,
	508, 510, 534, 576, 577, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 166,
	167, 183, 0, 195, 0, 0, 0, 189, 190, 193,
	195, 660, 170, 660, 173, 660, 0, 660, 178, 481,
	28, 659, 23, 0, 0, 426, 273, 0, 278, 280,
	0, 315, 316, 317, 318, 319, 0, 0, 0, 0,
	0, 0, 341, 342, 343, 344, 403, 404, 405, 406,
	407, 408, 409, 282, 283, 400, 0, 449, 0, 0,
	0, 0, 0, 0, 0, 391, 0, 365, 365, 365,
	365, 365, 365, 365, 365, 0, 0, 0, 0, -2,
	-2, 418, 419, 422, 425, 27, 210, 0, 215, 214,
	206, 0, 0, 262, 0, 0, 271, 0, 38, 0,
	134, 460, 461, 462, 458, 0, 0, 49, 0, 65,
	118, 63, 64, 111, 77, 111, 111, 111, 111, 131,
	131, 131, 131, 103, 104, 105, 106, 107, 0, 90,
	111, 111, 111, 94, 78, 79, 80, 81, 82, 83,
	84, 113, 113, 113, 115, 115, 44, 0, 0, 46,
	0, 161, 164, 466, 0, 163, 660, 271, 0, 660,
	660, 660, 425, 0, 660, 197, 171, 176, 0, 313,
	177, 0, 482, 483, 430, 0, 0, 0, 0, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 300, 301, 302, 303, 304, 305, 306, 279, 0,
	293, 0, 0, 0, 335, 336, 337, 338, 339, 0,
	217, 0, 27, 0, 0, 0, 0, 0, 0, 213,
	0, 392, 0, 357, 0, 358, 359, 360, 361, 362,
	363, 364, 0, 217, 0, 0, 0, 421, 423, 424,
	429, 30, 213, 0, 410, 0, 0, 0, 216, 442,
	0, 0, -2, 0, 261, 271, 450, 0, 400, 0,
	264, 495, 496, 417, 0, 454, 455, 456, 0, 0,
	0, 47, 53, 0, 59, 60, 0, 0, 0, 0,
	0, 148, 149, 61, 66, 67, 69, 70, 71, 72,
	73, 74, 75, 122, 0, 0, 130, 0, 137, 139,
	0, 0, 120, 119, 76, 0, 131, 131, 97, 98,
	134, 0, 134, 134, 134, 0, 91, 92, 93, 85,
	0, 86, 87, 88, 0, 89, 468, 0, 660, 481,
	0, 478, 0, 476, 0, 471, 472, 473, 474, 475,
	477, 479, 480, 0, 162, 184, 660, 196, 186, 187,
	188, 660, 0, 192, 0, 448, 660, 0, 274, 275,
	277, 294, 0, 296, 298, 427, 428, 284, 285, 309,
	310, 311, 0, 0, 0, 0, 307, 289, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
	331, 334, 376, 377, 0, 332, 333, 340, 0, 0,
	218, 219, 221, 225, 0, 401, 0, -2, 312, 27,
	0, 0, 0, 0, 0, 0, 398, 395, 0, 0,
	366, 0, 0, 0, 0, 420, 24, 0, 463, 464,
	411, 412, 230, 31, 0, 442, 432, 444, 446, 0,
	27, 0, 438, 417, 0, 0, 0, 425, 272, 135,
	0, 0, 51, 0, 0, 0, 143, 0, 145, 146,
	0, 68, 123, 124, 125, 126, 127, 128, 136, 138,
	140, 0, 62, 121, 0, 134, 134, 99, 0, 100,
	101, 102, 0, 109, 0, 0, 661, 153, 0, 660,
	484, 485, 0, 0, 0, 0, 0, 165, 185, 191,
	194, 314, 179, 431, 295, 297, 299, 286, 307, 290,
	0, 287, 0, 0, 281, 345, 0, 0, 222, 226,
	0, 228, 229, 0, 217, 0, -2, 348, 349, 0,
	0, 0, 0, 417, 0, 396, 0, 0, 356, 367,
	368, 369, 370, 25, 271, 0, 0, 32, 0, 447,
	-2, 0, 0, 0, 425, 451, 452, 401, 36, 0,
	661, 55, 0, 0, 50, 0, 150, 111, 144, 147,
	129, 112, 95, 96, 132, 133, 108, 0, 0, 116,
	0, 45, 662, 663, 154, 155, 156, 0, 158, 159,
	160, 288, 0, 308, 291, 346, 220, 227, 223, 0,
	0, 402, 0, 111, 111, 381, 111, 115, 384, 111,
	386, 111, 389, 0, 0, 0, 393, 355, 399, 0,
	413, 231, 232, 234, 235, 236, 244, 0, 246, 0,
	445, 0, -2, 0, 440, 439, 35, 661, 43, 48,
	56, 57, 0, 54, 141, 0, 152, 110, 0, 0,
	0, 292, 0, 347, 350, 378, 131, 382, 383, 385,
	387, 388, 390, 352, 351, 0, 0, 0, 397, 415,
	0, 0, 0, 0, 0, 251, 0, 0, 254, 0,
	0, 0, 0, 245, 0, 0, 265, 247, 0, 249,
	250, 0, 435, 27, 0, 42, 0, 0, 151, 114,
	117, 157, 224, 379, 380, 371, 354, 394, 26, 0,
	0, 233, 240, 0, 243, 252, 253, 255, 0, 257,
	0, 259, 260, 237, 238, 239, 0, 0, 0, 248,
	443, -2, 441, 52, 0, 0, 0, 0, 416, 414,
	0, 0, 256, 258, 0, 0, 0, 142, 353, 0,
	0, 0, 241, 242, 0, 0, 0, 372, 0, 375,
	0, 269, 0, 0, 373, 266, 0, 267, 268, 0,
	270, 0, 374,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 237,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:296
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:301
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:302
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:306
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:330
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:342
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:349
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:355
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:359
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:365
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:369
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:376
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:399
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:403
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:409
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:415
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:425
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:431
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:435
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:442
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:448
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:456
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = string(yyDollar[6].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:464
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:472
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:479
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:490
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:497
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
			yyVAL.TableOptions.Type = yyDollar[4].str
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:504
		{
			yyVAL.str = ""
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:508
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:513
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:517
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:522
		{
			yyVAL.str = ""
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:526
		{
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:530
		{
			yyVAL.str = NormalTableType
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.str = GlobalTableType
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.str = SingleTableType
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:550
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:554
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:560
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:573
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 65:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:582
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:586
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:596
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:609
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:623
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:630
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:637
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:653
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:658
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:718
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:756
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:811
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:816
		{
			yyVAL.optVal = nil
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:820
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:825
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:829
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:837
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:841
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:847
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:855
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:864
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:879
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:885
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:889
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:893
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:897
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:901
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:913
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:918
		{
			yyVAL.str = ""
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:922
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:926
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:931
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:941
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:954
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:958
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:970
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:974
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:980
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:984
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:988
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:992
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:996
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1023
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1029
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1033
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1038
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 156:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1066
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1074
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1079
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.statement = &Xa{}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.statement = &Explain{}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1123
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1169
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1178
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1205
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1217
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1221
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1225
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1229
		{
			if yyDollar[3].str == ShowStatusStr {
				yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
			} else {
				yyVAL.statement = &Show{Type: ShowUnsupportedStr, Database: yyDollar[4].tableName}
			}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1242
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.tableName = TableName{}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1257
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1269
		{
			yyVAL.statement = &OtherRead{}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.statement = &OtherRead{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1277
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1286
		{
			setAllowComments(yylex, true)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.bytes2 = nil
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.str = UnionStr
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.str = UnionAllStr
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.str = UnionDistinctStr
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = ""
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1327
		{
			yyVAL.str = SQLCacheStr
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.str = ""
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1336
		{
			yyVAL.str = DistinctStr
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = ""
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.str = StraightJoinHint
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.selectExprs = nil
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1364
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1462
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.empty = struct{}{}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.empty = struct{}{}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.str = JoinStr
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.str = JoinStr
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.str = JoinStr
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.str = StraightJoinStr
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.str = LeftJoinStr
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.str = LeftJoinStr
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = RightJoinStr
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.str = RightJoinStr
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1537
		{
			yyVAL.str = NaturalJoinStr
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1541
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.indexHints = nil
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1597
		{
			yyVAL.expr = nil
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1623
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1647
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.str = IsNullStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.str = IsNotNullStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.str = IsTrueStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1711
		{
			yyVAL.str = IsNotTrueStr
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.str = IsFalseStr
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.str = IsNotFalseStr
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.str = EqualStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.str = LessThanStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.str = GreaterThanStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.str = LessEqualStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.str = GreaterEqualStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.str = NotEqualStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1749
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1768
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1854
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1858
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1866
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1870
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1878
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1908
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 350:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 351:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 353:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1964
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1968
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1998
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.str = BooleanModeStr
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.str = QueryExpansionStr
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = nil
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.str = string("")
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.expr = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2207
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2211
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2215
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.expr = &NullVal{}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2225
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2238
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.exprs = nil
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = nil
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.orderBy = nil
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2265
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.str = AscScr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.str = AscScr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.str = DescScr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.limit = nil
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.str = ForUpdateStr
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.str = ShareModeStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2341
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2345
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2358
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.updateExprs = nil
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2386
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2412
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2418
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2438
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2444
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2448
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.bytes = []byte("charset")
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2476
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2480
		{
			yyVAL.expr = &Default{}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.byt = 0
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2492
		{
			yyVAL.byt = 1
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.byt = 0
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.byt = 1
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2500
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.str = IgnoreStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2510
		{
			yyVAL.empty = struct{}{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2512
		{
			yyVAL.empty = struct{}{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2514
		{
			yyVAL.empty = struct{}{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.empty = struct{}{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2518
		{
			yyVAL.empty = struct{}{}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.empty = struct{}{}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2522
		{
			yyVAL.empty = struct{}{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2524
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.empty = struct{}{}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.empty = struct{}{}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.empty = struct{}{}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.empty = struct{}{}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.empty = struct{}{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2576
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2763
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2772
		{
			decNesting(yylex)
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2777
		{
			forceEOF(yylex)
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2782
		{
			forceEOF(yylex)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2786
		{
			forceEOF(yylex)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2790
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
