//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptionListOpt    TableOptionListOpt
	TableOptionList       TableOptionList
	tableOption           *TableOption
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
	partitionDefinition   *PartitionDefinition
	partitionDefinitions  []*PartitionDefinition
	showFilter            *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const WARNINGS = 57505
const VARIABLES = 57506
const EVENTS = 57507
const BINLOG = 57508
const GTID = 57509
const STATUS = 57510
const COLUMNS = 57511
const FIELDS = 57512
const CURRENT_TIMESTAMP = 57513
const DATABASE = 57514
const CURRENT_DATE = 57515
const CURRENT_TIME = 57516
const LOCALTIME = 57517
const LOCALTIMESTAMP = 57518
const UTC_DATE = 57519
const UTC_TIME = 57520
const UTC_TIMESTAMP = 57521
const REPLACE = 57522
const CONVERT = 57523
const CAST = 57524
const GROUP_CONCAT = 57525
const SEPARATOR = 57526
const MATCH = 57527
const AGAINST = 57528
const BOOLEAN = 57529
const LANGUAGE = 57530
const WITH = 57531
const QUERY = 57532
const EXPANSION = 57533
const UNUSED = 57534
const PARTITION = 57535
const PARTITIONS = 57536
const HASH = 57537
const LIST = 57538
const XA = 57539
const DISTRIBUTED = 57540
const ENGINES = 57541
const VERSIONS = 57542
const PROCESSLIST = 57543
const QUERYZ = 57544
const TXNZ = 57545
const KILL = 57546
const ENGINE = 57547
const SINGLE = 57548
const BEGIN = 57549
const START = 57550
const TRANSACTION = 57551
const COMMIT = 57552
const ROLLBACK = 57553
const GLOBAL = 57554
const SESSION = 57555
const NAMES = 57556
const RADON = 57557
const ATTACH = 57558
const ATTACHLIST = 57559
const DETACH = 57560
const RESHARD = 57561
const PROGRESS = 57562

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"FIELDS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"LIST",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"PROGRESS",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 180,
	83, 673,
	-2, 40,
	-1, 185,
	83, 550,
	-2, 498,
	-1, 412,
	111, 534,
	-2, 530,
	-1, 413,
	111, 535,
	-2, 531,
	-1, 440,
	158, 56,
	161, 56,
	-2, 69,
	-1, 479,
	1, 50,
	238, 50,
	-2, 56,
	-1, 595,
	5, 27,
	-2, 474,
	-1, 618,
	158, 56,
	161, 56,
	-2, 70,
	-1, 685,
	1, 51,
	238, 51,
	-2, 56,
	-1, 770,
	111, 537,
	-2, 533,
	-1, 900,
	5, 28,
	-2, 353,
	-1, 924,
	5, 28,
	-2, 475,
	-1, 1012,
	5, 27,
	-2, 477,
	-1, 1115,
	5, 28,
	-2, 478,
}

const yyPrivate = 57344

const yyLast = 6921

var yyAct = [...]int{

	413, 961, 500, 1152, 1118, 1071, 598, 1003, 390, 1057,
	366, 944, 388, 1002, 799, 937, 963, 56, 800, 668,
	982, 764, 885, 608, 1068, 184, 555, 3, 754, 893,
	761, 74, 159, 817, 769, 66, 599, 310, 140, 796,
	731, 681, 311, 72, 711, 503, 368, 780, 820, 627,
	643, 619, 686, 763, 355, 637, 415, 421, 612, 677,
	1008, 178, 168, 493, 140, 55, 74, 364, 313, 149,
	151, 150, 152, 153, 146, 307, 1119, 158, 183, 143,
	308, 631, 181, 614, 615, 766, 1122, 522, 521, 531,
	532, 524, 525, 526, 527, 528, 529, 530, 523, 1166,
	1151, 533, 1165, 1140, 1163, 391, 50, 1081, 1150, 1139,
	995, 1051, 832, 833, 834, 948, 326, 625, 117, 118,
	835, 140, 140, 330, 173, 337, 708, 325, 842, 176,
	332, 333, 661, 822, 967, 566, 821, 669, 140, 1088,
	868, 1046, 1044, 856, 867, 866, 95, 320, 638, 1110,
	1112, 636, 640, 140, 140, 315, 50, 116, 347, 349,
	82, 865, 505, 1132, 164, 983, 640, 92, 1131, 1130,
	98, 93, 353, 140, 863, 60, 140, 505, 74, 318,
	417, 323, 324, 74, 327, 316, 119, 137, 312, 985,
	183, 418, 121, 822, 181, 434, 821, 78, 343, 1123,
	702, 62, 63, 64, 65, 987, 120, 991, 1078, 986,
	319, 984, 640, 351, 352, 1036, 989, 1033, 701, 545,
	546, 1111, 630, 927, 144, 903, 988, 899, 897, 809,
	554, 990, 992, 426, 428, 952, 429, 523, 669, 836,
	533, 510, 509, 613, 1031, 704, 358, 416, 827, 533,
	1156, 639, 107, 508, 700, 348, 348, 635, 511, 662,
	504, 1138, 79, 713, 97, 639, 105, 76, 509, 511,
	50, 626, 629, 862, 136, 504, 81, 87, 628, 818,
	103, 104, 80, 108, 511, 953, 77, 864, 808, 94,
	432, 102, 510, 509, 1032, 904, 997, 781, 135, 90,
	83, 697, 695, 691, 99, 694, 696, 431, 423, 511,
	738, 639, 480, 831, 101, 140, 86, 1026, 140, 140,
	140, 657, 656, 140, 736, 737, 735, 140, 140, 513,
	322, 653, 75, 1025, 91, 905, 96, 85, 106, 510,
	509, 419, 314, 712, 699, 942, 999, 781, 115, 910,
	854, 84, 100, 123, 659, 938, 511, 939, 89, 698,
	130, 109, 110, 112, 111, 113, 114, 658, 651, 512,
	581, 582, 853, 843, 652, 724, 726, 727, 482, 483,
	485, 725, 510, 509, 693, 510, 509, 491, 492, 526,
	527, 528, 529, 530, 523, 703, 53, 533, 755, 511,
	756, 496, 511, 878, 879, 880, 734, 345, 692, 1091,
	543, 172, 1024, 317, 936, 510, 509, 124, 872, 134,
	132, 74, 122, 871, 129, 852, 140, 655, 839, 140,
	1135, 74, 511, 587, 501, 1029, 1159, 354, 600, 1085,
	601, 969, 313, 183, 1133, 354, 514, 181, 1055, 354,
	583, 595, 1022, 1021, 605, 125, 133, 127, 128, 131,
	966, 947, 1028, 603, 891, 354, 958, 957, 542, 544,
	955, 954, 654, 670, 671, 672, 946, 501, 828, 632,
	926, 354, 585, 812, 564, 757, 597, 481, 140, 717,
	354, 354, 610, 321, 553, 140, 140, 556, 557, 558,
	559, 560, 561, 562, 140, 565, 567, 567, 567, 567,
	567, 567, 567, 567, 575, 576, 577, 578, 611, 24,
	683, 1084, 707, 441, 440, 732, 22, 1083, 949, 687,
	596, 797, 919, 807, 717, 679, 680, 568, 569, 570,
	571, 572, 573, 574, 807, 616, 593, 922, 706, 1055,
	594, 24, 24, 74, 956, 714, 715, 891, 705, 430,
	579, 53, 57, 733, 719, 760, 74, 183, 165, 53,
	609, 768, 380, 379, 381, 382, 383, 384, 782, 891,
	770, 385, 1011, 772, 663, 163, 1059, 1062, 1063, 1064,
	1060, 584, 1061, 1065, 682, 721, 722, 74, 728, 729,
	798, 53, 53, 801, 600, 891, 601, 785, 67, 805,
	824, 773, 774, 758, 759, 777, 807, 313, 53, 678,
	778, 673, 806, 803, 1126, 797, 810, 689, 487, 784,
	1103, 786, 787, 591, 1101, 1104, 788, 1129, 789, 1102,
	1128, 1100, 501, 1099, 795, 775, 776, 169, 170, 1157,
	50, 524, 525, 526, 527, 528, 529, 530, 523, 815,
	819, 533, 556, 720, 823, 416, 1105, 1149, 1063, 1064,
	816, 877, 1148, 718, 531, 532, 524, 525, 526, 527,
	528, 529, 530, 523, 844, 845, 533, 422, 794, 793,
	140, 356, 826, 830, 829, 811, 1034, 941, 847, 437,
	802, 420, 50, 427, 631, 920, 140, 357, 664, 665,
	666, 667, 1059, 1062, 1063, 1064, 1060, 688, 1061, 1065,
	813, 814, 1127, 674, 675, 676, 486, 846, 771, 848,
	849, 850, 1067, 166, 167, 687, 857, 860, 855, 422,
	783, 1009, 838, 837, 732, 825, 1136, 1120, 160, 792,
	858, 1094, 439, 438, 1093, 161, 361, 791, 57, 1054,
	874, 609, 494, 495, 490, 175, 869, 74, 1075, 840,
	507, 59, 61, 54, 1, 1117, 881, 685, 684, 895,
	642, 641, 733, 943, 634, 618, 617, 309, 633, 851,
	648, 140, 647, 646, 644, 841, 660, 1030, 1027, 873,
	624, 623, 622, 875, 621, 620, 649, 650, 645, 444,
	445, 443, 447, 446, 313, 313, 890, 442, 600, 177,
	601, 1066, 183, 1070, 928, 74, 931, 909, 892, 69,
	861, 690, 907, 541, 790, 770, 182, 945, 921, 433,
	804, 580, 414, 932, 929, 1092, 1053, 908, 563, 779,
	367, 917, 723, 378, 940, 375, 933, 934, 377, 74,
	376, 140, 586, 592, 515, 365, 359, 911, 1109, 313,
	1005, 183, 484, 331, 898, 126, 424, 1058, 1056, 389,
	1004, 918, 489, 1050, 1121, 590, 25, 58, 501, 171,
	959, 960, 14, 21, 930, 74, 15, 13, 12, 29,
	74, 10, 968, 950, 951, 971, 970, 895, 9, 8,
	183, 7, 183, 976, 768, 6, 981, 138, 5, 4,
	140, 964, 162, 770, 977, 996, 994, 74, 74, 980,
	888, 801, 979, 993, 889, 23, 74, 1019, 2, 1014,
	1015, 1010, 1000, 174, 1001, 900, 901, 902, 183, 20,
	906, 19, 1012, 18, 17, 912, 1020, 913, 914, 915,
	916, 1016, 16, 11, 962, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 998, 0, 0, 0,
	174, 174, 0, 0, 0, 0, 0, 0, 140, 140,
	0, 0, 0, 0, 0, 0, 0, 174, 74, 1079,
	801, 0, 0, 74, 0, 1007, 1076, 0, 802, 1042,
	183, 1013, 174, 174, 1082, 945, 0, 74, 0, 0,
	1077, 962, 0, 0, 0, 0, 0, 0, 0, 183,
	0, 0, 174, 981, 1006, 174, 140, 140, 140, 140,
	1087, 0, 0, 975, 1096, 0, 1098, 140, 0, 1095,
	140, 1097, 0, 140, 0, 1106, 0, 0, 1113, 74,
	0, 0, 1114, 0, 0, 1052, 600, 0, 601, 0,
	0, 1116, 0, 0, 0, 0, 772, 1125, 0, 0,
	0, 1049, 1006, 1006, 1006, 1006, 1017, 1018, 0, 0,
	0, 0, 0, 1069, 0, 0, 1006, 802, 0, 50,
	0, 0, 0, 962, 1080, 0, 547, 548, 549, 550,
	551, 552, 0, 0, 0, 74, 1147, 0, 1146, 0,
	0, 0, 0, 0, 74, 74, 74, 183, 1154, 1155,
	0, 0, 0, 1037, 0, 1038, 1153, 1153, 1153, 0,
	74, 1007, 1007, 1007, 1007, 1162, 1047, 1048, 0, 0,
	0, 0, 1164, 0, 0, 1069, 0, 0, 0, 1124,
	501, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 479, 0, 0, 174, 174, 174,
	0, 0, 488, 0, 0, 1023, 174, 174, 0, 0,
	0, 0, 1141, 1142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 142, 0, 145, 0, 147,
	148, 0, 154, 155, 156, 157, 1143, 1144, 1145, 0,
	962, 1108, 0, 1039, 1040, 0, 1041, 0, 0, 1043,
	1115, 1045, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	1134, 0, 0, 0, 1137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 0, 602, 604, 0,
	328, 329, 0, 334, 335, 336, 0, 338, 339, 340,
	341, 342, 0, 0, 0, 1158, 0, 1160, 1161, 344,
	0, 0, 346, 0, 0, 0, 0, 350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 450, 0, 0,
	0, 0, 0, 0, 0, 522, 521, 531, 532, 524,
	525, 526, 527, 528, 529, 530, 523, 174, 0, 533,
	0, 462, 0, 0, 174, 174, 467, 468, 469, 470,
	471, 472, 473, 174, 474, 475, 476, 477, 478, 463,
	464, 465, 466, 448, 449, 886, 972, 451, 0, 0,
	452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 522, 521, 531, 532,
	524, 525, 526, 527, 528, 529, 530, 523, 0, 0,
	533, 0, 0, 767, 604, 0, 0, 767, 767, 0,
	0, 767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 767, 767, 767, 767, 521,
	531, 532, 524, 525, 526, 527, 528, 529, 530, 523,
	767, 0, 533, 602, 0, 522, 521, 531, 532, 524,
	525, 526, 527, 528, 529, 530, 523, 0, 517, 533,
	520, 0, 0, 882, 883, 884, 534, 535, 536, 537,
	538, 539, 540, 0, 518, 519, 516, 522, 521, 531,
	532, 524, 525, 526, 527, 528, 529, 530, 523, 887,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 497,
	0, 498, 0, 499, 0, 502, 0, 0, 506, 522,
	521, 531, 532, 524, 525, 526, 527, 528, 529, 530,
	523, 0, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 95, 0, 88, 0, 0, 0,
	0, 0, 762, 0, 363, 174, 0, 0, 82, 362,
	0, 0, 0, 0, 399, 92, 0, 0, 98, 93,
	0, 0, 0, 0, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 412, 380, 379, 381,
	382, 383, 384, 0, 0, 78, 385, 386, 387, 0,
	0, 0, 360, 373, 0, 398, 0, 0, 0, 0,
	0, 0, 767, 973, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 370, 371, 765, 767, 0,
	0, 410, 0, 372, 0, 0, 369, 374, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 709, 710, 0,
	107, 0, 716, 408, 0, 0, 0, 602, 0, 604,
	79, 0, 97, 0, 105, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 87, 0, 0, 103, 104,
	80, 108, 0, 0, 77, 0, 0, 94, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 90, 83, 1035,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 101, 0, 86, 400, 409, 406, 407, 404,
	405, 403, 402, 401, 411, 394, 395, 397, 0, 396,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 767, 0, 0, 0, 0, 0, 604, 767, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 114, 0, 0, 0, 0, 174,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 174, 1073, 0,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 174, 174, 174, 174, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 0, 174,
	0, 0, 1073, 0, 0, 602, 290, 275, 235, 293,
	211, 226, 305, 228, 229, 265, 196, 245, 95, 224,
	88, 0, 0, 291, 242, 0, 214, 189, 221, 190,
	212, 239, 82, 210, 277, 248, 227, 0, 299, 92,
	257, 0, 98, 93, 0, 0, 241, 280, 243, 274,
	234, 266, 203, 256, 294, 225, 262, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	259, 288, 223, 261, 264, 188, 258, 0, 192, 197,
	304, 286, 217, 218, 0, 0, 0, 0, 0, 0,
	0, 240, 244, 271, 232, 0, 0, 965, 0, 0,
	0, 0, 0, 215, 0, 255, 0, 0, 0, 199,
	194, 238, 0, 0, 0, 202, 0, 216, 272, 0,
	0, 0, 281, 233, 107, 287, 231, 230, 295, 268,
	0, 278, 213, 222, 79, 220, 97, 263, 105, 76,
	284, 279, 253, 236, 237, 193, 0, 270, 81, 87,
	209, 260, 103, 104, 80, 108, 198, 301, 77, 186,
	300, 94, 185, 102, 285, 254, 250, 195, 283, 252,
	249, 90, 83, 0, 191, 0, 99, 292, 306, 208,
	282, 0, 0, 0, 0, 0, 101, 200, 86, 206,
	207, 204, 205, 246, 247, 296, 297, 298, 273, 201,
	0, 0, 276, 251, 75, 0, 91, 303, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 219, 302, 269,
	267, 289, 0, 84, 100, 0, 0, 0, 0, 0,
	180, 179, 187, 109, 110, 112, 111, 113, 114, 290,
	275, 235, 293, 211, 226, 305, 228, 229, 265, 196,
	245, 95, 224, 88, 0, 0, 291, 242, 0, 214,
	189, 221, 190, 212, 239, 82, 210, 277, 248, 227,
	0, 299, 92, 257, 0, 98, 93, 0, 0, 241,
	280, 243, 274, 234, 266, 203, 256, 294, 225, 262,
	53, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 259, 288, 223, 261, 264, 188, 258,
	0, 192, 197, 304, 286, 217, 218, 0, 0, 0,
	0, 0, 0, 0, 240, 244, 271, 232, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 0, 255, 0,
	0, 0, 199, 194, 238, 0, 0, 0, 202, 0,
	216, 272, 0, 0, 0, 281, 233, 107, 287, 231,
	230, 295, 268, 0, 278, 213, 222, 79, 220, 97,
	263, 105, 76, 284, 279, 253, 236, 237, 193, 0,
	270, 81, 87, 209, 260, 103, 104, 80, 108, 198,
	301, 77, 606, 300, 94, 607, 102, 285, 254, 250,
	195, 283, 252, 249, 90, 83, 0, 191, 0, 99,
	292, 306, 208, 282, 0, 0, 0, 0, 0, 101,
	200, 86, 206, 207, 204, 205, 246, 247, 296, 297,
	298, 273, 201, 0, 0, 276, 251, 75, 0, 91,
	303, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	219, 302, 269, 267, 289, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 114, 290, 275, 235, 293, 211, 226, 305, 228,
	229, 265, 196, 245, 95, 224, 88, 0, 0, 291,
	242, 0, 214, 189, 221, 190, 212, 239, 82, 210,
	277, 248, 227, 0, 299, 92, 257, 0, 98, 93,
	0, 0, 241, 280, 243, 274, 234, 266, 203, 256,
	294, 225, 262, 0, 0, 0, 73, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 259, 288, 223, 261,
	264, 188, 258, 0, 192, 197, 304, 286, 217, 218,
	0, 0, 0, 0, 0, 0, 0, 240, 244, 271,
	232, 0, 0, 0, 0, 0, 0, 1086, 0, 215,
	0, 255, 0, 0, 0, 199, 194, 238, 0, 0,
	0, 202, 0, 216, 272, 0, 0, 0, 281, 233,
	107, 287, 231, 230, 295, 268, 0, 278, 213, 222,
	79, 220, 97, 263, 105, 76, 284, 279, 253, 236,
	237, 193, 0, 270, 81, 87, 209, 260, 103, 104,
	80, 108, 198, 301, 77, 606, 300, 94, 607, 102,
	285, 254, 250, 195, 283, 252, 249, 90, 83, 0,
	191, 0, 99, 292, 306, 208, 282, 0, 0, 0,
	0, 0, 101, 200, 86, 206, 207, 204, 205, 246,
	247, 296, 297, 298, 273, 201, 0, 0, 276, 251,
	75, 0, 91, 303, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 219, 302, 269, 267, 289, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 114, 290, 275, 235, 293, 211,
	226, 305, 228, 229, 265, 196, 245, 95, 224, 88,
	0, 0, 291, 242, 0, 214, 189, 221, 190, 212,
	239, 82, 210, 277, 248, 227, 0, 299, 92, 257,
	0, 98, 93, 0, 0, 241, 280, 243, 274, 234,
	266, 203, 256, 294, 225, 262, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 259,
	288, 223, 261, 264, 188, 258, 0, 192, 197, 304,
	286, 217, 218, 0, 0, 0, 0, 0, 0, 0,
	240, 244, 271, 232, 0, 0, 0, 0, 0, 0,
	978, 0, 215, 0, 255, 0, 0, 0, 199, 194,
	238, 0, 0, 0, 202, 0, 216, 272, 0, 0,
	0, 281, 233, 107, 287, 231, 230, 295, 268, 0,
	278, 213, 222, 79, 220, 97, 263, 105, 76, 284,
	279, 253, 236, 237, 193, 0, 270, 81, 87, 209,
	260, 103, 104, 80, 108, 198, 301, 77, 606, 300,
	94, 607, 102, 285, 254, 250, 195, 283, 252, 249,
	90, 83, 0, 191, 0, 99, 292, 306, 208, 282,
	0, 0, 0, 0, 0, 101, 200, 86, 206, 207,
	204, 205, 246, 247, 296, 297, 298, 273, 201, 0,
	0, 276, 251, 75, 0, 91, 303, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 219, 302, 269, 267,
	289, 0, 84, 100, 0, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 114, 290, 275,
	235, 293, 211, 226, 305, 228, 229, 265, 196, 245,
	95, 224, 88, 0, 0, 291, 242, 0, 214, 189,
	221, 190, 212, 239, 82, 210, 277, 248, 227, 0,
	299, 92, 257, 0, 98, 93, 0, 0, 241, 280,
	243, 274, 234, 266, 203, 256, 294, 225, 262, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 259, 288, 223, 261, 264, 188, 258, 0,
	192, 197, 304, 286, 217, 218, 0, 0, 0, 0,
	0, 0, 0, 240, 244, 271, 232, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 0, 255, 0, 0,
	0, 199, 194, 238, 0, 0, 0, 202, 0, 216,
	272, 0, 0, 0, 281, 233, 107, 287, 231, 230,
	295, 268, 0, 278, 213, 222, 79, 220, 97, 263,
	105, 76, 284, 279, 253, 236, 237, 193, 0, 270,
	81, 87, 209, 260, 103, 104, 80, 108, 198, 301,
	77, 186, 300, 94, 185, 102, 285, 254, 250, 195,
	283, 252, 249, 90, 83, 0, 191, 0, 99, 292,
	306, 208, 282, 0, 0, 0, 0, 0, 101, 200,
	86, 206, 207, 204, 205, 246, 247, 296, 297, 298,
	273, 201, 0, 0, 276, 251, 75, 0, 91, 303,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 219,
	302, 269, 267, 289, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 187, 109, 110, 112, 111, 113,
	114, 290, 275, 235, 293, 211, 226, 305, 228, 229,
	265, 196, 245, 95, 224, 88, 0, 0, 291, 242,
	0, 214, 189, 221, 190, 212, 239, 82, 210, 277,
	248, 227, 0, 299, 92, 257, 0, 98, 93, 0,
	0, 241, 280, 243, 274, 234, 266, 203, 256, 294,
	225, 262, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 259, 288, 223, 261, 264,
	188, 258, 0, 192, 197, 304, 286, 217, 218, 0,
	0, 0, 0, 0, 0, 0, 240, 244, 271, 232,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 0,
	255, 0, 0, 0, 199, 194, 238, 0, 0, 0,
	202, 0, 216, 272, 0, 0, 0, 281, 233, 107,
	287, 231, 230, 295, 268, 0, 278, 213, 222, 79,
	220, 97, 263, 105, 76, 284, 279, 253, 236, 237,
	193, 0, 270, 81, 87, 209, 260, 103, 104, 80,
	108, 198, 301, 77, 606, 300, 94, 607, 102, 285,
	254, 250, 195, 283, 252, 249, 90, 83, 0, 191,
	0, 99, 292, 306, 208, 282, 0, 0, 0, 0,
	0, 101, 200, 86, 206, 207, 204, 205, 246, 247,
	296, 297, 298, 273, 201, 0, 0, 276, 251, 75,
	0, 91, 303, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 219, 302, 269, 267, 289, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 290, 275, 235, 293, 211, 226,
	305, 228, 229, 265, 196, 245, 95, 224, 88, 0,
	0, 291, 242, 0, 214, 189, 221, 190, 212, 239,
	82, 210, 277, 248, 227, 0, 299, 92, 257, 0,
	98, 93, 0, 0, 241, 280, 243, 274, 234, 266,
	203, 256, 294, 225, 262, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 259, 288,
	223, 261, 264, 188, 258, 0, 192, 197, 304, 286,
	217, 218, 0, 0, 0, 0, 0, 0, 0, 240,
	244, 271, 232, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 0, 255, 0, 0, 0, 199, 194, 238,
	0, 0, 0, 202, 0, 216, 272, 0, 0, 0,
	281, 233, 107, 287, 231, 230, 295, 268, 0, 278,
	213, 222, 79, 220, 97, 263, 105, 76, 284, 279,
	253, 236, 237, 193, 0, 270, 81, 87, 209, 260,
	103, 104, 80, 108, 198, 301, 77, 606, 300, 94,
	607, 102, 285, 254, 250, 195, 283, 252, 249, 90,
	83, 0, 191, 0, 99, 292, 306, 208, 282, 0,
	0, 0, 0, 0, 101, 200, 86, 206, 207, 204,
	205, 246, 247, 296, 297, 298, 273, 201, 0, 0,
	276, 251, 75, 0, 91, 303, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 219, 302, 269, 267, 289,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 114, 290, 275, 235,
	293, 211, 226, 305, 228, 229, 265, 196, 245, 95,
	224, 88, 0, 0, 291, 242, 0, 214, 189, 221,
	190, 212, 239, 82, 210, 277, 248, 227, 0, 299,
	92, 257, 0, 98, 93, 0, 0, 241, 280, 243,
	274, 234, 266, 203, 256, 294, 225, 262, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 259, 288, 223, 261, 264, 188, 258, 0, 192,
	197, 304, 286, 217, 218, 0, 0, 0, 0, 0,
	0, 0, 240, 244, 271, 232, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 0, 255, 0, 0, 0,
	199, 194, 238, 0, 0, 0, 202, 0, 216, 272,
	0, 0, 0, 281, 233, 107, 287, 231, 230, 295,
	268, 0, 278, 213, 222, 79, 220, 97, 263, 105,
	76, 284, 279, 253, 236, 237, 193, 0, 270, 81,
	87, 209, 260, 103, 104, 80, 108, 198, 301, 77,
	606, 300, 94, 607, 102, 285, 254, 250, 195, 283,
	252, 249, 90, 83, 0, 191, 0, 99, 292, 306,
	208, 282, 0, 0, 0, 0, 0, 101, 200, 86,
	206, 207, 204, 205, 246, 247, 296, 297, 298, 273,
	201, 0, 0, 276, 251, 75, 0, 91, 303, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 219, 302,
	269, 267, 289, 0, 84, 100, 0, 0, 0, 0,
	95, 89, 88, 0, 109, 110, 112, 111, 113, 114,
	363, 0, 0, 0, 82, 362, 0, 0, 0, 0,
	399, 92, 0, 0, 98, 93, 0, 0, 0, 0,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 412, 380, 379, 381, 382, 383, 384, 0,
	0, 78, 385, 386, 387, 0, 0, 0, 360, 373,
	0, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 370, 371, 765, 0, 0, 0, 410, 0, 372,
	0, 0, 369, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 87, 0, 0, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 90, 83, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 400, 409, 406, 407, 404, 405, 403, 402, 401,
	411, 394, 395, 397, 0, 396, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 95, 89, 88, 0, 109, 110, 112, 111, 113,
	114, 363, 0, 0, 0, 82, 362, 0, 0, 0,
	0, 399, 92, 0, 0, 98, 93, 0, 0, 0,
	0, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 354, 412, 380, 379, 381, 382, 383, 384,
	0, 0, 78, 385, 386, 387, 0, 0, 0, 360,
	373, 0, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 370, 371, 0, 0, 0, 0, 410, 0,
	372, 0, 0, 369, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	408, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 0,
	0, 77, 0, 0, 94, 0, 102, 0, 0, 0,
	0, 0, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 86, 400, 409, 406, 407, 404, 405, 403, 402,
	401, 411, 394, 395, 397, 0, 396, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 24, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 95, 89, 88, 0, 109, 110, 112, 111,
	113, 114, 363, 0, 0, 0, 82, 362, 0, 0,
	0, 0, 399, 92, 0, 0, 98, 93, 0, 0,
	0, 0, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 412, 380, 379, 381, 382, 383,
	384, 0, 0, 78, 385, 386, 387, 0, 0, 0,
	360, 373, 0, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 370, 371, 0, 0, 0, 0, 410,
	0, 372, 0, 0, 369, 374, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 408, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 86, 400, 409, 406, 407, 404, 405, 403,
	402, 401, 411, 394, 395, 397, 0, 396, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 95, 89, 88, 0, 109, 110, 112,
	111, 113, 114, 363, 0, 0, 0, 82, 362, 0,
	0, 0, 0, 399, 92, 0, 0, 98, 93, 0,
	0, 0, 0, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 412, 380, 379, 381, 382,
	383, 384, 0, 0, 78, 385, 386, 387, 0, 0,
	0, 360, 373, 0, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 370, 371, 0, 0, 0, 0,
	410, 0, 372, 0, 0, 369, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 86, 400, 409, 406, 407, 404, 405,
	403, 402, 401, 411, 394, 395, 397, 0, 396, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	95, 0, 88, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 82, 0, 0, 0, 0, 0,
	399, 92, 0, 0, 98, 93, 0, 0, 0, 0,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 412, 380, 379, 381, 382, 383, 384, 0,
	0, 78, 385, 386, 387, 0, 0, 0, 0, 373,
	0, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 370, 371, 0, 0, 0, 0, 410, 0, 372,
	0, 0, 369, 374, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 408,
	0, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 87, 0, 0, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 0, 0, 0,
	0, 0, 0, 90, 83, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 400, 409, 406, 407, 404, 405, 403, 402, 401,
	411, 394, 395, 397, 0, 396, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	95, 0, 88, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 82, 109, 110, 112, 111, 113,
	114, 92, 0, 0, 98, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 522, 521, 531,
	532, 524, 525, 526, 527, 528, 529, 530, 523, 0,
	0, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 95, 0,
	88, 0, 0, 0, 0, 0, 79, 894, 97, 0,
	105, 76, 82, 0, 0, 0, 0, 0, 0, 92,
	81, 87, 98, 93, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 0, 0, 0,
	73, 0, 896, 90, 83, 0, 0, 0, 99, 78,
	0, 0, 0, 0, 510, 509, 0, 0, 101, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 511, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 107, 109, 110, 112, 111, 113,
	114, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 0, 0, 95, 0, 88, 81, 87,
	71, 0, 103, 104, 80, 108, 0, 0, 77, 82,
	0, 94, 0, 102, 0, 0, 92, 0, 0, 98,
	93, 90, 83, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 73, 86, 0,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 114, 0,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 70,
	0, 107, 0, 95, 0, 88, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 82, 0, 0,
	0, 0, 0, 0, 92, 81, 87, 98, 93, 103,
	104, 80, 108, 0, 0, 77, 0, 0, 94, 0,
	102, 0, 53, 0, 0, 139, 0, 0, 90, 83,
	0, 0, 0, 99, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 86, 0, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 107,
	109, 110, 112, 111, 113, 114, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 0, 77, 0, 0, 94, 0, 102, 0,
	0, 0, 0, 0, 0, 0, 90, 83, 0, 0,
	95, 99, 88, 0, 0, 0, 0, 0, 0, 1072,
	0, 101, 0, 86, 82, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 98, 93, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 139, 0, 1074, 0, 0, 0, 84, 100,
	0, 78, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 95, 0,
	88, 0, 0, 0, 0, 0, 79, 0, 97, 0,
	105, 76, 82, 0, 0, 0, 0, 0, 0, 92,
	81, 87, 98, 93, 103, 104, 80, 108, 0, 0,
	77, 0, 0, 94, 0, 102, 0, 53, 0, 0,
	73, 0, 0, 90, 83, 0, 0, 0, 99, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 91, 0,
	96, 85, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 100, 0, 0, 0,
	0, 0, 89, 0, 107, 109, 110, 112, 111, 113,
	114, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	0, 0, 0, 0, 0, 95, 0, 88, 81, 87,
	0, 0, 103, 104, 80, 108, 0, 0, 77, 82,
	0, 94, 0, 102, 0, 0, 92, 0, 0, 98,
	93, 90, 83, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 73, 86, 0,
	588, 0, 0, 589, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 0, 109, 110, 112, 111, 113, 114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 95, 0, 88, 0, 0, 0, 0,
	0, 79, 0, 97, 0, 105, 76, 82, 436, 0,
	0, 0, 0, 0, 92, 81, 87, 98, 93, 103,
	104, 80, 108, 0, 0, 77, 0, 0, 94, 0,
	102, 0, 0, 0, 0, 73, 0, 435, 90, 83,
	0, 0, 0, 99, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 91, 0, 96, 85, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 100, 0, 0, 0, 0, 0, 89, 0, 107,
	109, 110, 112, 111, 113, 114, 0, 0, 0, 79,
	0, 97, 0, 105, 76, 0, 0, 0, 95, 0,
	88, 0, 0, 81, 87, 0, 0, 103, 104, 80,
	108, 0, 82, 77, 0, 0, 94, 0, 102, 92,
	0, 0, 98, 93, 0, 0, 90, 83, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 101, 1074, 86, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 91, 0, 96, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 100,
	0, 0, 0, 0, 0, 89, 0, 0, 109, 110,
	112, 111, 113, 114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 95, 0, 88, 0,
	0, 0, 0, 0, 79, 0, 97, 0, 105, 76,
	82, 0, 0, 0, 0, 0, 0, 92, 81, 87,
	98, 93, 103, 104, 80, 108, 0, 0, 77, 0,
	0, 94, 0, 102, 0, 53, 0, 0, 139, 0,
	0, 90, 83, 0, 0, 0, 99, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 91, 0, 96, 85,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 100, 0, 0, 0, 0, 0,
	89, 0, 107, 109, 110, 112, 111, 113, 114, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 0, 0,
	0, 95, 0, 88, 0, 0, 81, 87, 0, 0,
	103, 104, 80, 108, 0, 82, 77, 0, 0, 94,
	0, 102, 92, 0, 0, 98, 93, 0, 0, 90,
	83, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 101, 896, 86, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	0, 109, 110, 112, 111, 113, 114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 105, 76, 0, 0, 0, 95, 0, 88, 0,
	0, 81, 87, 0, 0, 103, 104, 80, 108, 425,
	82, 77, 0, 0, 94, 0, 102, 92, 0, 0,
	98, 93, 0, 0, 90, 83, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 101,
	0, 86, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 91,
	0, 96, 85, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 100, 0, 0,
	0, 0, 0, 89, 0, 0, 109, 110, 112, 111,
	113, 114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 95, 0, 88, 0, 0, 0,
	0, 0, 79, 0, 97, 0, 105, 76, 82, 0,
	0, 0, 0, 0, 0, 92, 81, 87, 98, 93,
	103, 104, 80, 108, 0, 0, 77, 0, 0, 94,
	0, 102, 0, 0, 0, 0, 73, 0, 0, 90,
	83, 0, 0, 0, 99, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 91, 0, 96, 85, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 100, 0, 0, 0, 0, 0, 89, 0,
	107, 109, 110, 112, 111, 113, 114, 0, 0, 0,
	79, 0, 97, 0, 105, 76, 0, 0, 0, 95,
	0, 88, 0, 0, 81, 87, 0, 0, 103, 104,
	80, 108, 0, 82, 77, 0, 0, 94, 0, 102,
	92, 0, 0, 98, 93, 0, 0, 90, 83, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 412, 101, 0, 86, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 91, 0, 96, 85, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	100, 0, 0, 0, 0, 0, 89, 0, 0, 109,
	110, 112, 111, 113, 114, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 95, 0, 88,
	0, 0, 0, 0, 0, 79, 0, 97, 0, 105,
	76, 82, 0, 0, 0, 0, 0, 0, 92, 81,
	87, 98, 93, 103, 104, 80, 108, 0, 0, 77,
	0, 0, 94, 0, 102, 0, 0, 0, 0, 139,
	0, 0, 90, 83, 0, 0, 0, 99, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 91, 0, 96,
	85, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 100, 0, 0, 0, 0,
	0, 89, 0, 107, 109, 110, 112, 111, 113, 114,
	0, 0, 0, 79, 0, 97, 0, 105, 76, 0,
	0, 0, 95, 0, 88, 0, 0, 81, 87, 0,
	0, 103, 104, 80, 108, 0, 82, 77, 0, 0,
	94, 0, 102, 92, 0, 0, 98, 93, 0, 0,
	90, 83, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 101, 0, 86, 0, 0,
	0, 0, 0, 78, 24, 51, 26, 27, 0, 0,
	0, 0, 0, 75, 0, 91, 0, 96, 85, 106,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 28, 84, 100, 36, 0, 0, 0, 0, 89,
	0, 0, 109, 110, 112, 111, 113, 114, 0, 0,
	0, 37, 0, 0, 53, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 105, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 87, 0, 0, 103, 104, 80, 108,
	0, 0, 77, 0, 0, 94, 0, 102, 0, 0,
	0, 0, 0, 0, 0, 90, 83, 0, 0, 0,
	99, 0, 30, 31, 32, 0, 34, 0, 0, 0,
	101, 0, 86, 0, 0, 0, 0, 0, 35, 47,
	39, 0, 0, 48, 49, 33, 0, 0, 75, 0,
	91, 0, 96, 85, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 100, 0,
	0, 0, 0, 0, 89, 0, 0, 109, 110, 112,
	111, 113, 114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 41, 42, 0, 44, 43, 0, 0, 0,
	45,
}
var yyPact = [...]int{

	6688, -1000, -173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 744, 766, -1000, -1000, -1000, -1000, -1000, 552,
	5068, 32, -3, 85, 71, 239, 66, 6500, -1000, -1000,
	17, -1000, -152, -1000, -1000, -164, -1000, -1000, -1000, -1000,
	546, -1000, -1000, -1000, -1000, -1000, 732, 740, 562, 709,
	604, -1000, 32, 6500, 755, 1951, -135, 6625, 29, 63,
	29, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 58, -1000, 21, 434, 21,
	6500, 6500, -55, -5, -1000, -1000, -56, -1000, -1000, -1000,
	-60, -1000, -1000, -1000, -1000, -1000, -1000, 6500, -1000, -1000,
	-1000, -1000, -1000, -1000, 345, -1000, -1000, -1000, -1000, 505,
	505, -1000, 6500, 6500, -1000, -1000, -1000, -1000, 433, 673,
	4426, 4426, 744, -1000, 546, -1000, -1000, -1000, 662, -1000,
	-1000, 241, 6159, 670, 123, 6500, 502, 2883, -1000, -1000,
	-1000, 207, 5676, -1000, -1000, -1000, 666, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 738, 737, 466,
	-1000, 1238, -1000, -1000, 6500, 237, 428, 6500, 6500, 6500,
	699, 573, 6500, -1000, -1000, 754, 6500, 6500, -1000, -1000,
	752, 753, -1000, -1000, -1000, -1000, -1000, 752, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4426, -1000,
	-1000, 136, -1000, -1000, -1000, -1000, 762, 160, 312, -1000,
	4426, 1413, 505, 505, -1000, -1000, 107, -1000, -1000, 4633,
	4633, 4633, 4633, 4633, 4633, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 505, 119,
	-1000, 4215, 505, 505, 505, 505, 505, 505, 4426, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, -1000, -1000, 503, -1000, 342, 732, 433, 604,
	5568, 587, -1000, -1000, 513, 6500, -1000, 6392, 3582, 750,
	2883, 502, 4426, 135, -1000, -1000, -1000, -1000, -129, 505,
	49, 129, 299, -44, -1000, -1000, 528, -1000, 528, 528,
	528, 528, -21, -21, -21, -21, -1000, -1000, -1000, -1000,
	-1000, 565, -1000, 528, 528, 528, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 563, 563, 563, 538, 538, 672,
	690, 572, -1000, 186, 501, -1000, -1000, 6500, -1000, 732,
	-58, -1000, -1000, 252, 6500, 6500, -1000, -1000, -1000, -1000,
	432, 219, -1000, 6500, -1000, -1000, -1000, -1000, 622, 4426,
	4426, 306, 4426, 4426, 179, 4633, 340, 233, 4633, 4633,
	4633, 4633, 4633, 4633, 4633, 4633, 4633, 4633, 4633, 4633,
	4633, 4633, 4633, 339, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 426, -1000, 546, 512, 512, 141, 141, 141,
	141, 141, 4833, 1557, 3349, 433, 4215, 3793, 3793, 4426,
	4426, 3793, 714, 218, 219, 6267, -1000, 433, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3793, 3793, 3793, 3793, 4426,
	-1000, -1000, -1000, 673, -1000, 714, 739, -1000, 652, 651,
	3793, -1000, 570, 6392, 505, -1000, 5441, -1000, 559, -1000,
	205, -1000, 118, -1000, -1000, -1000, -1000, -1000, 744, 4426,
	-1000, 219, -1000, 424, 505, 505, 6625, -1000, 49, -1000,
	-1000, -1000, -1000, -1000, -1000, 196, 196, -25, -1000, -1000,
	196, -1000, -1000, -1000, 554, 722, 189, 419, 143, -1000,
	-1000, -1000, 299, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 244, 51, -1000, 720, -1000, 719, 367, 761,
	-49, -1000, -1000, 311, -21, -21, -1000, -1000, 135, 665,
	135, 135, 135, 364, -1000, -1000, -1000, -1000, 310, -1000,
	-1000, -1000, 288, -1000, -1000, 672, -1000, 35, -1000, 6500,
	-1000, 151, 204, 37, 16, 15, 11, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6500, -1000, -1000, 362, -1000,
	-1000, -1000, 357, 4426, -1000, 252, -1000, 4426, -1000, -1000,
	629, 179, 194, -1000, -1000, 334, -1000, -1000, 219, 219,
	1381, -1000, -1000, -1000, -1000, 340, 4633, 4633, 4633, 1261,
	1381, 1445, 578, 1364, 141, 289, 289, 132, 132, 132,
	132, 132, 553, 553, -1000, -1000, -1000, 433, -1000, -1000,
	-1000, 433, 3793, 500, -1000, -1000, 4941, 117, 505, 116,
	-1000, -1000, 433, 407, 407, 168, 309, 407, 3793, 268,
	-1000, 4426, 433, -1000, 407, 433, 407, 407, -1000, -1000,
	6500, -1000, -1000, -1000, -1000, 522, -1000, 674, 476, 490,
	-1000, -1000, 4004, 433, 423, 112, 744, 6392, 4426, 3349,
	732, 219, -1000, 6625, 6625, 433, -1000, 353, -1000, 296,
	196, -1000, 664, 283, 6267, -1000, 417, -1000, -1000, 402,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-73, -1000, -1000, 470, 135, 135, -1000, 176, -1000, -1000,
	-1000, 413, -1000, 497, 409, -1000, 196, 196, 2184, -1000,
	6500, -1000, -1000, -1000, 401, -24, 552, 382, 6625, -1000,
	-1000, -1000, -1000, 219, -1000, 219, -1000, -1000, -1000, -1000,
	-1000, -1000, 1261, 1381, 1322, -1000, 4633, 4633, -1000, -1000,
	407, 3793, -1000, -1000, 6034, -1000, -1000, 2650, 3793, 3116,
	-1000, -1000, -1000, 56, 339, 56, -93, 548, 214, -1000,
	4426, 266, -1000, -1000, -1000, -1000, -1000, -1000, 750, 5909,
	718, -1000, 505, -1000, -1000, 545, 6267, 6267, 732, -1000,
	219, -1000, -1000, 433, 433, 2184, -1000, -1000, -1000, -1000,
	296, -1000, -1000, 395, -1000, 528, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 351, 271, -1000, 255, 403,
	185, -1000, -1000, -1000, -1000, -1000, -1000, 663, -1000, -1000,
	-1000, -1000, 4633, 1381, 1381, -1000, -1000, -1000, -1000, 104,
	433, -1000, 433, 528, 528, -1000, 528, 538, -1000, 528,
	-1, 528, -2, 433, 433, 505, -90, -1000, 219, 4426,
	747, 492, 541, -1000, -1000, -1000, 706, 5176, 5333, 760,
	-1000, 505, -1000, 546, 97, -1000, -1000, 2184, 505, -1000,
	-1000, -99, 6267, -1000, -1000, 469, 463, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 380, 1381, 2417, -1000, -1000, -1000,
	80, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4633,
	433, 348, 219, 741, 736, 5909, 5909, 5909, 5909, -1000,
	598, 596, -1000, 589, 585, 621, 6500, -1000, 391, 5176,
	96, -1000, 5801, -1000, -1000, 6392, 490, 433, 6267, -1000,
	-134, 727, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -7,
	-1000, -1000, -1000, 4426, 4426, 541, 569, 667, -1000, -1000,
	-1000, -1000, 595, -1000, 592, -1000, -1000, -1000, -1000, -1000,
	47, 46, 41, -1000, 487, -1000, -1000, 387, -1000, 371,
	725, 433, 57, -104, 219, 477, 4426, 4426, -1000, -1000,
	505, 505, 505, -134, 2184, 635, -1000, -1000, 625, -97,
	-108, 219, 219, 6267, 6267, 6267, -1000, -1000, 157, -1000,
	607, -1000, 379, -1000, 379, 379, 505, -102, -1000, 6267,
	-1000, -1000, -1000, -105, -1000, -109, -1000,
}
var yyPgo = [...]int{

	0, 963, 962, 954, 953, 951, 949, 938, 26, 526,
	935, 922, 919, 918, 915, 911, 909, 908, 901, 899,
	898, 897, 896, 893, 892, 175, 889, 887, 886, 57,
	885, 62, 884, 883, 882, 22, 53, 30, 21, 85,
	881, 24, 13, 7, 880, 878, 9, 877, 60, 876,
	63, 875, 873, 44, 872, 870, 868, 3, 23, 866,
	865, 864, 863, 67, 756, 862, 860, 858, 855, 853,
	852, 40, 2, 14, 8, 18, 850, 46, 10, 849,
	47, 848, 847, 846, 845, 17, 842, 56, 841, 32,
	54, 840, 39, 6, 36, 129, 61, 839, 836, 834,
	348, 833, 210, 342, 831, 45, 830, 829, 25, 0,
	12, 16, 29, 828, 42, 879, 34, 5, 823, 821,
	1185, 1, 28, 819, 20, 817, 813, 812, 811, 810,
	809, 259, 808, 807, 806, 805, 804, 802, 801, 800,
	19, 58, 15, 798, 48, 33, 49, 797, 796, 795,
	59, 41, 794, 793, 792, 790, 789, 37, 788, 55,
	35, 787, 786, 785, 51, 784, 11, 783, 781, 780,
	50, 778, 777, 52, 4, 775, 774, 773, 105, 172,
	772, 135,
}
var yyR1 = [...]int{

	0, 176, 177, 177, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 123,
	123, 175, 175, 174, 16, 16, 16, 16, 16, 16,
	171, 171, 172, 172, 173, 173, 146, 146, 145, 145,
	144, 144, 143, 143, 147, 147, 147, 19, 160, 162,
	162, 163, 163, 164, 164, 164, 164, 164, 139, 142,
	142, 135, 136, 137, 138, 138, 161, 161, 161, 157,
	114, 114, 125, 125, 125, 168, 168, 169, 169, 170,
	170, 170, 170, 170, 170, 170, 128, 128, 126, 126,
	126, 126, 126, 126, 126, 127, 127, 127, 127, 127,
	129, 129, 129, 129, 129, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 156,
	156, 131, 131, 150, 150, 151, 151, 151, 148, 148,
	149, 149, 152, 152, 132, 132, 132, 132, 132, 133,
	153, 140, 140, 140, 141, 141, 154, 154, 155, 155,
	134, 158, 158, 165, 165, 165, 165, 165, 159, 159,
	167, 167, 166, 17, 17, 17, 17, 17, 17, 17,
	17, 18, 18, 18, 54, 54, 1, 20, 2, 3,
	4, 4, 5, 5, 5, 5, 6, 6, 6, 6,
	6, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 34, 34, 50,
	50, 51, 51, 52, 52, 53, 53, 53, 24, 22,
	23, 23, 23, 23, 180, 25, 26, 26, 27, 27,
	27, 31, 31, 31, 29, 29, 30, 30, 37, 37,
	36, 36, 38, 38, 38, 38, 113, 113, 113, 112,
	112, 40, 40, 41, 41, 42, 42, 43, 43, 43,
	55, 44, 44, 44, 44, 119, 119, 118, 118, 118,
	117, 117, 45, 45, 45, 45, 46, 46, 46, 46,
	47, 47, 49, 49, 48, 48, 56, 56, 56, 56,
	57, 57, 58, 58, 39, 39, 39, 39, 39, 39,
	39, 101, 101, 60, 60, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 70, 70, 70, 70, 70,
	70, 61, 61, 61, 61, 61, 61, 61, 35, 35,
	71, 71, 71, 77, 72, 72, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 68, 68, 68, 66,
	66, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 67, 67, 67, 181, 181, 69, 69,
	69, 69, 32, 32, 32, 32, 32, 122, 122, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 81, 81, 33, 33, 79, 79, 80, 82,
	82, 78, 78, 78, 63, 63, 63, 63, 63, 63,
	63, 65, 65, 65, 83, 83, 84, 84, 85, 85,
	86, 86, 87, 88, 88, 88, 89, 89, 89, 89,
	90, 90, 90, 62, 62, 62, 62, 62, 62, 91,
	91, 91, 91, 92, 92, 73, 73, 75, 75, 74,
	76, 93, 93, 94, 95, 95, 96, 96, 98, 98,
	98, 97, 97, 97, 99, 99, 102, 102, 103, 103,
	100, 100, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 105, 105, 105, 106, 106, 107, 107, 107,
	110, 110, 111, 111, 115, 115, 116, 116, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 178,
	179, 120, 121, 121, 121,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 1, 3, 5, 2, 9, 12, 8, 5, 7,
	0, 1, 1, 2, 4, 4, 0, 1, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 4, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 1,
	1, 3, 3, 4, 1, 1, 1, 3, 3, 3,
	1, 1, 3, 1, 1, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 4, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 1,
	0, 1, 1, 2, 2, 2, 2, 2, 2, 3,
	1, 0, 3, 3, 0, 2, 2, 1, 2, 1,
	2, 4, 7, 2, 3, 2, 2, 3, 1, 1,
	1, 3, 2, 6, 7, 7, 7, 9, 7, 7,
	7, 4, 5, 4, 1, 3, 3, 3, 2, 2,
	3, 4, 2, 3, 2, 2, 4, 4, 3, 6,
	4, 6, 5, 5, 3, 3, 5, 6, 3, 3,
	3, 5, 3, 3, 3, 3, 3, 0, 3, 0,
	2, 0, 1, 1, 1, 0, 2, 2, 4, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 3, 5, 5, 3, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	1, 3, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -176, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 214, 132,
	221, 224, 225, 228, 227, 232, 29, 131, 135, 136,
	-178, 7, 197, 56, -177, 238, -85, 14, -27, 5,
	-25, -180, -25, -25, -25, -25, -160, 56, 189, -107,
	121, 22, -110, 59, -109, 203, 138, 157, 68, 133,
	153, 147, 31, 171, 222, 208, 187, 148, 19, 229,
	170, 205, 38, 42, 160, 17, 207, 135, 41, 175,
	223, 185, 162, 151, 152, 137, 209, 123, 154, 232,
	233, 235, 234, 236, 237, -100, 125, 121, 122, 189,
	121, 121, 183, 114, 178, 216, -51, 218, 219, 185,
	121, 220, 181, 217, 180, 59, 35, 121, -115, 59,
	-109, -120, -120, 62, 207, -120, 226, -120, -120, 233,
	235, 234, 236, 237, -120, -120, -120, -120, -8, -89,
	16, 15, -11, -9, -178, 6, 24, 25, -31, 43,
	44, -26, -100, -48, -115, 10, -95, -123, -96, 230,
	229, -111, -98, -110, -108, 161, 158, 231, 74, 26,
	28, 173, 77, 144, 109, 166, 15, 78, 155, 108,
	186, 198, 114, 51, 190, 191, 188, 189, 178, 149,
	32, 9, 29, 131, 25, 102, 116, 81, 82, 216,
	134, 27, 132, 71, 18, 54, 10, 35, 12, 13,
	126, 125, 93, 122, 49, 7, 142, 143, 110, 30,
	90, 45, 23, 47, 91, 16, 192, 193, 34, 169,
	165, 202, 168, 141, 164, 104, 52, 39, 75, 69,
	150, 72, 55, 136, 73, 14, 50, 219, 128, 218,
	146, 92, 117, 197, 48, 6, 201, 33, 130, 140,
	46, 121, 179, 167, 139, 163, 80, 124, 70, 220,
	5, 22, 176, 8, 53, 127, 194, 195, 196, 37,
	159, 156, 217, 206, 79, 11, 177, 210, 215, -161,
	-157, -114, 59, -109, -103, 126, 122, -103, 121, -102,
	126, 59, -102, -48, -48, 182, 121, 189, -120, -120,
	179, -52, 186, 187, -120, -120, -120, 185, -120, -120,
	-120, -120, -120, -48, -120, 62, -120, -74, -178, -74,
	-120, -48, -48, -179, 58, -90, 18, 34, -39, -59,
	75, -64, 32, 27, -63, -60, -78, -76, -77, 109,
	98, 99, 106, 76, 110, -68, -66, -67, -69, 61,
	60, 62, 63, 64, 65, 69, 70, 71, -110, -115,
	-74, -178, 47, 48, 198, 199, 202, 200, 78, 37,
	188, 196, 195, 194, 192, 193, 190, 191, 126, 189,
	104, 197, 59, -109, -86, -87, -39, -85, -8, -25,
	39, -29, 25, 67, -49, 30, -48, 33, 111, -48,
	57, -95, 83, -97, -110, 61, 32, 33, 15, 15,
	58, 57, -125, -128, -130, -129, -126, -127, 155, 156,
	109, 159, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 133, 151, 152, 153, 154, 138, 139, 140,
	141, 142, 143, 144, 146, 147, 148, 149, 150, -115,
	75, 59, -48, -48, -54, -48, 27, 55, -115, -34,
	10, -48, -48, -50, 10, 10, -50, -120, -120, -120,
	-72, -39, -120, -105, 124, 26, -120, 8, 93, 74,
	73, 90, 57, 17, -39, -61, 93, 75, 91, 92,
	77, 95, 94, 105, 98, 99, 100, 101, 102, 103,
	104, 96, 97, 108, 83, 84, 85, 86, 87, 88,
	89, -101, -178, -77, -178, 112, 113, -64, -64, -64,
	-64, -64, -64, -178, 111, -8, -178, -178, -178, -178,
	-178, -178, -178, -81, -39, -178, -181, -178, -181, -181,
	-181, -181, -181, -181, -181, -178, -178, -178, -178, 57,
	-88, 28, 29, -89, -179, -31, -65, -110, 62, 65,
	-30, 46, -62, 33, 37, -8, -178, -48, -93, -94,
	-78, -110, -115, -116, -115, -108, 158, 161, -58, 11,
	-96, -39, -141, 108, 212, 213, -178, -162, -163, -164,
	-135, -136, -137, -138, -139, 68, 222, -146, 229, 223,
	173, 32, -157, -158, -165, 128, 22, -159, 19, 122,
	23, -168, -169, -170, -152, -132, -153, -154, -155, -134,
	-133, 69, 75, 32, 173, 128, 23, 22, 68, 55,
	-148, 176, -131, 56, -131, -131, -131, -131, -140, 158,
	-140, -140, -140, 56, -131, -131, -131, -150, 56, -150,
	-150, -151, 56, -151, -171, -172, -173, -146, 27, 55,
	-104, 117, 222, 198, 119, 116, 120, 115, 173, 158,
	68, 32, 14, 209, 59, 57, -48, -89, 184, -120,
	-120, -53, 91, 11, -48, -48, -120, 57, -179, -48,
	41, -39, -39, -70, 69, 75, 70, 71, -39, -39,
	-64, -71, -74, -77, 66, 93, 91, 92, 77, -64,
	-64, -64, -64, -64, -64, -64, -64, -64, -64, -64,
	-64, -64, -64, -64, -122, 59, 61, 59, -63, -63,
	-110, -37, 25, -36, -38, 100, -39, -115, -111, -116,
	-108, -179, -8, -36, -36, -39, -39, -36, -29, -79,
	-80, 79, -110, -179, -36, -37, -36, -36, -87, -90,
	-99, 18, 10, 37, 37, -36, -92, 55, -93, -73,
	-75, -74, -178, -8, -91, -110, -58, 57, 83, 111,
	-85, -39, 59, -178, -178, -114, -164, -145, 83, -145,
	-144, 161, 158, -145, 56, 23, -159, 59, 59, -159,
	-170, 69, 61, 62, 63, 69, 188, 23, 23, 61,
	8, -149, 177, 62, -140, -140, -141, 33, -141, -141,
	-141, -156, 61, 62, 62, -173, 108, -144, -48, -120,
	-105, -106, 122, 23, 83, 124, 129, 129, 129, -48,
	-120, 61, 61, -39, -53, -39, -120, 42, 69, 70,
	71, -71, -64, -64, -64, -35, 134, 74, -179, -179,
	-36, 57, -113, -112, 26, -110, 61, 111, -178, 111,
	-179, -179, -179, 57, 127, 26, -179, -36, -82, -80,
	81, -39, -179, -179, -179, -179, -179, -48, -40, 10,
	31, -92, 57, -179, -179, -179, 57, 111, -85, -94,
	-39, -111, -89, -114, -114, -179, 61, -142, 59, 61,
	-145, 33, 62, -167, -166, -110, 59, 59, 188, 58,
	-141, -141, 59, 109, 58, 57, 57, 58, 57, -145,
	-145, -121, -178, -111, -48, -120, 59, 158, -160, 59,
	-157, -35, 74, -64, -64, -179, -38, -112, 100, -116,
	-37, -111, -124, 109, 155, 133, 153, 149, 170, 160,
	175, 151, 176, -122, -124, 203, -85, 82, -39, 80,
	-58, -41, -42, -43, -44, -55, -77, -178, -48, 23,
	-75, 37, -8, -178, -110, -110, -89, -179, -179, -121,
	-142, 58, 57, -131, 61, 62, 62, -143, 59, 32,
	-147, 59, 109, 32, 33, -64, 111, -179, -179, -131,
	-131, -131, -151, -131, 143, -131, 143, -179, -179, -178,
	-33, 201, -39, -83, 12, 57, -45, -46, -47, 45,
	49, 51, 46, 47, 48, 52, -119, 26, -41, -178,
	-118, -117, 26, -115, 61, 8, -73, -8, 111, -121,
	-178, 206, -166, 58, 58, 59, 100, -140, 59, -64,
	-179, 61, -84, 13, 15, -42, -43, -42, -43, 45,
	45, 45, 50, 45, 50, 45, -46, -115, -179, -56,
	53, 125, 54, -117, -93, -179, -110, -175, -174, 210,
	20, -32, 93, 206, -39, -72, 55, 55, 45, 45,
	122, 122, 122, 57, -179, 59, 21, -179, 204, 52,
	207, -39, -39, -178, -178, -178, -174, -121, 37, 42,
	205, 208, -57, -110, -57, -57, 93, 42, -179, 57,
	-179, -179, -74, 206, -110, 207, 208,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 458, 0, 244, 244, 244, 244, 244, 0,
	527, 510, 0, 0, 0, 231, 0, 0, 701, 701,
	0, 701, 0, 701, 701, 0, 701, 701, 701, 701,
	0, 33, 34, 699, 1, 3, 466, 0, 0, 248,
	251, 246, 510, 0, 0, 0, 44, 0, 508, 0,
	508, 528, 529, 530, 531, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 0, 511, 506, 0, 506,
	0, 0, 0, 0, 701, 701, 0, 701, 701, 701,
	0, 701, 701, 701, 701, 701, 232, 0, 239, 534,
	535, 198, 199, 701, 0, 202, 701, 204, 205, 0,
	0, 701, 0, 0, 240, 241, 242, 243, 27, 470,
	0, 0, 458, 29, 0, 244, 249, 250, 254, 252,
	253, 245, 0, 0, 304, 0, 37, 0, 494, 39,
	-2, 0, 0, 532, 533, -2, 549, 500, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 0, 0, 0,
	86, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 227, 0, 0, 214, 215,
	229, 0, 233, 234, 218, 219, 220, 229, 222, 223,
	224, 225, 226, 701, 200, 701, 203, 701, 0, 701,
	208, 522, 701, 28, 700, 23, 0, 0, 467, 314,
	0, 319, 321, 0, 356, 357, 358, 359, 360, 0,
	0, 0, 0, 0, 0, 382, 383, 384, 385, 444,
	445, 446, 447, 448, 449, 450, 323, 324, 441, 0,
	490, 0, 0, 0, 0, 0, 0, 0, 432, 0,
	406, 406, 406, 406, 406, 406, 406, 406, 0, 0,
	0, 0, -2, -2, 459, 460, 463, 466, 27, 251,
	0, 256, 255, 247, 0, 0, 303, 0, 0, 312,
	0, 38, 0, 164, 501, 502, 503, 499, 0, 0,
	-2, 0, 95, 148, 93, 94, 141, 107, 141, 141,
	141, 141, 161, 161, 161, 161, 133, 134, 135, 136,
	137, 0, 120, 141, 141, 141, 124, 108, 109, 110,
	111, 112, 113, 114, 143, 143, 143, 145, 145, -2,
	0, 0, 67, 0, 191, 194, 507, 0, 193, 466,
	0, 701, 701, 235, 0, 0, 701, 238, 201, 206,
	0, 354, 207, 0, 523, 524, 210, 471, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 342, 343, 344, 345, 346,
	347, 320, 0, 334, 0, 0, 0, 376, 377, 378,
	379, 380, 0, 258, 0, 27, 0, 0, 0, 0,
	0, 0, 254, 0, 433, 0, 398, 0, 399, 400,
	401, 402, 403, 404, 405, 0, 258, 0, 0, 0,
	462, 464, 465, 470, 30, 254, 0, 451, 0, 0,
	0, 257, 483, 0, 0, -2, 0, 302, 312, 491,
	0, 441, 0, 305, 536, 537, 549, 550, 458, 0,
	495, 496, 497, 0, 0, 0, 0, 68, -2, 71,
	73, 74, 75, 76, 77, 58, 58, 0, 84, 85,
	58, 57, 87, 88, 0, 0, 0, 0, 672, 178,
	179, 89, 96, 97, 99, 100, 101, 102, 103, 104,
	105, 152, 0, 0, 160, 0, 167, 169, 0, 0,
	150, 149, 106, 0, 161, 161, 127, 128, 164, 0,
	164, 164, 164, 0, 121, 122, 123, 115, 0, 116,
	117, 118, 0, 119, 48, -2, 52, 0, 509, 0,
	701, 522, 0, 519, 0, 517, 0, 512, 513, 514,
	515, 516, 518, 520, 521, 0, 192, 701, 0, 212,
	213, 216, 0, 0, 230, 235, 221, 0, 489, 701,
	0, 315, 316, 318, 335, 0, 337, 339, 468, 469,
	325, 326, 350, 351, 352, 0, 0, 0, 0, 348,
	330, 0, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 372, 375, 417, 418, 0, 373, 374,
	381, 0, 0, 259, 260, 262, 266, 0, 442, 0,
	-2, 353, 27, 0, 0, 0, 0, 0, 0, 439,
	436, 0, 0, 407, 0, 0, 0, 0, 461, 24,
	0, 504, 505, 452, 453, 271, 31, 0, 483, 473,
	485, 487, 0, 27, 0, 479, 458, 0, 0, 0,
	466, 313, 165, 0, 0, 0, 72, 0, 59, 0,
	58, 60, 0, 0, 0, 173, 0, 175, 176, 0,
	98, 153, 154, 155, 156, 157, 158, 166, 168, 170,
	0, 92, 151, 0, 164, 164, 129, 0, 130, 131,
	132, 0, 139, 0, 0, 53, 58, 58, 702, 183,
	0, 701, 525, 526, 0, 0, 0, 0, 0, 195,
	211, 228, 236, 237, 217, 355, 209, 472, 336, 338,
	340, 327, 348, 331, 0, 328, 0, 0, 322, 386,
	0, 0, 263, 267, 0, 269, 270, 0, 258, 0,
	-2, 389, 390, 0, 0, 0, 0, 458, 0, 437,
	0, 0, 397, 408, 409, 410, 411, 25, 312, 0,
	0, 32, 0, 488, -2, 0, 0, 0, 466, 492,
	493, 442, 36, 0, 0, 702, 81, 82, 79, 80,
	0, 61, 78, 0, 180, 141, 174, 177, 159, 142,
	125, 126, 162, 163, 138, 0, 0, 146, 0, 0,
	0, 49, 703, 704, 184, 185, 186, 0, 188, 189,
	190, 329, 0, 349, 332, 387, 261, 268, 264, 0,
	0, 443, 0, 141, 141, 422, 141, 145, 425, 141,
	427, 141, 430, 0, 0, 0, 434, 396, 440, 0,
	454, 272, 273, 275, 276, 277, 285, 0, 287, 0,
	486, 0, -2, 0, 481, 480, 35, 702, 0, 47,
	83, 171, 0, 182, 140, 0, 0, 54, 62, 63,
	55, 64, 65, 66, 0, 333, 0, 388, 391, 419,
	161, 423, 424, 426, 428, 429, 431, 393, 392, 0,
	0, 0, 438, 456, 0, 0, 0, 0, 0, 292,
	0, 0, 295, 0, 0, 0, 0, 286, 0, 0,
	306, 288, 0, 290, 291, 0, 476, 27, 0, 45,
	0, 0, 181, 144, 147, 187, 265, 420, 421, 412,
	395, 435, 26, 0, 0, 274, 281, 0, 284, 293,
	294, 296, 0, 298, 0, 300, 301, 278, 279, 280,
	0, 0, 0, 289, 484, -2, 482, 0, 41, 0,
	0, 0, 0, 0, 457, 455, 0, 0, 297, 299,
	0, 0, 0, 0, 702, 0, 172, 394, 0, 0,
	0, 282, 283, 0, 0, 0, 42, 46, 0, 413,
	0, 416, 0, 310, 0, 0, 0, 414, 307, 0,
	308, 309, 43, 0, 311, 0, 415,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 238,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:314
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:319
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:320
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:324
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:348
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:356
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:367
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:373
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:377
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:394
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:405
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:417
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:421
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:433
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:439
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:443
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:449
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:453
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:459
		{
			yyVAL.partitionDefinitions = []*PartitionDefinition{yyDollar[1].partitionDefinition}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:463
		{
			yyVAL.partitionDefinitions = append(yyDollar[1].partitionDefinitions, yyDollar[3].partitionDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:469
		{
			yyVAL.partitionDefinition = &PartitionDefinition{Backend: string(yyDollar[2].bytes), Row: yyDollar[5].valTuple}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:475
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:481
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with PARTITION")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:494
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.String()
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableList
			yyDollar[1].ddl.PartitionOptions = yyDollar[10].partitionDefinitions
			yyVAL.statement = yyDollar[1].ddl
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:503
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.String()
			if yyDollar[2].TableSpec.Options.Type == GlobalTableType || yyDollar[2].TableSpec.Options.Type == SingleTableType {
				yylex.Error("SINGLE or GLOBAL should not be used simultaneously with DISTRIBUTED")
				return 1
			} else {
				yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			}
			yyVAL.statement = yyDollar[1].ddl
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:516
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:524
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:530
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:534
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:544
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:550
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:557
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:565
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:567
		{
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:570
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:572
		{
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:576
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:580
		{
			yyVAL.str = "character set"
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:586
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:590
		{
			yyVAL.str = "default"
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:596
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:604
		{
			yyVAL.str = "default"
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:610
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:621
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec

			if len(yyDollar[4].TableOptionListOpt.TblOptList) != 0 {
				if str := yyDollar[4].TableOptionListOpt.CheckIfTableOptDuplicate(); str != "" {
					yylex.Error(str)
					return 1
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionComment); val != nil {
					yyVAL.TableSpec.Options.Comment = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionEngine); val != nil {
					yyVAL.TableSpec.Options.Engine = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionCharset); val != nil {
					yyVAL.TableSpec.Options.Charset = String(val)
				}
				if val := yyDollar[4].TableOptionListOpt.GetTableOptValByType(TableOptionTableType); val != nil {
					yyVAL.TableSpec.Options.Type = String(val)
				}
			}
			if yyVAL.TableSpec.Options.Type == "" {
				yyVAL.TableSpec.Options.Type = NormalTableType
			}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:648
		{
			yyVAL.TableOptionListOpt.TblOptList = []*TableOption{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.TableOptionListOpt.TblOptList = yyDollar[1].TableOptionList
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:658
		{
			yyVAL.TableOptionList = append(yyVAL.TableOptionList, yyDollar[1].tableOption)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:662
		{
			yyVAL.TableOptionList = append(yyDollar[1].TableOptionList, yyDollar[2].tableOption)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionComment,
				Val:  yyDollar[1].optVal,
			}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:675
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionEngine,
				Val:  yyDollar[1].optVal,
			}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionCharset,
				Val:  yyDollar[1].optVal,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:689
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionTableType,
				Val:  yyDollar[1].optVal,
			}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:696
		{
			yyVAL.tableOption = &TableOption{
				Type: TableOptionAutoInc,
				Val:  yyDollar[1].optVal,
			}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:705
		{
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:710
		{
			// Normal str as a identify, without quote
			yyVAL.optVal = NewStrValWithoutQuote(yyDollar[1].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:715
		{
			// Str with Quote, it will be parsed by Lex begin with quote \' or \"
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.optVal = NewStrVal(yyDollar[3].bytes)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:728
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:734
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(GlobalTableType))
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:744
		{
			yyVAL.optVal = NewStrValWithoutQuote([]byte(SingleTableType))
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:750
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:755
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:759
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:765
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:788
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:801
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:807
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:811
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:831
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:873
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.optVal = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1062
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1100
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1112
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1116
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1122
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1150
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1199
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1218
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1222
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1238
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1248
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1253
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1262
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 189:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1281
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1289
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1294
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &Xa{}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.statement = &Explain{}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1382
		{
			yyVAL.statement = &Radon{Action: ProgressStr, Table: yyDollar[3].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1397
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1401
		{
			yyVAL.statement = &Show{Type: ShowDatabasesStr}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.statement = &Show{Type: ShowEnginesStr}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowTablesStr, Database: yyDollar[4].tableName, Filter: yyDollar[5].showFilter}
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.statement = &Show{Full: yyDollar[2].str, Type: ShowColumnsStr, Table: yyDollar[5].tableName, Filter: yyDollar[6].showFilter}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.statement = &Show{Type: ShowProcesslistStr}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1421
		{
			yyVAL.statement = &Show{Type: ShowQueryzStr}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: ShowTxnzStr}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: ShowVersionsStr}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: ShowUnsupportedStr}
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1454
		{
			yyVAL.str = ""
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1458
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.tableName = TableName{}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1477
		{
			yyVAL.str = "full "
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1487
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.showFilter = nil
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1519
		{
			yyVAL.statement = &OtherRead{}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1523
		{
			yyVAL.statement = &OtherRead{}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1536
		{
			setAllowComments(yylex, true)
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1546
		{
			yyVAL.bytes2 = nil
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1550
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.str = UnionStr
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.str = UnionAllStr
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.str = UnionDistinctStr
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.str = SQLCacheStr
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = ""
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = DistinctStr
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.str = ""
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.str = StraightJoinHint
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.selectExprs = nil
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.empty = struct{}{}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.empty = struct{}{}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.str = JoinStr
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.str = JoinStr
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1759
		{
			yyVAL.str = JoinStr
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.str = StraightJoinStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.str = LeftJoinStr
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.str = LeftJoinStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.str = RightJoinStr
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1781
		{
			yyVAL.str = RightJoinStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.str = NaturalJoinStr
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1791
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.indexHints = nil
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1828
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1832
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1901
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.str = IsNullStr
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.str = IsNotNullStr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.str = IsTrueStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.str = IsNotTrueStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.str = IsFalseStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.str = IsNotFalseStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1975
		{
			yyVAL.str = EqualStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = LessThanStr
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.str = GreaterThanStr
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.str = LessEqualStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.str = GreaterEqualStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.str = NotEqualStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.expr = nil
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2014
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2018
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2034
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2092
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2104
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2108
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2112
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2116
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2128
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2136
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2158
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2198
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 391:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2202
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2206
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 394:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2226
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2236
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2258
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.str = ""
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.str = BooleanModeStr
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 415:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2316
		{
			yyVAL.str = QueryExpansionStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2366
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2382
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.str = string("")
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2416
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = nil
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2445
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.expr = &NullVal{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2475
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2484
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2488
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.exprs = nil
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.expr = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2506
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.orderBy = nil
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.str = AscScr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2540
		{
			yyVAL.str = AscScr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2544
		{
			yyVAL.str = DescScr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2549
		{
			yyVAL.limit = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.str = ""
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.str = ForUpdateStr
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.str = ShareModeStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2595
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2600
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2604
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2608
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2619
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.updateExprs = nil
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2662
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2688
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.bytes = []byte("charset")
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2730
		{
			yyVAL.expr = &Default{}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.byt = 0
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.byt = 1
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2745
		{
			yyVAL.byt = 0
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.byt = 1
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2750
		{
			yyVAL.str = ""
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2752
		{
			yyVAL.str = IgnoreStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.empty = struct{}{}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2758
		{
			yyVAL.empty = struct{}{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2762
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.empty = struct{}{}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.empty = struct{}{}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2768
		{
			yyVAL.empty = struct{}{}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.empty = struct{}{}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2772
		{
			yyVAL.empty = struct{}{}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2774
		{
			yyVAL.empty = struct{}{}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.empty = struct{}{}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2779
		{
			yyVAL.empty = struct{}{}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.empty = struct{}{}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.empty = struct{}{}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2787
		{
			yyVAL.empty = struct{}{}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2790
		{
			yyVAL.empty = struct{}{}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2792
		{
			yyVAL.empty = struct{}{}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2794
		{
			yyVAL.empty = struct{}{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2809
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3013
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3022
		{
			decNesting(yylex)
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3027
		{
			forceEOF(yylex)
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3032
		{
			forceEOF(yylex)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3036
		{
			forceEOF(yylex)
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3040
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
