//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	tableName         TableName
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	updateExpr        *UpdateExpr
	setExprs          SetExprs
	setExpr           *SetExpr
	colIdent          ColIdent
	colIdents         []ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	TableOptions      TableOptions
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const FULL = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const ID = 57393
const HEX = 57394
const STRING = 57395
const INTEGRAL = 57396
const FLOAT = 57397
const HEXNUM = 57398
const VALUE_ARG = 57399
const LIST_ARG = 57400
const COMMENT = 57401
const COMMENT_KEYWORD = 57402
const NULL = 57403
const TRUE = 57404
const FALSE = 57405
const OFF = 57406
const OR = 57407
const AND = 57408
const NOT = 57409
const BETWEEN = 57410
const CASE = 57411
const WHEN = 57412
const THEN = 57413
const ELSE = 57414
const END = 57415
const LE = 57416
const GE = 57417
const NE = 57418
const NULL_SAFE_EQUAL = 57419
const IS = 57420
const LIKE = 57421
const REGEXP = 57422
const IN = 57423
const SHIFT_LEFT = 57424
const SHIFT_RIGHT = 57425
const DIV = 57426
const MOD = 57427
const UNARY = 57428
const COLLATE = 57429
const BINARY = 57430
const INTERVAL = 57431
const JSON_EXTRACT_OP = 57432
const JSON_UNQUOTE_EXTRACT_OP = 57433
const CREATE = 57434
const ALTER = 57435
const DROP = 57436
const RENAME = 57437
const ANALYZE = 57438
const ADD = 57439
const MODIFY = 57440
const TABLE = 57441
const INDEX = 57442
const VIEW = 57443
const TO = 57444
const IGNORE = 57445
const IF = 57446
const UNIQUE = 57447
const USING = 57448
const PRIMARY = 57449
const COLUMN = 57450
const SHOW = 57451
const DESCRIBE = 57452
const EXPLAIN = 57453
const DATE = 57454
const ESCAPE = 57455
const REPAIR = 57456
const OPTIMIZE = 57457
const TRUNCATE = 57458
const BIT = 57459
const TINYINT = 57460
const SMALLINT = 57461
const MEDIUMINT = 57462
const INT = 57463
const INTEGER = 57464
const BIGINT = 57465
const INTNUM = 57466
const REAL = 57467
const DOUBLE = 57468
const FLOAT_TYPE = 57469
const DECIMAL = 57470
const NUMERIC = 57471
const TIME = 57472
const TIMESTAMP = 57473
const DATETIME = 57474
const YEAR = 57475
const CHAR = 57476
const VARCHAR = 57477
const BOOL = 57478
const CHARACTER = 57479
const VARBINARY = 57480
const NCHAR = 57481
const CHARSET = 57482
const TEXT = 57483
const TINYTEXT = 57484
const MEDIUMTEXT = 57485
const LONGTEXT = 57486
const BLOB = 57487
const TINYBLOB = 57488
const MEDIUMBLOB = 57489
const LONGBLOB = 57490
const JSON = 57491
const ENUM = 57492
const NULLX = 57493
const AUTO_INCREMENT = 57494
const APPROXNUM = 57495
const SIGNED = 57496
const UNSIGNED = 57497
const ZEROFILL = 57498
const DATABASES = 57499
const TABLES = 57500
const VITESS_KEYSPACES = 57501
const VITESS_SHARDS = 57502
const VSCHEMA_TABLES = 57503
const WARNINGS = 57504
const VARIABLES = 57505
const EVENTS = 57506
const BINLOG = 57507
const GTID = 57508
const STATUS = 57509
const COLUMNS = 57510
const CURRENT_TIMESTAMP = 57511
const DATABASE = 57512
const CURRENT_DATE = 57513
const CURRENT_TIME = 57514
const LOCALTIME = 57515
const LOCALTIMESTAMP = 57516
const UTC_DATE = 57517
const UTC_TIME = 57518
const UTC_TIMESTAMP = 57519
const REPLACE = 57520
const CONVERT = 57521
const CAST = 57522
const GROUP_CONCAT = 57523
const SEPARATOR = 57524
const MATCH = 57525
const AGAINST = 57526
const BOOLEAN = 57527
const LANGUAGE = 57528
const WITH = 57529
const QUERY = 57530
const EXPANSION = 57531
const UNUSED = 57532
const PARTITION = 57533
const PARTITIONS = 57534
const HASH = 57535
const XA = 57536
const ENGINES = 57537
const VERSIONS = 57538
const PROCESSLIST = 57539
const QUERYZ = 57540
const TXNZ = 57541
const KILL = 57542
const ENGINE = 57543
const BEGIN = 57544
const START = 57545
const TRANSACTION = 57546
const COMMIT = 57547
const ROLLBACK = 57548
const GLOBAL = 57549
const SESSION = 57550
const NAMES = 57551

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 25,
	-2, 4,
	-1, 276,
	78, 587,
	-2, 38,
	-1, 281,
	78, 483,
	-2, 434,
	-1, 376,
	106, 470,
	-2, 466,
	-1, 377,
	106, 471,
	-2, 467,
	-1, 550,
	5, 25,
	-2, 410,
	-1, 683,
	106, 473,
	-2, 469,
	-1, 794,
	5, 26,
	-2, 289,
	-1, 818,
	5, 26,
	-2, 411,
	-1, 903,
	5, 25,
	-2, 413,
	-1, 1005,
	5, 26,
	-2, 414,
}

const yyNprod = 634
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 6905

var yyAct = [...]int{

	377, 509, 1033, 944, 330, 553, 894, 679, 714, 958,
	590, 852, 833, 603, 715, 955, 667, 873, 332, 255,
	786, 52, 677, 354, 508, 3, 561, 778, 893, 70,
	62, 554, 674, 695, 147, 242, 644, 682, 576, 291,
	319, 328, 711, 243, 452, 565, 379, 280, 385, 317,
	355, 46, 599, 274, 264, 272, 51, 247, 570, 567,
	242, 352, 70, 289, 1045, 1032, 1044, 1024, 1042, 1031,
	1023, 254, 886, 938, 130, 131, 314, 308, 631, 312,
	244, 146, 246, 56, 248, 249, 250, 251, 252, 253,
	68, 521, 306, 277, 741, 583, 837, 46, 730, 909,
	978, 584, 858, 591, 933, 260, 931, 58, 59, 60,
	61, 620, 298, 766, 22, 47, 24, 25, 916, 765,
	764, 299, 294, 279, 129, 619, 763, 1020, 1019, 1000,
	1002, 1018, 42, 295, 242, 242, 297, 26, 134, 965,
	133, 498, 499, 923, 821, 132, 759, 325, 309, 792,
	790, 622, 761, 724, 507, 392, 34, 566, 486, 49,
	618, 1010, 475, 474, 484, 485, 477, 478, 479, 480,
	481, 482, 483, 476, 461, 464, 486, 845, 578, 304,
	476, 874, 967, 486, 310, 311, 888, 313, 475, 474,
	484, 485, 477, 478, 479, 480, 481, 482, 483, 476,
	591, 1001, 486, 463, 462, 292, 876, 615, 613, 609,
	890, 612, 614, 917, 830, 915, 651, 28, 29, 30,
	464, 32, 878, 578, 882, 1022, 877, 846, 875, 779,
	649, 650, 648, 880, 33, 43, 36, 696, 762, 44,
	45, 31, 760, 879, 758, 301, 676, 462, 881, 883,
	735, 617, 477, 478, 479, 480, 481, 482, 483, 476,
	731, 723, 486, 464, 322, 380, 616, 797, 577, 242,
	799, 396, 242, 575, 70, 574, 696, 1011, 804, 70,
	381, 443, 739, 463, 462, 382, 637, 639, 640, 315,
	387, 316, 638, 611, 242, 463, 462, 242, 242, 242,
	464, 580, 242, 48, 621, 970, 242, 581, 242, 242,
	242, 46, 464, 577, 49, 610, 293, 463, 462, 35,
	771, 772, 773, 920, 647, 37, 1008, 38, 39, 395,
	41, 40, 467, 128, 464, 279, 536, 537, 798, 919,
	398, 910, 668, 753, 669, 383, 496, 475, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 459,
	752, 486, 742, 510, 479, 480, 481, 482, 483, 476,
	519, 245, 486, 981, 918, 769, 751, 495, 497, 20,
	1007, 463, 462, 296, 318, 70, 838, 839, 840, 975,
	242, 899, 268, 242, 841, 70, 555, 292, 464, 1039,
	318, 538, 860, 506, 564, 857, 511, 512, 513, 514,
	515, 516, 517, 550, 520, 522, 522, 522, 522, 522,
	522, 522, 522, 530, 531, 532, 533, 592, 593, 594,
	558, 835, 539, 831, 259, 942, 318, 974, 540, 551,
	560, 912, 911, 973, 571, 827, 542, 736, 563, 727,
	242, 269, 670, 556, 242, 605, 279, 523, 524, 525,
	526, 527, 528, 529, 784, 318, 466, 851, 850, 53,
	634, 635, 444, 641, 642, 848, 847, 630, 300, 625,
	842, 500, 501, 502, 503, 504, 505, 685, 646, 820,
	318, 601, 602, 645, 22, 624, 685, 318, 627, 628,
	629, 465, 722, 632, 404, 403, 70, 784, 712, 813,
	722, 816, 22, 586, 587, 588, 589, 463, 462, 510,
	902, 70, 690, 691, 942, 302, 303, 562, 596, 597,
	598, 849, 22, 784, 464, 548, 687, 394, 549, 49,
	671, 672, 380, 946, 949, 950, 951, 947, 46, 948,
	952, 784, 70, 555, 713, 683, 534, 49, 684, 686,
	261, 49, 511, 585, 700, 863, 693, 673, 722, 279,
	726, 604, 698, 716, 63, 732, 718, 49, 600, 704,
	721, 703, 697, 725, 595, 475, 474, 484, 485, 477,
	478, 479, 480, 481, 482, 483, 476, 743, 744, 486,
	717, 681, 46, 1014, 546, 49, 712, 607, 242, 449,
	556, 1017, 993, 720, 734, 1016, 643, 994, 728, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 990, 989, 745, 1037, 747, 748,
	749, 474, 484, 485, 477, 478, 479, 480, 481, 482,
	483, 476, 755, 1030, 486, 946, 949, 950, 951, 947,
	390, 948, 952, 393, 770, 1015, 991, 646, 633, 767,
	386, 992, 645, 995, 768, 950, 951, 265, 266, 709,
	70, 708, 320, 921, 384, 774, 746, 780, 445, 446,
	447, 401, 391, 793, 321, 829, 738, 451, 972, 454,
	455, 456, 971, 900, 805, 733, 242, 475, 474, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 814,
	781, 486, 606, 448, 782, 510, 954, 555, 803, 262,
	263, 824, 791, 70, 386, 256, 707, 794, 795, 796,
	353, 788, 800, 822, 706, 826, 984, 806, 402, 807,
	808, 809, 810, 257, 823, 70, 815, 242, 53, 688,
	689, 983, 941, 692, 562, 453, 458, 817, 818, 819,
	307, 305, 683, 271, 962, 240, 460, 699, 55, 701,
	702, 552, 57, 50, 556, 1, 279, 832, 70, 843,
	844, 573, 710, 70, 834, 859, 568, 775, 776, 777,
	270, 856, 290, 862, 572, 853, 861, 867, 868, 750,
	914, 836, 889, 579, 242, 884, 279, 885, 825, 740,
	582, 70, 70, 887, 871, 729, 569, 828, 870, 892,
	969, 901, 897, 866, 737, 407, 408, 406, 683, 891,
	716, 623, 907, 410, 903, 626, 409, 405, 854, 788,
	135, 273, 279, 953, 279, 957, 344, 343, 345, 346,
	347, 348, 785, 65, 898, 349, 757, 717, 756, 608,
	904, 494, 705, 278, 270, 270, 397, 908, 719, 535,
	378, 982, 905, 906, 681, 940, 872, 802, 518, 694,
	331, 636, 929, 342, 339, 341, 340, 541, 939, 242,
	242, 547, 468, 329, 323, 999, 896, 388, 945, 70,
	943, 963, 895, 70, 812, 457, 937, 897, 1009, 545,
	966, 924, 783, 925, 70, 968, 716, 864, 865, 964,
	23, 54, 267, 19, 934, 935, 913, 936, 977, 14,
	801, 13, 12, 242, 242, 242, 242, 27, 10, 956,
	986, 9, 988, 717, 242, 46, 996, 242, 8, 853,
	242, 897, 897, 897, 897, 7, 70, 555, 1004, 1003,
	279, 985, 6, 987, 834, 897, 926, 927, 5, 928,
	4, 687, 930, 258, 932, 279, 1013, 980, 21, 2,
	18, 1012, 510, 898, 898, 898, 898, 17, 16, 754,
	15, 11, 854, 0, 0, 998, 0, 956, 0, 270,
	0, 922, 270, 0, 1005, 0, 0, 872, 0, 0,
	0, 0, 1025, 1026, 556, 0, 0, 1006, 70, 70,
	70, 1035, 1036, 0, 442, 0, 0, 270, 270, 270,
	70, 0, 450, 0, 0, 0, 270, 0, 270, 270,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1027,
	1028, 1029, 0, 0, 0, 0, 0, 0, 0, 0,
	413, 0, 0, 1038, 979, 1040, 1041, 0, 0, 1034,
	1034, 1034, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 1043, 0, 0, 0, 425, 0, 0, 0, 0,
	430, 431, 432, 433, 434, 435, 436, 0, 437, 438,
	439, 440, 441, 426, 427, 428, 429, 411, 412, 0,
	270, 414, 557, 559, 415, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 470, 0, 473, 0, 855, 0,
	0, 0, 487, 488, 489, 490, 491, 492, 493, 0,
	471, 472, 469, 475, 474, 484, 485, 477, 478, 479,
	480, 481, 482, 483, 476, 0, 0, 486, 0, 484,
	485, 477, 478, 479, 480, 481, 482, 483, 476, 0,
	270, 486, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 107, 98, 0, 0, 680, 559, 0,
	0, 0, 0, 680, 680, 0, 0, 680, 0, 0,
	0, 69, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 680, 680, 680, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 0, 0, 557,
	0, 0, 0, 0, 0, 0, 475, 474, 484, 485,
	477, 478, 479, 480, 481, 482, 483, 476, 0, 0,
	486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 78, 0, 106, 102,
	116, 73, 114, 109, 96, 88, 89, 72, 270, 105,
	81, 86, 80, 100, 111, 112, 79, 126, 76, 120,
	75, 0, 119, 99, 0, 110, 115, 97, 94, 74,
	113, 95, 93, 90, 83, 0, 0, 0, 108, 117,
	127, 0, 0, 122, 123, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 0,
	91, 125, 104, 85, 118, 0, 680, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 87, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 675, 0, 327, 0,
	0, 0, 82, 0, 326, 0, 0, 0, 363, 92,
	0, 0, 107, 98, 0, 0, 0, 270, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	376, 344, 343, 345, 346, 347, 348, 0, 0, 77,
	349, 350, 351, 0, 0, 680, 324, 337, 0, 362,
	0, 559, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 334,
	335, 678, 0, 0, 270, 374, 0, 336, 0, 0,
	333, 338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 372, 0, 0,
	103, 0, 0, 0, 0, 78, 0, 106, 102, 116,
	73, 114, 109, 96, 88, 89, 72, 0, 105, 81,
	86, 80, 100, 111, 112, 79, 126, 76, 120, 75,
	0, 119, 99, 0, 110, 115, 97, 94, 74, 113,
	95, 93, 90, 83, 0, 0, 0, 108, 117, 127,
	0, 0, 122, 123, 124, 0, 0, 0, 0, 270,
	960, 0, 364, 373, 370, 371, 368, 369, 367, 366,
	365, 375, 358, 359, 361, 0, 360, 71, 0, 91,
	125, 104, 85, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	87, 0, 0, 270, 270, 270, 270, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 270, 0, 0,
	960, 0, 0, 557, 228, 219, 190, 230, 167, 182,
	239, 183, 184, 211, 154, 198, 101, 180, 0, 170,
	149, 177, 150, 168, 192, 82, 195, 166, 221, 201,
	285, 236, 92, 205, 0, 107, 98, 0, 0, 194,
	223, 196, 218, 189, 212, 160, 204, 231, 181, 209,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 207, 226, 179, 208, 210, 148, 206,
	0, 152, 155, 238, 224, 173, 174, 0, 0, 0,
	0, 0, 0, 0, 193, 197, 215, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 203, 0,
	0, 0, 158, 153, 191, 0, 0, 0, 284, 0,
	172, 216, 0, 0, 0, 286, 188, 121, 225, 186,
	185, 229, 232, 103, 0, 222, 169, 178, 78, 176,
	106, 102, 116, 73, 114, 109, 96, 88, 89, 72,
	0, 105, 81, 86, 80, 100, 111, 112, 79, 126,
	76, 120, 75, 282, 119, 99, 281, 110, 115, 97,
	94, 74, 113, 95, 93, 90, 83, 0, 151, 0,
	108, 117, 127, 165, 287, 122, 123, 124, 0, 0,
	0, 0, 0, 0, 288, 163, 164, 161, 162, 199,
	200, 233, 234, 235, 217, 159, 0, 0, 220, 202,
	71, 0, 91, 125, 104, 85, 118, 0, 0, 0,
	0, 175, 237, 214, 213, 227, 0, 84, 0, 0,
	0, 0, 0, 276, 275, 283, 228, 219, 190, 230,
	167, 182, 239, 183, 184, 211, 154, 198, 101, 180,
	0, 170, 149, 177, 150, 168, 192, 82, 195, 166,
	221, 201, 137, 236, 92, 205, 0, 107, 98, 0,
	0, 194, 223, 196, 218, 189, 212, 160, 204, 231,
	181, 209, 0, 0, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 207, 226, 179, 208, 210,
	148, 206, 0, 152, 155, 238, 224, 173, 174, 0,
	0, 0, 0, 0, 0, 0, 193, 197, 215, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	203, 0, 0, 0, 158, 153, 191, 0, 0, 0,
	139, 0, 172, 216, 0, 0, 0, 144, 188, 121,
	225, 186, 185, 229, 232, 103, 0, 222, 169, 178,
	78, 176, 106, 102, 116, 73, 114, 109, 96, 88,
	89, 72, 0, 105, 81, 86, 80, 100, 111, 112,
	79, 126, 76, 120, 75, 156, 119, 99, 157, 110,
	115, 97, 94, 74, 113, 95, 93, 90, 83, 0,
	151, 0, 108, 117, 127, 165, 136, 122, 123, 124,
	140, 141, 0, 142, 0, 143, 138, 163, 164, 161,
	162, 199, 200, 233, 234, 235, 217, 159, 0, 0,
	220, 202, 71, 0, 91, 125, 104, 85, 118, 0,
	0, 0, 0, 175, 237, 214, 213, 227, 0, 84,
	0, 0, 0, 0, 0, 87, 228, 219, 190, 230,
	167, 182, 239, 183, 184, 211, 154, 198, 101, 180,
	0, 170, 149, 177, 150, 168, 192, 82, 195, 166,
	221, 201, 285, 236, 92, 205, 0, 107, 98, 0,
	0, 194, 223, 196, 218, 189, 212, 160, 204, 231,
	181, 209, 0, 0, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 207, 226, 179, 208, 210,
	148, 206, 0, 152, 155, 238, 224, 173, 174, 0,
	0, 0, 0, 0, 0, 0, 193, 197, 215, 187,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	203, 0, 0, 0, 158, 153, 191, 0, 0, 0,
	284, 0, 172, 216, 0, 0, 0, 286, 188, 121,
	225, 186, 185, 229, 232, 103, 0, 222, 169, 178,
	78, 176, 106, 102, 116, 73, 114, 109, 96, 88,
	89, 72, 0, 105, 81, 86, 80, 100, 111, 112,
	79, 126, 76, 120, 75, 282, 119, 99, 281, 110,
	115, 97, 94, 74, 113, 95, 93, 90, 83, 0,
	151, 0, 108, 117, 127, 165, 287, 122, 123, 124,
	0, 0, 0, 0, 0, 0, 288, 163, 164, 161,
	162, 199, 200, 233, 234, 235, 217, 159, 0, 0,
	220, 202, 71, 0, 91, 125, 104, 85, 118, 0,
	0, 0, 0, 175, 237, 214, 213, 227, 0, 84,
	0, 0, 0, 0, 0, 87, 0, 283, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 285, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 976, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 284, 0, 172, 216, 0, 0, 0, 286,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 156, 119, 99,
	157, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 287, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 288, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	0, 84, 0, 0, 0, 0, 0, 87, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 285, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 49, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 284, 0, 172, 216, 0, 0, 0, 286,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 156, 119, 99,
	157, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 287, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 288, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	0, 84, 0, 0, 0, 0, 0, 87, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 285, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 869, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 284, 0, 172, 216, 0, 0, 0, 286,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 156, 119, 99,
	157, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 287, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 288, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	0, 84, 0, 0, 0, 0, 0, 87, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 285, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 284, 0, 172, 216, 0, 0, 0, 286,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 156, 119, 99,
	157, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 287, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 288, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	0, 84, 0, 0, 0, 0, 0, 87, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 285, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 284, 0, 172, 216, 0, 0, 0, 286,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 156, 119, 99,
	157, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 287, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 288, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	0, 84, 0, 0, 0, 0, 0, 87, 228, 219,
	190, 230, 167, 182, 239, 183, 184, 211, 154, 198,
	101, 180, 0, 170, 149, 177, 150, 168, 192, 82,
	195, 166, 221, 201, 285, 236, 92, 205, 0, 107,
	98, 0, 0, 194, 223, 196, 218, 189, 212, 160,
	204, 231, 181, 209, 0, 0, 0, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 207, 226, 179,
	208, 210, 148, 206, 0, 152, 155, 238, 224, 173,
	174, 0, 0, 0, 0, 0, 0, 0, 193, 197,
	215, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 203, 0, 0, 0, 158, 153, 191, 0,
	0, 0, 284, 0, 172, 216, 0, 0, 0, 286,
	188, 121, 225, 186, 185, 229, 232, 103, 0, 222,
	169, 178, 78, 176, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 156, 119, 99,
	157, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 151, 0, 108, 117, 127, 165, 287, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 288, 163,
	164, 161, 162, 199, 200, 233, 234, 235, 217, 159,
	0, 0, 220, 202, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 0, 175, 237, 214, 213, 227,
	101, 84, 0, 0, 0, 327, 0, 87, 0, 82,
	0, 326, 0, 0, 0, 363, 92, 0, 0, 107,
	98, 0, 0, 0, 0, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 376, 344, 343,
	345, 346, 347, 348, 0, 0, 77, 349, 350, 351,
	0, 0, 0, 324, 337, 0, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 335, 678, 0,
	0, 0, 374, 0, 336, 0, 0, 333, 338, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 372, 0, 0, 103, 0, 0,
	0, 0, 78, 0, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 0, 119, 99,
	0, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 0, 0, 108, 117, 127, 0, 0, 122,
	123, 124, 0, 0, 0, 0, 0, 0, 0, 364,
	373, 370, 371, 368, 369, 367, 366, 365, 375, 358,
	359, 361, 0, 360, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 101, 0, 0, 0, 0, 327, 0,
	0, 84, 82, 0, 326, 0, 0, 87, 363, 92,
	0, 0, 107, 98, 0, 0, 0, 0, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 318,
	376, 344, 343, 345, 346, 347, 348, 0, 0, 77,
	349, 350, 351, 0, 0, 0, 324, 337, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 334,
	335, 0, 0, 0, 0, 374, 0, 336, 0, 0,
	333, 338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 372, 0, 0,
	103, 0, 0, 0, 0, 78, 0, 106, 102, 116,
	73, 114, 109, 96, 88, 89, 72, 0, 105, 81,
	86, 80, 100, 111, 112, 79, 126, 76, 120, 75,
	0, 119, 99, 0, 110, 115, 97, 94, 74, 113,
	95, 93, 90, 83, 0, 0, 0, 108, 117, 127,
	0, 0, 122, 123, 124, 0, 0, 0, 0, 0,
	0, 0, 364, 373, 370, 371, 368, 369, 367, 366,
	365, 375, 358, 359, 361, 22, 360, 71, 0, 91,
	125, 104, 85, 118, 0, 0, 101, 0, 0, 0,
	0, 327, 0, 0, 84, 82, 0, 326, 0, 0,
	87, 363, 92, 0, 0, 107, 98, 0, 0, 0,
	0, 356, 357, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 376, 344, 343, 345, 346, 347, 348,
	0, 0, 77, 349, 350, 351, 0, 0, 0, 324,
	337, 0, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 334, 335, 0, 0, 0, 0, 374, 0,
	336, 0, 0, 333, 338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	372, 0, 0, 103, 0, 0, 0, 0, 78, 0,
	106, 102, 116, 73, 114, 109, 96, 88, 89, 72,
	0, 105, 81, 86, 80, 100, 111, 112, 79, 126,
	76, 120, 75, 0, 119, 99, 0, 110, 115, 97,
	94, 74, 113, 95, 93, 90, 83, 0, 0, 0,
	108, 117, 127, 0, 0, 122, 123, 124, 0, 0,
	0, 0, 0, 0, 0, 364, 373, 370, 371, 368,
	369, 367, 366, 365, 375, 358, 359, 361, 0, 360,
	71, 0, 91, 125, 104, 85, 118, 0, 0, 101,
	0, 0, 0, 0, 327, 0, 0, 84, 82, 0,
	326, 0, 0, 87, 363, 92, 0, 0, 107, 98,
	0, 0, 0, 0, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 376, 344, 343, 345,
	346, 347, 348, 0, 0, 77, 349, 350, 351, 0,
	0, 0, 324, 337, 0, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 335, 0, 0, 0,
	0, 374, 0, 336, 0, 0, 333, 338, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 372, 0, 0, 103, 0, 0, 0,
	0, 78, 0, 106, 102, 116, 73, 114, 109, 96,
	88, 89, 72, 0, 105, 81, 86, 80, 100, 111,
	112, 79, 126, 76, 120, 75, 0, 119, 99, 0,
	110, 115, 97, 94, 74, 113, 95, 93, 90, 83,
	0, 0, 0, 108, 117, 127, 0, 0, 122, 123,
	124, 0, 0, 0, 0, 0, 0, 0, 364, 373,
	370, 371, 368, 369, 367, 366, 365, 375, 358, 359,
	361, 0, 360, 71, 0, 91, 125, 104, 85, 118,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	84, 82, 0, 0, 0, 0, 87, 363, 92, 0,
	0, 107, 98, 0, 0, 0, 0, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 376,
	344, 343, 345, 346, 347, 348, 0, 0, 77, 349,
	350, 351, 0, 0, 0, 0, 337, 0, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 335,
	0, 0, 0, 0, 374, 0, 336, 0, 0, 333,
	338, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 372, 0, 0, 103,
	0, 0, 0, 0, 78, 0, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 0,
	119, 99, 0, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 0, 0, 108, 117, 127, 0,
	0, 122, 123, 124, 0, 0, 0, 0, 0, 0,
	0, 364, 373, 370, 371, 368, 369, 367, 366, 365,
	375, 358, 359, 361, 0, 360, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 101, 0, 0, 0, 787,
	0, 0, 0, 84, 82, 0, 0, 0, 0, 87,
	0, 92, 0, 0, 107, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 789, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 463, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 78, 0, 106,
	102, 116, 73, 114, 109, 96, 88, 89, 72, 0,
	105, 81, 86, 80, 100, 111, 112, 79, 126, 76,
	120, 75, 0, 119, 99, 0, 110, 115, 97, 94,
	74, 113, 95, 93, 90, 83, 0, 0, 0, 108,
	117, 127, 101, 0, 122, 123, 124, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 107, 98, 0, 0, 0, 0, 0, 0, 71,
	0, 91, 125, 104, 85, 118, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 84, 0, 77, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 121, 0, 0, 0, 67, 0, 103,
	0, 0, 0, 0, 78, 0, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 0,
	119, 99, 0, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 22, 0, 0, 108, 117, 127, 0,
	0, 122, 123, 124, 101, 0, 0, 0, 0, 0,
	0, 0, 64, 82, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 107, 98, 0, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 0, 49, 0,
	0, 241, 0, 84, 0, 0, 0, 0, 0, 87,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 78, 0, 106, 102,
	116, 73, 114, 109, 96, 88, 89, 72, 0, 105,
	81, 86, 80, 100, 111, 112, 79, 126, 76, 120,
	75, 0, 119, 99, 0, 110, 115, 97, 94, 74,
	113, 95, 93, 90, 83, 0, 0, 0, 108, 117,
	127, 0, 101, 122, 123, 124, 959, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 107, 98, 0, 0, 0, 0, 0, 71, 0,
	91, 125, 104, 85, 118, 0, 0, 0, 0, 241,
	0, 961, 0, 0, 0, 84, 0, 0, 77, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 78, 0, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 0,
	119, 99, 0, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 22, 0, 0, 108, 117, 127, 0,
	0, 122, 123, 124, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	92, 0, 0, 107, 98, 0, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 0, 0, 49, 0,
	0, 69, 0, 84, 0, 0, 0, 0, 0, 87,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 78, 0, 106, 102,
	116, 73, 114, 109, 96, 88, 89, 72, 0, 105,
	81, 86, 80, 100, 111, 112, 79, 126, 76, 120,
	75, 0, 119, 99, 0, 110, 115, 97, 94, 74,
	113, 95, 93, 90, 83, 0, 0, 0, 108, 117,
	127, 101, 0, 122, 123, 124, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	107, 98, 0, 0, 0, 0, 0, 0, 71, 0,
	91, 125, 104, 85, 118, 0, 0, 0, 69, 0,
	0, 543, 0, 0, 544, 84, 0, 77, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 78, 0, 106, 102, 116, 73, 114,
	109, 96, 88, 89, 72, 0, 105, 81, 86, 80,
	100, 111, 112, 79, 126, 76, 120, 75, 0, 119,
	99, 0, 110, 115, 97, 94, 74, 113, 95, 93,
	90, 83, 0, 0, 0, 108, 117, 127, 101, 0,
	122, 123, 124, 0, 0, 0, 0, 82, 0, 400,
	0, 0, 0, 0, 92, 0, 0, 107, 98, 0,
	0, 0, 0, 0, 0, 71, 0, 91, 125, 104,
	85, 118, 0, 0, 0, 69, 0, 399, 0, 0,
	0, 0, 84, 0, 77, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	78, 0, 106, 102, 116, 73, 114, 109, 96, 88,
	89, 72, 0, 105, 81, 86, 80, 100, 111, 112,
	79, 126, 76, 120, 75, 0, 119, 99, 0, 110,
	115, 97, 94, 74, 113, 95, 93, 90, 83, 0,
	0, 0, 108, 117, 127, 101, 0, 122, 123, 124,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 92, 0, 0, 107, 98, 0, 0, 0, 0,
	0, 0, 71, 0, 91, 125, 104, 85, 118, 0,
	0, 0, 241, 0, 961, 0, 0, 0, 0, 84,
	0, 77, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 0, 0,
	0, 0, 103, 0, 0, 0, 0, 78, 0, 106,
	102, 116, 73, 114, 109, 96, 88, 89, 72, 0,
	105, 81, 86, 80, 100, 111, 112, 79, 126, 76,
	120, 75, 0, 119, 99, 0, 110, 115, 97, 94,
	74, 113, 95, 93, 90, 83, 0, 0, 0, 108,
	117, 127, 101, 0, 122, 123, 124, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 92, 0,
	0, 107, 98, 0, 0, 0, 0, 0, 0, 71,
	0, 91, 125, 104, 85, 118, 49, 0, 0, 241,
	0, 0, 0, 0, 0, 0, 84, 0, 77, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 78, 0, 106, 102, 116, 73,
	114, 109, 96, 88, 89, 72, 0, 105, 81, 86,
	80, 100, 111, 112, 79, 126, 76, 120, 75, 0,
	119, 99, 0, 110, 115, 97, 94, 74, 113, 95,
	93, 90, 83, 0, 0, 0, 108, 117, 127, 101,
	0, 122, 123, 124, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 92, 0, 0, 107, 98,
	0, 0, 0, 0, 0, 0, 71, 0, 91, 125,
	104, 85, 118, 0, 0, 0, 69, 0, 789, 0,
	0, 0, 0, 84, 0, 77, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 103, 0, 0, 0,
	0, 78, 0, 106, 102, 116, 73, 114, 109, 96,
	88, 89, 72, 0, 105, 81, 86, 80, 100, 111,
	112, 79, 126, 76, 120, 75, 0, 119, 99, 0,
	110, 115, 97, 94, 74, 113, 95, 93, 90, 83,
	0, 0, 0, 108, 117, 127, 101, 0, 122, 123,
	124, 0, 0, 0, 389, 82, 0, 0, 0, 0,
	0, 0, 92, 0, 0, 107, 98, 0, 0, 0,
	0, 0, 0, 71, 0, 91, 125, 104, 85, 118,
	0, 0, 0, 241, 0, 0, 0, 0, 0, 0,
	84, 0, 77, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 78, 0,
	106, 102, 116, 73, 114, 109, 96, 88, 89, 72,
	0, 105, 81, 86, 80, 100, 111, 112, 79, 126,
	76, 120, 75, 0, 119, 99, 0, 110, 115, 97,
	94, 74, 113, 95, 93, 90, 83, 0, 0, 0,
	108, 117, 127, 101, 0, 122, 123, 124, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 107, 98, 0, 0, 0, 0, 0, 0,
	71, 0, 91, 125, 104, 85, 118, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 84, 0, 77,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 78, 0, 106, 102, 116,
	73, 114, 109, 96, 88, 89, 72, 0, 105, 81,
	86, 80, 100, 111, 112, 79, 126, 76, 120, 75,
	0, 119, 99, 0, 110, 115, 97, 94, 74, 113,
	95, 93, 90, 83, 0, 0, 0, 108, 117, 127,
	101, 0, 122, 123, 124, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 92, 0, 0, 107,
	98, 0, 0, 0, 0, 0, 0, 71, 0, 91,
	125, 104, 85, 118, 0, 0, 0, 376, 0, 0,
	0, 0, 0, 0, 84, 0, 77, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 78, 0, 106, 102, 116, 73, 114, 109,
	96, 88, 89, 72, 0, 105, 81, 86, 80, 100,
	111, 112, 79, 126, 76, 120, 75, 0, 119, 99,
	0, 110, 115, 97, 94, 74, 113, 95, 93, 90,
	83, 0, 0, 0, 108, 117, 127, 101, 0, 122,
	123, 124, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 92, 0, 0, 107, 98, 0, 0,
	0, 0, 0, 0, 71, 0, 91, 125, 104, 85,
	118, 0, 0, 0, 241, 0, 0, 0, 0, 0,
	0, 84, 0, 77, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	0, 0, 0, 0, 103, 0, 0, 0, 0, 78,
	0, 106, 102, 116, 73, 114, 109, 96, 88, 89,
	72, 0, 105, 81, 86, 80, 100, 111, 112, 79,
	126, 76, 120, 75, 0, 119, 99, 0, 110, 115,
	97, 94, 74, 113, 95, 93, 90, 83, 0, 0,
	0, 108, 117, 127, 0, 0, 122, 123, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 91, 125, 104, 85, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 87,
}
var yyPact = [...]int{

	108, -1000, -171, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	744, 773, -1000, -1000, -1000, -1000, -1000, 523, 4785, 4,
	-42, 24, 22, 1921, 6680, -1000, -1000, 314, -1000, -164,
	-1000, -1000, -1000, -1000, -1000, -1000, 526, -1000, -1000, -1000,
	-1000, -1000, 719, 738, 554, 710, 639, -1000, 4, 6680,
	763, 1699, -145, 343, 1, 16, 1, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20, -1000,
	0, 424, 0, 6680, 6680, -1000, 761, -83, 760, -39,
	-1000, -1000, -102, -1000, -108, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 331, 664, 4242, 4242, 744, -1000,
	526, -1000, -1000, -1000, 650, -1000, -1000, 228, 6209, 663,
	49, 6680, 485, 2141, -1000, -1000, -1000, 193, 5581, -1000,
	-1000, -1000, 662, -1000, -1000, -1000, -1000, -1000, -1000, 733,
	452, -1000, 976, 6680, 211, 418, 6680, 6680, 6680, 701,
	559, 6680, -1000, -1000, -1000, 6680, 755, 6680, 6680, 6680,
	-1000, -1000, 756, -1000, 755, -1000, -1000, -1000, -1000, -1000,
	768, 86, 449, -1000, 4242, 1074, 510, 510, -1000, -1000,
	34, -1000, -1000, 4435, 4435, 4435, 4435, 4435, 4435, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 510, 48, -1000, 4049, 510, 510, 510, 510,
	510, 510, 4242, 510, 510, 510, 510, 510, 510, 510,
	510, 510, 510, 510, 510, 510, -1000, -1000, 504, -1000,
	313, 719, 331, 639, 5424, 563, -1000, -1000, 506, 6680,
	-1000, 6523, 3463, 753, 2141, 485, 4242, 54, -1000, -1000,
	-1000, -1000, -151, -160, 151, 237, -77, -1000, -1000, 512,
	-1000, 512, 512, 512, 512, -51, -51, -51, -51, -1000,
	-1000, -1000, -1000, -1000, 533, -1000, 512, 512, 512, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 527, 527, 527,
	520, 520, -1000, 700, 557, -1000, 97, -1000, -1000, 6680,
	-1000, -1000, 753, 6680, -1000, -1000, -1000, 719, -105, -1000,
	-1000, 632, 4242, 4242, 222, 4242, 4242, 90, 4435, 263,
	144, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435,
	4435, 4435, 4435, 4435, 4435, 4435, 288, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 398, -1000, 526, 801, 801,
	55, 55, 55, 55, 55, 1207, 1456, 3243, 331, 444,
	227, 4049, 3663, 3663, 4242, 4242, 3663, 714, 163, 227,
	6366, -1000, 331, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3663, 3663, 3663, 3663, 4242, -1000, -1000, -1000, 664, -1000,
	714, 726, -1000, 649, 647, 3663, -1000, 556, 6523, 510,
	-1000, 5267, -1000, 516, -1000, 183, -1000, 47, -1000, -1000,
	-1000, 744, 4242, -1000, 227, -1000, 395, 510, -1000, -71,
	182, -1000, -1000, 524, 678, 196, 393, -1000, -1000, 668,
	-1000, 218, -79, -1000, -1000, 305, -51, -51, -1000, -1000,
	54, 657, 54, 54, 54, 320, -1000, -1000, -1000, -1000,
	303, -1000, -1000, -1000, 286, -1000, -1000, 6680, -1000, 125,
	160, 7, -5, -6, -12, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 319, -1000, 627, 90, 178, -1000, -1000, 256, -1000,
	-1000, 227, 227, 258, -1000, -1000, -1000, -1000, 263, 4435,
	4435, 4435, 99, 258, 618, 1088, 551, 55, 269, 269,
	80, 80, 80, 80, 80, 159, 159, -1000, -1000, -1000,
	331, -1000, -1000, -1000, 331, 3663, 481, -1000, -1000, 4628,
	44, 510, 43, -1000, -1000, 4242, -1000, 331, 412, 412,
	215, 249, 412, 3663, 202, -1000, 4242, 331, -1000, 412,
	331, 412, 412, -1000, -1000, 6680, -1000, -1000, -1000, -1000,
	499, -1000, 693, 458, 459, -1000, -1000, 3856, 331, 437,
	38, 744, 6523, 4242, 3243, 719, 227, -1000, 391, 667,
	136, 379, 6366, -1000, 377, -1000, -1000, -73, 330, -1000,
	-1000, -1000, 427, 54, 54, -1000, 123, -1000, -1000, -1000,
	423, -1000, 479, 415, 2583, -1000, 6680, -1000, -1000, -1000,
	-1000, -1000, 351, -52, 523, 348, 343, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 99, 258, 496, -1000, 4435,
	4435, -1000, -1000, 412, 3663, -1000, -1000, 6052, -1000, -1000,
	2803, 3663, 3023, 227, -1000, -1000, -1000, 77, 288, 77,
	-129, 455, 109, -1000, 4242, 135, -1000, -1000, -1000, -1000,
	-1000, -1000, 753, 5895, 676, -1000, 510, -1000, -1000, 488,
	6366, 6366, 719, -1000, 227, -1000, -1000, 331, -1000, -58,
	284, -1000, 389, -1000, 512, -1000, 91, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 318, 282,
	-1000, 266, -1000, -1000, -1000, -1000, -1000, -1000, 654, -1000,
	-1000, -1000, -1000, 4435, 258, 258, -1000, -1000, -1000, -1000,
	37, 331, -1000, 331, 512, 512, -1000, 512, 520, -1000,
	512, -33, 512, -35, 331, 331, 510, -126, -1000, 227,
	4242, 750, 472, 503, -1000, -1000, -1000, 705, 4947, 5105,
	766, -1000, 510, -1000, 526, 33, -1000, -1000, 2583, 104,
	-1000, -1000, 6366, -1000, 242, 675, -1000, 671, -1000, 390,
	384, 335, 258, 2363, -1000, -1000, -1000, 46, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4435, 331, 317, 227,
	748, 731, 5895, 5895, 5895, 5895, -1000, 595, 594, -1000,
	626, 572, 633, 6680, -1000, 383, 4947, 81, -1000, 5738,
	-1000, -1000, 6523, 459, 331, 6366, -1000, 326, -1000, -1000,
	270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 73,
	-1000, -1000, -1000, 4242, 4242, 503, 553, 615, -1000, -1000,
	-1000, -1000, 575, -1000, 571, -1000, -1000, -1000, -1000, -1000,
	14, 11, 10, -1000, 450, -1000, -1000, -1000, -1000, 331,
	23, -138, 227, 435, 4242, 4242, -1000, -1000, 510, 510,
	510, -1000, 616, -134, -141, 227, 227, 6366, 6366, 6366,
	-1000, 600, -1000, 347, -1000, 347, 347, -136, -1000, 6366,
	-1000, -1000, -139, -1000, -142, -1000,
}
var yyPgo = [...]int{

	0, 1001, 1000, 998, 997, 990, 989, 24, 379, 988,
	983, 980, 978, 972, 965, 958, 951, 948, 947, 942,
	941, 939, 933, 83, 932, 931, 930, 48, 919, 54,
	918, 916, 915, 27, 246, 32, 22, 7, 914, 15,
	28, 6, 912, 910, 3, 908, 391, 907, 44, 906,
	905, 2, 26, 904, 903, 902, 901, 41, 147, 897,
	896, 895, 894, 893, 891, 36, 1, 8, 23, 14,
	890, 18, 4, 889, 33, 888, 887, 885, 881, 21,
	880, 46, 879, 19, 40, 878, 42, 5, 31, 55,
	53, 876, 873, 872, 333, 871, 112, 316, 869, 868,
	866, 863, 47, 0, 61, 93, 20, 862, 740, 37,
	9, 855, 853, 43, 11, 16, 851, 17, 850, 847,
	846, 843, 837, 836, 835, 101, 834, 830, 10, 45,
	827, 826, 825, 820, 819, 52, 13, 813, 811, 810,
	809, 39, 804, 38, 30, 802, 796, 791, 12, 787,
	785, 783, 50, 49, 782, 91,
}
var yyR1 = [...]int{

	0, 150, 151, 151, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 7, 7, 7, 8, 9, 9, 10, 10, 11,
	11, 26, 26, 12, 13, 14, 14, 116, 116, 15,
	15, 15, 15, 18, 144, 146, 131, 131, 130, 130,
	132, 132, 145, 145, 145, 141, 119, 119, 119, 122,
	122, 120, 120, 120, 120, 120, 120, 120, 121, 121,
	121, 121, 121, 123, 123, 123, 123, 123, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 140, 140, 125, 125, 135, 135, 136, 136,
	136, 133, 133, 134, 134, 137, 137, 137, 126, 126,
	126, 126, 126, 138, 138, 128, 128, 128, 129, 129,
	139, 139, 139, 139, 139, 127, 127, 142, 147, 147,
	147, 147, 143, 143, 149, 149, 148, 16, 16, 16,
	16, 16, 16, 16, 16, 17, 17, 17, 1, 19,
	2, 3, 4, 5, 5, 5, 5, 118, 118, 118,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 32, 32, 48, 48, 21, 22, 22, 22, 22,
	154, 23, 24, 24, 25, 25, 25, 29, 29, 29,
	27, 27, 28, 28, 35, 35, 34, 34, 36, 36,
	36, 36, 107, 107, 107, 106, 106, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 49, 42, 42, 42,
	42, 112, 112, 111, 111, 111, 110, 110, 43, 43,
	43, 43, 44, 44, 44, 44, 45, 45, 47, 47,
	46, 46, 50, 50, 50, 50, 51, 51, 52, 52,
	37, 37, 37, 37, 37, 37, 37, 95, 95, 54,
	54, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 64, 64, 64, 64, 64, 64, 55, 55, 55,
	55, 55, 55, 55, 33, 33, 65, 65, 65, 71,
	66, 66, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 62, 62, 62, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 61, 61, 61, 61, 61, 61,
	61, 61, 155, 155, 63, 63, 63, 63, 30, 30,
	30, 30, 30, 115, 115, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 75, 75,
	31, 31, 73, 73, 74, 76, 76, 72, 72, 72,
	57, 57, 57, 57, 57, 57, 57, 59, 59, 59,
	77, 77, 78, 78, 79, 79, 80, 80, 81, 82,
	82, 82, 83, 83, 83, 83, 84, 84, 84, 56,
	56, 56, 56, 56, 56, 85, 85, 85, 85, 86,
	86, 67, 67, 69, 69, 68, 70, 87, 87, 88,
	89, 89, 90, 90, 92, 92, 92, 91, 91, 91,
	93, 93, 96, 96, 97, 97, 94, 94, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 99, 99,
	99, 100, 100, 101, 101, 101, 104, 104, 105, 105,
	108, 108, 109, 109, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 152, 153,
	113, 114, 114, 114,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 6, 7, 10, 1, 3, 1, 3, 6,
	7, 1, 1, 8, 7, 3, 4, 1, 1, 2,
	9, 4, 7, 4, 4, 3, 0, 3, 0, 4,
	0, 3, 1, 3, 3, 7, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 4, 2, 3,
	2, 2, 1, 1, 1, 3, 2, 6, 7, 7,
	7, 9, 7, 7, 7, 4, 5, 4, 3, 3,
	2, 2, 3, 2, 3, 2, 2, 1, 1, 1,
	3, 5, 6, 5, 5, 5, 3, 3, 6, 3,
	5, 0, 3, 0, 2, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 5, 5,
	3, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 2, 1, 2, 2, 1, 2, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -150, -6, -7, -11, -12, -13, -14, -15, -16,
	-17, -1, -19, -20, -21, -2, -3, -4, -5, -22,
	-8, -9, 6, -26, 8, 9, 29, -18, 109, 110,
	111, 133, 113, 126, 48, 211, 128, 217, 219, 220,
	223, 222, 24, 127, 131, 132, -152, 7, 195, 51,
	-151, 227, -79, 14, -25, 5, -23, -154, -23, -23,
	-23, -23, -144, 51, 187, -101, 116, 122, -104, 54,
	-103, 201, 140, 134, 162, 153, 151, 63, 129, 149,
	145, 143, 26, 167, 218, 206, 144, 224, 138, 139,
	166, 203, 33, 165, 161, 164, 137, 160, 37, 156,
	146, 17, 132, 124, 205, 142, 131, 36, 171, 136,
	158, 147, 148, 163, 135, 159, 133, 172, 207, 155,
	152, 118, 176, 177, 178, 204, 150, 173, -94, 120,
	116, 117, 187, 116, 116, -118, 175, 31, 185, 109,
	179, 180, 182, 184, 116, 54, -102, -103, 69, 21,
	23, 169, 72, 104, 15, 73, 154, 157, 103, 196,
	46, 188, 189, 186, 187, 174, 28, 9, 24, 127,
	20, 97, 111, 76, 77, 212, 130, 22, 128, 66,
	18, 49, 10, 12, 13, 121, 120, 88, 117, 44,
	7, 105, 25, 85, 40, 27, 42, 86, 16, 190,
	191, 30, 200, 99, 47, 34, 70, 64, 67, 50,
	68, 14, 45, 215, 214, 87, 112, 195, 43, 6,
	199, 29, 126, 41, 75, 119, 65, 216, 5, 122,
	8, 48, 123, 192, 193, 194, 32, 213, 74, 11,
	-108, 54, -103, -113, -113, 57, -113, 221, -113, -113,
	-113, -113, -113, -113, -7, -83, 16, 15, -10, -8,
	-152, 6, 19, 20, -29, 38, 39, -24, -94, -46,
	-108, 10, -89, -116, -90, 225, 224, -105, -92, -104,
	-102, 157, 154, 226, 109, 31, 116, 175, 185, 208,
	-145, -141, 54, -97, 121, 117, -97, 116, -96, 121,
	54, -96, -46, -46, -113, 10, 175, 10, 116, 187,
	-113, -113, 181, -113, 184, -113, -113, -153, 53, -84,
	18, 30, -37, -53, 70, -58, 28, 22, -57, -54,
	-72, -70, -71, 104, 93, 94, 101, 71, 105, -62,
	-60, -61, -63, 56, 55, 57, 58, 59, 60, 64,
	65, 66, -104, -108, -68, -152, 42, 43, 196, 197,
	200, 198, 73, 32, 186, 194, 193, 192, 190, 191,
	188, 189, 121, 187, 99, 195, 54, -103, -80, -81,
	-37, -79, -7, -23, 34, -27, 20, 62, -47, 25,
	-46, 29, 106, -46, 52, -89, 78, -91, -104, 56,
	28, 29, 15, 53, 52, -119, -122, -124, -123, -120,
	-121, 151, 152, 104, 155, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 129, 147, 148, 149, 150,
	134, 135, 136, 137, 138, 139, 140, 142, 143, 144,
	145, 146, -108, 70, 54, -46, -46, -46, 22, 50,
	-108, -46, -48, 10, -46, -46, -46, -32, 10, -48,
	8, 88, 69, 68, 85, 52, 17, -37, -55, 88,
	70, 86, 87, 72, 90, 89, 100, 93, 94, 95,
	96, 97, 98, 99, 91, 92, 103, 78, 79, 80,
	81, 82, 83, 84, -95, -152, -71, -152, 107, 108,
	-58, -58, -58, -58, -58, -58, -152, 106, -7, -66,
	-37, -152, -152, -152, -152, -152, -152, -152, -75, -37,
	-152, -155, -152, -155, -155, -155, -155, -155, -155, -155,
	-152, -152, -152, -152, 52, -82, 23, 24, -83, -153,
	-29, -59, -104, 57, 60, -28, 41, -56, 29, 32,
	-7, -152, -46, -87, -88, -72, -104, -108, -109, -108,
	-102, -52, 11, -90, -37, -129, 103, 210, -146, -131,
	218, -141, -142, -147, 124, 122, -143, 117, 27, -137,
	64, 70, -133, 172, -125, 51, -125, -125, -125, -125,
	-128, 154, -128, -128, -128, 51, -125, -125, -125, -135,
	51, -135, -135, -136, 51, -136, 22, 50, -98, 112,
	218, 196, 114, 111, 115, 110, 169, 154, 63, 28,
	14, 207, 54, -46, -113, -52, -46, -113, -113, -113,
	-83, 183, -113, 36, -37, -37, -64, 64, 70, 65,
	66, -37, -37, -58, -65, -68, -71, 61, 88, 86,
	87, 72, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -58, -58, -58, -115, 54, 56,
	54, -57, -57, -104, -35, 20, -34, -36, 95, -37,
	-108, -105, -109, -102, -153, 52, -153, -7, -34, -34,
	-37, -37, -34, -27, -73, -74, 74, -104, -153, -34,
	-35, -34, -34, -81, -84, -93, 18, 10, 32, 32,
	-34, -86, 50, -87, -67, -69, -68, -152, -7, -85,
	-104, -52, 52, 78, 106, -79, -37, 54, -152, -132,
	169, 78, 51, 27, -143, 54, 54, -126, 28, 64,
	-134, 173, 57, -128, -128, -129, 29, -129, -129, -129,
	-140, 56, 57, 57, -46, -113, -99, -100, 119, 21,
	117, 27, 78, 119, 125, 125, 125, -113, -113, 56,
	37, 64, 65, 66, -65, -58, -58, -58, -33, 130,
	69, -153, -153, -34, 52, -107, -106, 21, -104, 56,
	106, -152, 106, -37, -153, -153, -153, 52, 123, 21,
	-153, -34, -76, -74, 76, -37, -153, -153, -153, -153,
	-153, -46, -38, 10, 26, -86, 52, -153, -153, -153,
	52, 106, -79, -88, -37, -105, -83, 54, -130, 28,
	78, 54, -149, -148, -104, 54, -138, 169, 56, 57,
	58, 64, 53, -129, -129, 54, 104, 53, 52, 52,
	53, 52, -114, -152, -105, -46, -113, 54, 154, -144,
	54, -141, -33, 69, -58, -58, -153, -36, -106, 95,
	-109, -35, -105, -117, 104, 151, 129, 149, 145, 166,
	156, 171, 147, 172, -115, -117, 201, -79, 77, -37,
	75, -52, -39, -40, -41, -42, -49, -71, -152, -46,
	27, -69, 32, -7, -152, -104, -104, -83, -153, 157,
	57, 53, 52, -125, -139, 124, 27, 122, 56, 57,
	57, 29, -58, 106, -153, -153, -125, -125, -125, -136,
	-125, 139, -125, 139, -153, -153, -152, -31, 199, -37,
	-77, 12, 52, -43, -44, -45, 40, 44, 46, 41,
	42, 43, 47, -112, 21, -39, -152, -111, -110, 21,
	-108, 56, 8, -67, -7, 106, -114, 78, -148, -127,
	63, 27, 27, 53, 53, 54, 95, -128, 54, -58,
	-153, 56, -78, 13, 15, -40, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -44, -108, -153, -50,
	48, 120, 49, -110, -87, -153, -104, 54, 56, -30,
	88, 204, -37, -66, 50, 50, 40, 40, 117, 117,
	117, -153, 202, 47, 205, -37, -37, -152, -152, -152,
	37, 203, 206, -51, -104, -51, -51, 37, -153, 52,
	-153, -153, 204, -104, 205, 206,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	394, 0, 180, 180, 180, 180, 180, 0, 463, 446,
	0, 0, 0, 0, 0, 630, 630, 0, 630, 0,
	630, 630, 630, 630, 630, 630, 0, 31, 32, 628,
	1, 3, 402, 0, 0, 184, 187, 182, 446, 0,
	0, 0, 39, 0, 444, 0, 444, 464, 465, 466,
	467, 571, 572, 573, 574, 575, 576, 577, 578, 579,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 594, 595, 596, 597, 598, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 0, 447,
	442, 0, 442, 0, 0, 630, 553, 510, 554, 486,
	630, 630, 0, 630, 552, 157, 158, 159, 474, 475,
	476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	487, 488, 489, 490, 491, 492, 493, 494, 495, 496,
	497, 498, 499, 500, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	175, 470, 471, 150, 151, 630, 153, 630, 155, 156,
	176, 177, 178, 179, 25, 406, 0, 0, 394, 27,
	0, 180, 185, 186, 190, 188, 189, 181, 0, 0,
	240, 0, 35, 0, 430, 37, -2, 0, 0, 468,
	469, -2, 482, 436, 486, 510, 552, 553, 554, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 149, 160, 0, 173, 0, 0, 0,
	166, 167, 171, 169, 173, 152, 154, 26, 629, 21,
	0, 0, 403, 250, 0, 255, 257, 0, 292, 293,
	294, 295, 296, 0, 0, 0, 0, 0, 0, 318,
	319, 320, 321, 380, 381, 382, 383, 384, 385, 386,
	259, 260, 377, 0, 426, 0, 0, 0, 0, 0,
	0, 0, 368, 0, 342, 342, 342, 342, 342, 342,
	342, 342, 0, 0, 0, 0, -2, -2, 395, 396,
	399, 402, 25, 187, 0, 192, 191, 183, 0, 0,
	239, 0, 0, 248, 0, 36, 0, 118, 437, 438,
	439, 435, 0, 46, 0, 105, 101, 57, 58, 94,
	60, 94, 94, 94, 94, 115, 115, 115, 115, 86,
	87, 88, 89, 90, 0, 73, 94, 94, 94, 77,
	61, 62, 63, 64, 65, 66, 67, 96, 96, 96,
	98, 98, 41, 0, 0, 43, 0, 145, 443, 0,
	147, 630, 248, 0, 630, 630, 630, 402, 0, 630,
	407, 0, 0, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	280, 281, 282, 283, 256, 0, 270, 0, 0, 0,
	312, 313, 314, 315, 316, 0, 194, 0, 25, 0,
	290, 0, 0, 0, 0, 0, 0, 190, 0, 369,
	0, 334, 0, 335, 336, 337, 338, 339, 340, 341,
	0, 194, 0, 0, 0, 398, 400, 401, 406, 28,
	190, 0, 387, 0, 0, 0, 193, 419, 0, 0,
	-2, 0, 238, 248, 427, 0, 377, 0, 241, 472,
	473, 394, 0, 431, 432, 433, 0, 0, 44, 50,
	0, 53, 54, 0, 0, 0, 0, 132, 133, 108,
	106, 0, 103, 102, 59, 0, 115, 115, 80, 81,
	118, 0, 118, 118, 118, 0, 74, 75, 76, 68,
	0, 69, 70, 71, 0, 72, 445, 0, 630, 458,
	0, 455, 0, 453, 0, 448, 449, 450, 451, 452,
	454, 456, 457, 146, 161, 630, 174, 163, 164, 165,
	630, 0, 170, 0, 251, 252, 254, 271, 0, 273,
	275, 404, 405, 261, 262, 286, 287, 288, 0, 0,
	0, 0, 284, 266, 0, 297, 298, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 311, 353, 354,
	0, 309, 310, 317, 0, 0, 195, 196, 198, 202,
	0, 378, 0, -2, 289, 0, 425, 25, 0, 0,
	0, 0, 0, 0, 375, 372, 0, 0, 343, 0,
	0, 0, 0, 397, 22, 0, 440, 441, 388, 389,
	207, 29, 0, 419, 409, 421, 423, 0, 25, 0,
	415, 394, 0, 0, 0, 402, 249, 119, 0, 48,
	0, 0, 0, 128, 0, 130, 131, 113, 0, 107,
	56, 104, 0, 118, 118, 82, 0, 83, 84, 85,
	0, 92, 0, 0, 631, 137, 0, 630, 459, 460,
	461, 462, 0, 0, 0, 0, 0, 162, 168, 172,
	408, 272, 274, 276, 263, 284, 267, 0, 264, 0,
	0, 258, 322, 0, 0, 199, 203, 0, 205, 206,
	0, 194, 0, 291, -2, 325, 326, 0, 0, 0,
	0, 394, 0, 373, 0, 0, 333, 344, 345, 346,
	347, 23, 248, 0, 0, 30, 0, 424, -2, 0,
	0, 0, 402, 428, 429, 378, 34, 0, 45, 0,
	0, 47, 0, 134, 94, 129, 120, 114, 109, 110,
	111, 112, 95, 78, 79, 116, 117, 91, 0, 0,
	99, 0, 42, 632, 633, 138, 139, 140, 0, 142,
	143, 144, 265, 0, 285, 268, 323, 197, 204, 200,
	0, 0, 379, 0, 94, 94, 358, 94, 98, 361,
	94, 363, 94, 366, 0, 0, 0, 370, 332, 376,
	0, 390, 208, 209, 211, 212, 213, 221, 0, 223,
	0, 422, 0, -2, 0, 417, 416, 33, 631, 0,
	51, 127, 0, 136, 125, 0, 122, 124, 93, 0,
	0, 0, 269, 0, 324, 327, 355, 115, 359, 360,
	362, 364, 365, 367, 329, 328, 0, 0, 0, 374,
	392, 0, 0, 0, 0, 0, 228, 0, 0, 231,
	0, 0, 0, 0, 222, 0, 0, 242, 224, 0,
	226, 227, 0, 412, 25, 0, 40, 0, 135, 55,
	0, 121, 123, 97, 100, 141, 201, 356, 357, 348,
	331, 371, 24, 0, 0, 210, 217, 0, 220, 229,
	230, 232, 0, 234, 0, 236, 237, 214, 215, 216,
	0, 0, 0, 225, 420, -2, 418, 49, 126, 0,
	0, 0, 393, 391, 0, 0, 233, 235, 0, 0,
	0, 330, 0, 0, 0, 218, 219, 0, 0, 0,
	349, 0, 352, 0, 246, 0, 0, 350, 243, 0,
	244, 245, 0, 247, 0, 351,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 3, 98, 90, 3,
	51, 53, 95, 93, 52, 94, 106, 96, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 227,
	79, 78, 80, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 100, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 89, 3, 101,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 72, 73, 74, 75,
	76, 77, 81, 82, 83, 84, 85, 86, 87, 88,
	91, 92, 97, 99, 102, 103, 104, 105, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:274
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:279
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:280
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:284
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:306
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:314
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 23:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:318
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 24:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:331
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:335
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:341
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:352
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:363
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:375
		{
			yyVAL.str = InsertStr
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:379
		{
			yyVAL.str = ReplaceStr
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:385
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:391
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:397
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:401
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:407
		{
			yyVAL.str = SessionStr
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.str = GlobalStr
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:418
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:424
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyVAL.statement = yyDollar[1].ddl
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:431
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:439
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:446
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:470
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:474
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:479
		{
			yyVAL.str = ""
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:483
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:488
		{
			yyVAL.str = ""
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:492
		{
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:498
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:503
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:513
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[5].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[6].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[7].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:523
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:533
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:538
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:564
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:614
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:618
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:622
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:691
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:696
		{
			yyVAL.optVal = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:700
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:705
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:709
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:717
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:721
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:727
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:735
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:739
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:744
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:748
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:754
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:758
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:762
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:779
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:788
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:792
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:797
		{
			yyVAL.str = ""
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:801
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:805
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:810
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:814
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:819
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:823
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:827
		{
			yyVAL.colKeyOpt = ColKey
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:831
		{
			yyVAL.colKeyOpt = ColKeyUniqueKey
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:835
		{
			yyVAL.colKeyOpt = ColKeyUnique
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:840
		{
			yyVAL.optVal = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:844
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:850
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:860
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:864
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:868
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:878
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:888
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:894
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:900
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:904
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 139:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:909
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:914
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:918
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:922
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 143:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:926
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:930
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:937
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:945
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:950
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:960
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:966
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:972
		{
			yyVAL.statement = &Xa{}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:978
		{
			yyVAL.statement = &Explain{}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:984
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:990
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:994
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:998
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1002
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1012
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1055
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1059
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1063
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1067
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1081
		{
			yyVAL.tableName = TableName{}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1091
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.statement = &OtherRead{}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.statement = &OtherRead{}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1105
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1114
		{
			setAllowComments(yylex, true)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.bytes2 = nil
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1128
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.str = UnionStr
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.str = UnionAllStr
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.str = UnionDistinctStr
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.str = SQLCacheStr
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.str = DistinctStr
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.str = StraightJoinHint
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.selectExprs = nil
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1188
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1192
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1198
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1202
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1230
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1263
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1273
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1303
		{
			yyVAL.empty = struct{}{}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.empty = struct{}{}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1308
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1312
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1316
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.str = JoinStr
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.str = JoinStr
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.str = JoinStr
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.str = StraightJoinStr
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.str = LeftJoinStr
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.str = LeftJoinStr
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1355
		{
			yyVAL.str = RightJoinStr
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.str = RightJoinStr
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1365
		{
			yyVAL.str = NaturalJoinStr
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1369
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.indexHints = nil
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1402
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1410
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.expr = nil
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1485
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1497
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1501
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1505
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1509
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = IsNullStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.str = IsNotNullStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.str = IsTrueStr
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.str = IsNotTrueStr
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.str = IsFalseStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.str = IsNotFalseStr
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.str = EqualStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1557
		{
			yyVAL.str = LessThanStr
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.str = GreaterThanStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.str = LessEqualStr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.str = GreaterEqualStr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.str = NotEqualStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.expr = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1638
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1706
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1714
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1736
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 324:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1772
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1776
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 327:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 328:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 329:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 330:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1841
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1864
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1878
		{
			yyVAL.str = ""
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1882
		{
			yyVAL.str = BooleanModeStr
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1894
		{
			yyVAL.str = QueryExpansionStr
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1918
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1952
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1956
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1960
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = nil
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1974
		{
			yyVAL.str = string("")
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1978
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1984
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1988
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1994
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2039
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2043
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2047
		{
			yyVAL.expr = &NullVal{}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2053
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.exprs = nil
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.expr = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.orderBy = nil
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.str = AscScr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.str = AscScr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.str = DescScr
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.limit = nil
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.str = ""
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.str = ForUpdateStr
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.str = ShareModeStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2186
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2210
		{
			yyVAL.updateExprs = nil
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2214
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2224
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2246
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2260
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2286
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2293
		{
			yyVAL.bytes = []byte("charset")
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.expr = &Default{}
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.byt = 0
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2320
		{
			yyVAL.byt = 1
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.byt = 0
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2325
		{
			yyVAL.byt = 1
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.str = IgnoreStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.empty = struct{}{}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.empty = struct{}{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2355
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2372
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2584
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			decNesting(yylex)
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2598
		{
			forceEOF(yylex)
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2603
		{
			forceEOF(yylex)
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			forceEOF(yylex)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2611
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
