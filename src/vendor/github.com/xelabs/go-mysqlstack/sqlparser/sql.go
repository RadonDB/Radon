//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptions          TableOptions
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const STATUS = 57513
const COLUMNS = 57514
const CURRENT_TIMESTAMP = 57515
const DATABASE = 57516
const CURRENT_DATE = 57517
const CURRENT_TIME = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const UTC_DATE = 57521
const UTC_TIME = 57522
const UTC_TIMESTAMP = 57523
const REPLACE = 57524
const CONVERT = 57525
const CAST = 57526
const GROUP_CONCAT = 57527
const SEPARATOR = 57528
const MATCH = 57529
const AGAINST = 57530
const BOOLEAN = 57531
const LANGUAGE = 57532
const WITH = 57533
const QUERY = 57534
const EXPANSION = 57535
const UNUSED = 57536
const PARTITION = 57537
const PARTITIONS = 57538
const HASH = 57539
const XA = 57540
const DISTRIBUTED = 57541
const ENGINES = 57542
const VERSIONS = 57543
const PROCESSLIST = 57544
const QUERYZ = 57545
const TXNZ = 57546
const KILL = 57547
const ENGINE = 57548
const SINGLE = 57549
const BEGIN = 57550
const START = 57551
const TRANSACTION = 57552
const COMMIT = 57553
const ROLLBACK = 57554
const GLOBAL = 57555
const SESSION = 57556
const NAMES = 57557
const RADON = 57558
const ATTACH = 57559
const ATTACHLIST = 57560
const DETACH = 57561
const RESHARD = 57562

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 293,
	83, 650,
	-2, 40,
	-1, 298,
	83, 528,
	-2, 476,
	-1, 402,
	111, 512,
	-2, 508,
	-1, 403,
	111, 513,
	-2, 509,
	-1, 469,
	1, 46,
	238, 46,
	-2, 52,
	-1, 585,
	5, 27,
	-2, 452,
	-1, 660,
	1, 47,
	238, 47,
	-2, 52,
	-1, 745,
	111, 515,
	-2, 511,
	-1, 869,
	5, 28,
	-2, 331,
	-1, 893,
	5, 28,
	-2, 453,
	-1, 979,
	5, 27,
	-2, 455,
	-1, 1085,
	5, 28,
	-2, 456,
}

const yyPrivate = 57344

const yyLast = 7058

var yyAct = [...]int{

	403, 491, 1114, 909, 1041, 970, 1027, 356, 380, 774,
	351, 775, 588, 1038, 656, 378, 272, 928, 949, 736,
	643, 56, 596, 545, 3, 729, 924, 862, 358, 854,
	66, 74, 637, 739, 310, 589, 134, 771, 254, 969,
	600, 755, 706, 494, 661, 309, 72, 618, 744, 297,
	612, 345, 405, 411, 480, 291, 289, 55, 260, 606,
	381, 50, 602, 94, 254, 87, 74, 60, 312, 281,
	652, 306, 354, 988, 271, 307, 1126, 82, 1113, 987,
	1125, 296, 257, 1105, 91, 133, 1123, 97, 92, 1051,
	294, 1112, 962, 62, 63, 64, 65, 1021, 343, 263,
	265, 264, 266, 328, 1104, 73, 118, 119, 913, 333,
	690, 50, 332, 326, 78, 811, 636, 791, 989, 277,
	1058, 825, 254, 254, 934, 801, 802, 803, 644, 741,
	1016, 1014, 839, 804, 838, 837, 319, 1080, 1082, 117,
	512, 511, 521, 522, 514, 515, 516, 517, 518, 519,
	520, 513, 556, 314, 523, 836, 512, 511, 521, 522,
	514, 515, 516, 517, 518, 519, 520, 513, 738, 106,
	523, 828, 615, 329, 827, 615, 120, 496, 1100, 79,
	1099, 96, 1098, 104, 76, 315, 317, 251, 122, 834,
	121, 318, 496, 81, 86, 601, 855, 102, 103, 80,
	110, 535, 536, 77, 1048, 1006, 93, 896, 101, 1081,
	868, 796, 866, 784, 544, 872, 89, 83, 418, 644,
	513, 98, 1003, 523, 523, 498, 107, 108, 109, 258,
	501, 500, 499, 1050, 100, 1090, 512, 511, 521, 522,
	514, 515, 516, 517, 518, 519, 520, 513, 501, 1001,
	523, 75, 254, 90, 805, 95, 85, 105, 1103, 917,
	516, 517, 518, 519, 520, 513, 925, 254, 523, 84,
	99, 614, 338, 340, 614, 495, 88, 906, 713, 111,
	112, 114, 113, 115, 499, 873, 254, 835, 833, 254,
	495, 74, 711, 712, 710, 792, 74, 407, 783, 1002,
	501, 408, 422, 964, 756, 756, 296, 879, 470, 918,
	800, 424, 321, 313, 254, 500, 499, 254, 254, 254,
	500, 499, 254, 53, 339, 339, 254, 966, 254, 254,
	254, 939, 501, 709, 699, 701, 702, 501, 50, 950,
	700, 847, 848, 849, 413, 116, 409, 421, 996, 995,
	1091, 512, 511, 521, 522, 514, 515, 516, 517, 518,
	519, 520, 513, 952, 990, 523, 730, 823, 731, 1061,
	537, 538, 539, 540, 541, 542, 822, 812, 336, 954,
	994, 958, 533, 953, 316, 951, 843, 821, 487, 808,
	956, 514, 515, 516, 517, 518, 519, 520, 513, 1087,
	955, 523, 999, 348, 406, 957, 959, 1055, 285, 1120,
	344, 74, 936, 532, 534, 933, 254, 1025, 344, 254,
	912, 74, 992, 991, 573, 590, 577, 911, 907, 998,
	860, 344, 312, 591, 923, 922, 296, 874, 585, 543,
	797, 503, 546, 547, 548, 549, 550, 551, 552, 787,
	555, 557, 557, 557, 557, 557, 557, 557, 557, 565,
	566, 567, 568, 732, 645, 646, 647, 593, 595, 492,
	344, 639, 640, 641, 642, 586, 598, 607, 254, 575,
	504, 502, 254, 658, 500, 499, 649, 650, 651, 471,
	603, 920, 919, 571, 572, 254, 320, 500, 499, 895,
	344, 501, 689, 684, 692, 344, 22, 574, 431, 430,
	1054, 492, 1053, 914, 501, 707, 705, 888, 554, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 692, 708, 654, 655, 500, 499,
	782, 891, 24, 74, 558, 559, 560, 561, 562, 563,
	564, 772, 599, 782, 1025, 501, 74, 597, 735, 921,
	296, 860, 57, 681, 860, 276, 24, 632, 631, 583,
	747, 757, 420, 584, 24, 569, 278, 628, 53, 370,
	369, 371, 372, 373, 374, 638, 760, 74, 375, 657,
	693, 590, 53, 776, 745, 50, 773, 978, 67, 591,
	634, 581, 780, 782, 312, 860, 753, 546, 733, 734,
	778, 781, 793, 633, 626, 653, 53, 648, 785, 1094,
	627, 772, 763, 1097, 53, 764, 53, 665, 477, 696,
	697, 1073, 703, 704, 1071, 743, 1074, 1096, 789, 1072,
	1075, 1070, 1033, 1034, 746, 777, 1069, 50, 1029, 1032,
	1033, 1034, 1030, 678, 1031, 1035, 758, 1118, 1095, 1111,
	813, 814, 795, 788, 798, 799, 254, 282, 283, 846,
	695, 677, 769, 630, 768, 1004, 492, 905, 346, 750,
	751, 927, 254, 412, 815, 816, 817, 818, 819, 1029,
	1032, 1033, 1034, 1030, 347, 1031, 1035, 410, 680, 406,
	427, 417, 663, 889, 664, 824, 476, 676, 1037, 279,
	280, 831, 412, 976, 807, 806, 748, 749, 629, 707,
	752, 794, 851, 852, 853, 1101, 1088, 786, 273, 1064,
	767, 429, 428, 274, 759, 57, 761, 762, 766, 708,
	1063, 1024, 74, 597, 481, 486, 327, 856, 325, 770,
	288, 1045, 809, 850, 673, 671, 667, 864, 670, 672,
	497, 59, 61, 54, 1, 660, 254, 512, 511, 521,
	522, 514, 515, 516, 517, 518, 519, 520, 513, 659,
	617, 523, 616, 908, 609, 604, 308, 608, 820, 312,
	590, 623, 622, 621, 74, 619, 878, 675, 591, 810,
	296, 635, 901, 897, 867, 1000, 662, 826, 997, 910,
	986, 890, 674, 790, 605, 904, 624, 625, 898, 620,
	434, 435, 844, 902, 433, 437, 436, 432, 123, 290,
	74, 857, 254, 1036, 745, 858, 1040, 861, 69, 669,
	312, 832, 666, 531, 765, 296, 869, 870, 871, 295,
	679, 875, 423, 926, 915, 916, 881, 779, 882, 883,
	884, 885, 668, 570, 74, 404, 940, 941, 935, 74,
	1062, 1023, 877, 553, 754, 900, 892, 893, 894, 864,
	357, 938, 296, 698, 296, 937, 880, 947, 903, 254,
	929, 944, 368, 961, 943, 365, 74, 74, 963, 960,
	776, 367, 968, 977, 74, 366, 859, 492, 576, 582,
	967, 981, 982, 899, 983, 946, 745, 973, 979, 296,
	930, 985, 876, 505, 355, 349, 1079, 972, 379, 474,
	512, 511, 521, 522, 514, 515, 516, 517, 518, 519,
	520, 513, 414, 993, 523, 1028, 1026, 971, 887, 974,
	1005, 975, 777, 485, 1020, 980, 1089, 743, 942, 948,
	580, 25, 58, 284, 929, 14, 252, 21, 15, 1012,
	13, 12, 29, 10, 9, 254, 254, 8, 7, 6,
	5, 4, 275, 1009, 1010, 74, 1011, 776, 1046, 1013,
	23, 1015, 287, 74, 930, 2, 1052, 20, 19, 18,
	296, 984, 1049, 973, 1047, 17, 16, 74, 910, 965,
	11, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 296, 1019, 0, 0, 254, 254, 254, 254,
	1059, 1057, 1066, 0, 1068, 1039, 0, 254, 0, 777,
	254, 50, 1076, 254, 0, 929, 1007, 1083, 1008, 74,
	287, 287, 0, 590, 973, 973, 973, 973, 1084, 1017,
	1018, 591, 0, 747, 1086, 1065, 1093, 1067, 973, 0,
	0, 0, 0, 322, 323, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 974, 974, 974, 974,
	0, 0, 0, 0, 0, 0, 1022, 948, 0, 0,
	1039, 0, 0, 255, 0, 0, 0, 0, 0, 74,
	74, 74, 1116, 1117, 0, 0, 0, 0, 0, 1060,
	0, 74, 0, 0, 1115, 1115, 1115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 1078, 0, 0,
	0, 0, 0, 256, 0, 259, 1085, 261, 262, 0,
	267, 268, 269, 270, 0, 0, 0, 0, 0, 1108,
	1109, 1110, 511, 521, 522, 514, 515, 516, 517, 518,
	519, 520, 513, 0, 0, 523, 0, 0, 0, 0,
	287, 24, 51, 26, 27, 0, 0, 0, 1102, 0,
	0, 0, 0, 1092, 492, 287, 0, 0, 0, 0,
	0, 0, 0, 334, 46, 0, 0, 0, 28, 0,
	0, 36, 0, 1119, 287, 1121, 1122, 287, 342, 0,
	0, 0, 0, 0, 1106, 1107, 0, 324, 37, 0,
	0, 53, 330, 331, 0, 0, 0, 416, 0, 0,
	419, 0, 469, 0, 0, 287, 287, 287, 0, 0,
	478, 0, 0, 0, 287, 0, 287, 287, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 472, 473,
	475, 0, 0, 0, 0, 0, 0, 479, 0, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 30,
	31, 32, 0, 34, 0, 440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 47, 39, 0, 0,
	48, 49, 33, 0, 0, 0, 0, 0, 0, 452,
	0, 0, 0, 0, 457, 458, 459, 460, 461, 462,
	463, 0, 464, 465, 466, 467, 468, 453, 454, 455,
	456, 438, 439, 0, 287, 441, 592, 594, 442, 443,
	444, 445, 446, 447, 448, 449, 450, 451, 0, 0,
	0, 335, 0, 0, 337, 0, 0, 587, 0, 341,
	0, 0, 0, 0, 52, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 0, 0, 523, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	41, 42, 0, 44, 43, 0, 287, 0, 45, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 682,
	0, 0, 0, 685, 0, 0, 0, 0, 488, 0,
	489, 507, 490, 510, 493, 0, 694, 0, 0, 524,
	525, 526, 527, 528, 529, 530, 0, 508, 509, 506,
	512, 511, 521, 522, 514, 515, 516, 517, 518, 519,
	520, 513, 742, 594, 523, 0, 742, 742, 0, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 742, 742, 742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 592, 0, 0, 0, 94, 0, 87, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	97, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	865, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 500, 499, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 686, 687, 688, 501,
	0, 691, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 829, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 840, 96, 0, 104, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 86, 0, 0,
	102, 103, 80, 110, 0, 0, 77, 0, 0, 93,
	0, 101, 0, 0, 0, 0, 742, 0, 0, 89,
	83, 0, 0, 0, 98, 0, 0, 0, 0, 107,
	108, 109, 742, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 90, 0, 95, 85,
	105, 592, 0, 594, 0, 0, 0, 886, 0, 0,
	0, 0, 84, 99, 0, 94, 0, 613, 0, 88,
	611, 615, 111, 112, 114, 113, 115, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 97,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	830, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 841, 742,
	0, 0, 0, 842, 0, 594, 742, 0, 845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 106, 0, 0, 0, 0, 610, 0, 0, 0,
	0, 79, 0, 96, 0, 104, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 86, 0, 0, 102,
	103, 80, 110, 0, 0, 77, 0, 0, 93, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 89, 83,
	0, 0, 0, 98, 0, 0, 0, 0, 107, 108,
	109, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 287, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 90, 0, 95, 85, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 99, 0, 0, 0, 932, 0, 88, 0,
	0, 111, 112, 114, 113, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 287, 287, 287, 0, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 287, 0,
	0, 1043, 0, 0, 592, 234, 221, 181, 237, 158,
	173, 249, 174, 175, 211, 143, 191, 94, 171, 87,
	0, 0, 235, 188, 0, 161, 136, 168, 137, 159,
	185, 82, 157, 223, 194, 125, 0, 243, 91, 203,
	0, 97, 92, 0, 0, 187, 226, 189, 220, 180,
	212, 150, 202, 238, 172, 208, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 205,
	232, 170, 207, 210, 135, 204, 0, 139, 144, 248,
	230, 164, 165, 0, 0, 0, 0, 0, 0, 0,
	186, 190, 217, 178, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 0, 201, 0, 0, 0, 148, 141,
	184, 0, 0, 0, 127, 0, 163, 218, 0, 0,
	0, 131, 179, 106, 231, 177, 176, 239, 214, 0,
	224, 160, 169, 79, 167, 96, 209, 104, 76, 228,
	225, 199, 182, 183, 140, 0, 216, 81, 86, 156,
	206, 102, 103, 80, 110, 145, 245, 77, 146, 244,
	93, 147, 101, 229, 200, 196, 142, 227, 198, 195,
	89, 83, 0, 138, 0, 98, 236, 250, 155, 124,
	107, 108, 109, 128, 129, 0, 130, 0, 100, 126,
	153, 154, 151, 152, 192, 193, 240, 241, 242, 219,
	149, 0, 0, 222, 197, 75, 0, 90, 247, 95,
	85, 105, 0, 0, 0, 0, 0, 166, 246, 215,
	213, 233, 0, 84, 99, 0, 0, 0, 0, 0,
	88, 0, 0, 111, 112, 114, 113, 115, 234, 221,
	181, 237, 158, 173, 249, 174, 175, 211, 143, 191,
	94, 171, 87, 0, 0, 235, 188, 0, 161, 136,
	168, 137, 159, 185, 82, 157, 223, 194, 303, 0,
	243, 91, 203, 0, 97, 92, 0, 0, 187, 226,
	189, 220, 180, 212, 150, 202, 238, 172, 208, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 205, 232, 170, 207, 210, 135, 204, 0,
	139, 144, 248, 230, 164, 165, 0, 0, 0, 0,
	0, 0, 0, 186, 190, 217, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 0, 201, 0, 0,
	0, 148, 141, 184, 0, 0, 0, 302, 0, 163,
	218, 0, 0, 0, 304, 179, 106, 231, 177, 176,
	239, 214, 0, 224, 160, 169, 79, 167, 96, 209,
	104, 76, 228, 225, 199, 182, 183, 140, 0, 216,
	81, 86, 156, 206, 102, 103, 80, 110, 145, 245,
	77, 299, 244, 93, 298, 101, 229, 200, 196, 142,
	227, 198, 195, 89, 83, 0, 138, 0, 98, 236,
	250, 155, 305, 107, 108, 109, 0, 0, 0, 0,
	0, 100, 301, 153, 154, 151, 152, 192, 193, 240,
	241, 242, 219, 149, 0, 0, 222, 197, 75, 0,
	90, 247, 95, 85, 105, 0, 0, 0, 0, 0,
	166, 246, 215, 213, 233, 0, 84, 99, 0, 0,
	0, 0, 0, 293, 292, 300, 111, 112, 114, 113,
	115, 234, 221, 181, 237, 158, 173, 249, 174, 175,
	211, 143, 191, 94, 171, 87, 0, 0, 235, 188,
	0, 161, 136, 168, 137, 159, 185, 82, 157, 223,
	194, 303, 0, 243, 91, 203, 0, 97, 92, 0,
	0, 187, 226, 189, 220, 180, 212, 150, 202, 238,
	172, 208, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 205, 232, 170, 207, 210,
	135, 204, 0, 139, 144, 248, 230, 164, 165, 0,
	0, 0, 0, 0, 0, 0, 186, 190, 217, 178,
	0, 0, 0, 0, 0, 0, 1056, 0, 162, 0,
	201, 0, 0, 0, 148, 141, 184, 0, 0, 0,
	302, 0, 163, 218, 0, 0, 0, 304, 179, 106,
	231, 177, 176, 239, 214, 0, 224, 160, 169, 79,
	167, 96, 209, 104, 76, 228, 225, 199, 182, 183,
	140, 0, 216, 81, 86, 156, 206, 102, 103, 80,
	110, 145, 245, 77, 146, 244, 93, 147, 101, 229,
	200, 196, 142, 227, 198, 195, 89, 83, 0, 138,
	0, 98, 236, 250, 155, 305, 107, 108, 109, 0,
	0, 0, 0, 0, 100, 301, 153, 154, 151, 152,
	192, 193, 240, 241, 242, 219, 149, 0, 0, 222,
	197, 75, 0, 90, 247, 95, 85, 105, 0, 0,
	0, 0, 0, 166, 246, 215, 213, 233, 0, 84,
	99, 0, 0, 0, 0, 0, 88, 0, 0, 111,
	112, 114, 113, 115, 234, 221, 181, 237, 158, 173,
	249, 174, 175, 211, 143, 191, 94, 171, 87, 0,
	0, 235, 188, 0, 161, 136, 168, 137, 159, 185,
	82, 157, 223, 194, 303, 0, 243, 91, 203, 0,
	97, 92, 0, 0, 187, 226, 189, 220, 180, 212,
	150, 202, 238, 172, 208, 53, 0, 0, 73, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 205, 232,
	170, 207, 210, 135, 204, 0, 139, 144, 248, 230,
	164, 165, 0, 0, 0, 0, 0, 0, 0, 186,
	190, 217, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 201, 0, 0, 0, 148, 141, 184,
	0, 0, 0, 302, 0, 163, 218, 0, 0, 0,
	304, 179, 106, 231, 177, 176, 239, 214, 0, 224,
	160, 169, 79, 167, 96, 209, 104, 76, 228, 225,
	199, 182, 183, 140, 0, 216, 81, 86, 156, 206,
	102, 103, 80, 110, 145, 245, 77, 146, 244, 93,
	147, 101, 229, 200, 196, 142, 227, 198, 195, 89,
	83, 0, 138, 0, 98, 236, 250, 155, 305, 107,
	108, 109, 0, 0, 0, 0, 0, 100, 301, 153,
	154, 151, 152, 192, 193, 240, 241, 242, 219, 149,
	0, 0, 222, 197, 75, 0, 90, 247, 95, 85,
	105, 0, 0, 0, 0, 0, 166, 246, 215, 213,
	233, 0, 84, 99, 0, 0, 0, 0, 0, 88,
	0, 0, 111, 112, 114, 113, 115, 234, 221, 181,
	237, 158, 173, 249, 174, 175, 211, 143, 191, 94,
	171, 87, 0, 0, 235, 188, 0, 161, 136, 168,
	137, 159, 185, 82, 157, 223, 194, 303, 0, 243,
	91, 203, 0, 97, 92, 0, 0, 187, 226, 189,
	220, 180, 212, 150, 202, 238, 172, 208, 0, 0,
	0, 402, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 205, 232, 170, 207, 210, 135, 204, 0, 139,
	144, 248, 230, 164, 165, 0, 0, 0, 0, 0,
	0, 0, 186, 190, 217, 178, 0, 0, 0, 0,
	0, 0, 945, 0, 162, 0, 201, 0, 0, 0,
	148, 141, 184, 0, 0, 0, 302, 0, 163, 218,
	0, 0, 0, 304, 179, 106, 231, 177, 176, 239,
	214, 0, 224, 160, 169, 79, 167, 96, 209, 104,
	76, 228, 225, 199, 182, 183, 140, 0, 216, 81,
	86, 156, 206, 102, 103, 80, 110, 145, 245, 77,
	146, 244, 93, 147, 101, 229, 200, 196, 142, 227,
	198, 195, 89, 83, 0, 138, 0, 98, 236, 250,
	155, 305, 107, 108, 109, 0, 0, 0, 0, 0,
	100, 301, 153, 154, 151, 152, 192, 193, 240, 241,
	242, 219, 149, 0, 0, 222, 197, 75, 0, 90,
	247, 95, 85, 105, 0, 0, 0, 0, 0, 166,
	246, 215, 213, 233, 0, 84, 99, 0, 0, 0,
	0, 0, 88, 0, 0, 111, 112, 114, 113, 115,
	234, 221, 181, 237, 158, 173, 249, 174, 175, 211,
	143, 191, 94, 171, 87, 0, 0, 235, 188, 0,
	161, 136, 168, 137, 159, 185, 82, 157, 223, 194,
	303, 0, 243, 91, 203, 0, 97, 92, 0, 0,
	187, 226, 189, 220, 180, 212, 150, 202, 238, 172,
	208, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 205, 232, 170, 207, 210, 135,
	204, 0, 139, 144, 248, 230, 164, 165, 0, 0,
	0, 0, 0, 0, 0, 186, 190, 217, 178, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 0, 201,
	0, 0, 0, 148, 141, 184, 0, 0, 0, 302,
	0, 163, 218, 0, 0, 0, 304, 179, 106, 231,
	177, 176, 239, 214, 0, 224, 160, 169, 79, 167,
	96, 209, 104, 76, 228, 225, 199, 182, 183, 140,
	0, 216, 81, 86, 156, 206, 102, 103, 80, 110,
	145, 245, 77, 299, 244, 93, 298, 101, 229, 200,
	196, 142, 227, 198, 195, 89, 83, 0, 138, 0,
	98, 236, 250, 155, 305, 107, 108, 109, 0, 0,
	0, 0, 0, 100, 301, 153, 154, 151, 152, 192,
	193, 240, 241, 242, 219, 149, 0, 0, 222, 197,
	75, 0, 90, 247, 95, 85, 105, 0, 0, 0,
	0, 0, 166, 246, 215, 213, 233, 0, 84, 99,
	0, 0, 0, 0, 0, 88, 0, 300, 111, 112,
	114, 113, 115, 234, 221, 181, 237, 158, 173, 249,
	174, 175, 211, 143, 191, 94, 171, 87, 0, 0,
	235, 188, 0, 161, 136, 168, 137, 159, 185, 82,
	157, 223, 194, 303, 0, 243, 91, 203, 0, 97,
	92, 0, 0, 187, 226, 189, 220, 180, 212, 150,
	202, 238, 172, 208, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 205, 232, 170,
	207, 210, 135, 204, 0, 139, 144, 248, 230, 164,
	165, 0, 0, 0, 0, 0, 0, 0, 186, 190,
	217, 178, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 0, 201, 0, 0, 0, 148, 141, 184, 0,
	0, 0, 302, 0, 163, 218, 0, 0, 0, 304,
	179, 106, 231, 177, 176, 239, 214, 0, 224, 160,
	169, 79, 167, 96, 209, 104, 76, 228, 225, 199,
	182, 183, 140, 0, 216, 81, 86, 156, 206, 102,
	103, 80, 110, 145, 245, 77, 146, 244, 93, 147,
	101, 229, 200, 196, 142, 227, 198, 195, 89, 83,
	0, 138, 0, 98, 236, 250, 155, 305, 107, 108,
	109, 0, 0, 0, 0, 0, 100, 301, 153, 154,
	151, 152, 192, 193, 240, 241, 242, 219, 149, 0,
	0, 222, 197, 75, 0, 90, 247, 95, 85, 105,
	0, 0, 0, 0, 0, 166, 246, 215, 213, 233,
	0, 84, 99, 0, 0, 0, 0, 0, 88, 0,
	0, 111, 112, 114, 113, 115, 234, 221, 181, 237,
	158, 173, 249, 174, 175, 211, 143, 191, 94, 171,
	87, 0, 0, 235, 188, 0, 161, 136, 168, 137,
	159, 185, 82, 157, 223, 194, 303, 0, 243, 91,
	203, 0, 97, 92, 0, 0, 187, 226, 189, 220,
	180, 212, 150, 202, 238, 172, 208, 0, 0, 0,
	402, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	205, 232, 170, 207, 210, 135, 204, 0, 139, 144,
	248, 230, 164, 165, 0, 0, 0, 0, 0, 0,
	0, 186, 190, 217, 178, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 0, 201, 0, 0, 0, 148,
	141, 184, 0, 0, 0, 302, 0, 163, 218, 0,
	0, 0, 304, 179, 106, 231, 177, 176, 239, 214,
	0, 224, 160, 169, 79, 167, 96, 209, 104, 76,
	228, 225, 199, 182, 183, 140, 0, 216, 81, 86,
	156, 206, 102, 103, 80, 110, 145, 245, 77, 146,
	244, 93, 147, 101, 229, 200, 196, 142, 227, 198,
	195, 89, 83, 0, 138, 0, 98, 236, 250, 155,
	305, 107, 108, 109, 0, 0, 0, 0, 0, 100,
	301, 153, 154, 151, 152, 192, 193, 240, 241, 242,
	219, 149, 0, 0, 222, 197, 75, 0, 90, 247,
	95, 85, 105, 0, 0, 0, 0, 0, 166, 246,
	215, 213, 233, 0, 84, 99, 0, 0, 0, 0,
	0, 88, 0, 0, 111, 112, 114, 113, 115, 234,
	221, 181, 237, 158, 173, 249, 174, 175, 211, 143,
	191, 94, 171, 87, 0, 0, 235, 188, 0, 161,
	136, 168, 137, 159, 185, 82, 157, 223, 194, 303,
	0, 243, 91, 203, 0, 97, 92, 0, 0, 187,
	226, 189, 220, 180, 212, 150, 202, 238, 172, 208,
	0, 0, 0, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 205, 232, 170, 207, 210, 135, 204,
	0, 139, 144, 248, 230, 164, 165, 0, 0, 0,
	0, 0, 0, 0, 186, 190, 217, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 0, 201, 0,
	0, 0, 148, 141, 184, 0, 0, 0, 302, 0,
	163, 218, 0, 0, 0, 304, 179, 106, 231, 177,
	176, 239, 214, 0, 224, 160, 169, 79, 167, 96,
	209, 104, 76, 228, 225, 199, 182, 183, 140, 0,
	216, 81, 86, 156, 206, 102, 103, 80, 110, 145,
	245, 77, 146, 244, 93, 147, 101, 229, 200, 196,
	142, 227, 198, 195, 89, 83, 0, 138, 0, 98,
	236, 250, 155, 305, 107, 108, 109, 0, 0, 0,
	0, 0, 100, 301, 153, 154, 151, 152, 192, 193,
	240, 241, 242, 219, 149, 0, 0, 222, 197, 75,
	0, 90, 247, 95, 85, 105, 0, 0, 0, 0,
	0, 166, 246, 215, 213, 233, 0, 84, 99, 0,
	0, 0, 0, 0, 88, 0, 0, 111, 112, 114,
	113, 115, 94, 0, 87, 0, 0, 0, 0, 0,
	737, 0, 353, 0, 0, 0, 82, 352, 0, 0,
	0, 0, 389, 91, 0, 0, 97, 92, 0, 0,
	0, 0, 382, 383, 0, 0, 0, 0, 0, 0,
	0, 53, 0, 0, 402, 370, 369, 371, 372, 373,
	374, 0, 0, 78, 375, 376, 377, 0, 0, 0,
	350, 363, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 360, 361, 740, 0, 0, 0, 400,
	0, 362, 0, 0, 359, 364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 398, 0, 0, 0, 0, 0, 0, 79, 0,
	96, 0, 104, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 86, 0, 0, 102, 103, 80, 110,
	0, 0, 77, 0, 0, 93, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 89, 83, 0, 0, 0,
	98, 0, 0, 0, 0, 107, 108, 109, 0, 0,
	0, 0, 0, 100, 0, 390, 399, 396, 397, 394,
	395, 393, 392, 391, 401, 384, 385, 387, 0, 386,
	75, 0, 90, 0, 95, 85, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 99,
	0, 0, 0, 0, 94, 88, 87, 0, 111, 112,
	114, 113, 115, 0, 353, 0, 0, 0, 82, 352,
	0, 0, 0, 0, 389, 91, 0, 0, 97, 92,
	0, 0, 0, 0, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 53, 0, 0, 402, 370, 369, 371,
	372, 373, 374, 0, 0, 78, 375, 376, 377, 0,
	0, 0, 350, 363, 0, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 360, 361, 740, 0, 0,
	0, 400, 0, 362, 0, 0, 359, 364, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 398, 0, 0, 0, 0, 0, 0,
	79, 0, 96, 0, 104, 76, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 86, 0, 0, 102, 103,
	80, 110, 0, 0, 77, 0, 0, 93, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 89, 83, 0,
	0, 0, 98, 0, 0, 0, 0, 107, 108, 109,
	0, 0, 0, 0, 0, 100, 0, 390, 399, 396,
	397, 394, 395, 393, 392, 391, 401, 384, 385, 387,
	0, 386, 75, 0, 90, 0, 95, 85, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 99, 0, 0, 0, 0, 94, 88, 87, 0,
	111, 112, 114, 113, 115, 0, 353, 0, 0, 0,
	82, 352, 0, 0, 0, 0, 389, 91, 0, 0,
	97, 92, 0, 0, 0, 0, 382, 383, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 344, 402, 370,
	369, 371, 372, 373, 374, 0, 0, 78, 375, 376,
	377, 0, 0, 0, 350, 363, 0, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 360, 361, 0,
	0, 0, 0, 400, 0, 362, 0, 0, 359, 364,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 398, 0, 0, 0, 0,
	0, 0, 79, 0, 96, 0, 104, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 86, 0, 0,
	102, 103, 80, 110, 0, 0, 77, 0, 0, 93,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 89,
	83, 0, 0, 0, 98, 0, 0, 0, 0, 107,
	108, 109, 0, 0, 0, 0, 0, 100, 0, 390,
	399, 396, 397, 394, 395, 393, 392, 391, 401, 384,
	385, 387, 0, 386, 75, 0, 90, 0, 95, 85,
	105, 0, 0, 0, 0, 0, 0, 24, 0, 0,
	0, 0, 84, 99, 0, 0, 0, 0, 94, 88,
	87, 0, 111, 112, 114, 113, 115, 0, 353, 0,
	0, 0, 82, 352, 0, 0, 0, 0, 389, 91,
	0, 0, 97, 92, 0, 0, 0, 0, 382, 383,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	402, 370, 369, 371, 372, 373, 374, 0, 0, 78,
	375, 376, 377, 0, 0, 0, 350, 363, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 360,
	361, 0, 0, 0, 0, 400, 0, 362, 0, 0,
	359, 364, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 398, 0, 0,
	0, 0, 0, 0, 79, 0, 96, 0, 104, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 86,
	0, 0, 102, 103, 80, 110, 0, 0, 77, 0,
	0, 93, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 89, 83, 0, 0, 0, 98, 0, 0, 0,
	0, 107, 108, 109, 0, 0, 0, 0, 0, 100,
	0, 390, 399, 396, 397, 394, 395, 393, 392, 391,
	401, 384, 385, 387, 0, 386, 75, 0, 90, 0,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 99, 0, 0, 0, 0,
	94, 88, 87, 0, 111, 112, 114, 113, 115, 0,
	353, 0, 0, 0, 82, 352, 0, 0, 0, 0,
	389, 91, 0, 0, 97, 92, 0, 0, 0, 0,
	382, 383, 0, 0, 0, 0, 0, 0, 0, 53,
	0, 0, 402, 370, 369, 371, 372, 373, 374, 0,
	0, 78, 375, 376, 377, 0, 0, 0, 350, 363,
	0, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 361, 0, 0, 0, 0, 400, 0, 362,
	0, 0, 359, 364, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 398,
	0, 0, 0, 0, 0, 0, 79, 0, 96, 0,
	104, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 86, 0, 0, 102, 103, 80, 110, 0, 0,
	77, 0, 0, 93, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 89, 83, 0, 0, 0, 98, 0,
	0, 0, 0, 107, 108, 109, 0, 0, 0, 0,
	0, 100, 0, 390, 399, 396, 397, 394, 395, 393,
	392, 391, 401, 384, 385, 387, 0, 386, 75, 0,
	90, 0, 95, 85, 105, 0, 0, 0, 0, 0,
	0, 94, 0, 87, 0, 0, 84, 99, 0, 0,
	0, 0, 0, 88, 0, 82, 111, 112, 114, 113,
	115, 389, 91, 0, 0, 97, 92, 0, 0, 0,
	0, 382, 383, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 402, 370, 369, 371, 372, 373, 374,
	0, 0, 78, 375, 376, 377, 0, 0, 0, 0,
	363, 0, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 360, 361, 0, 0, 0, 0, 400, 0,
	362, 0, 0, 359, 364, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 94,
	398, 87, 0, 0, 71, 0, 0, 79, 0, 96,
	0, 104, 76, 82, 0, 0, 0, 0, 0, 0,
	91, 81, 86, 97, 92, 102, 103, 80, 110, 0,
	0, 77, 0, 0, 93, 0, 101, 0, 0, 0,
	0, 73, 0, 0, 89, 83, 0, 0, 0, 98,
	78, 0, 0, 0, 107, 108, 109, 0, 0, 0,
	0, 0, 100, 0, 390, 399, 396, 397, 394, 395,
	393, 392, 391, 401, 384, 385, 387, 0, 386, 75,
	0, 90, 0, 95, 85, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 99, 0,
	0, 0, 0, 70, 88, 106, 0, 111, 112, 114,
	113, 115, 0, 0, 0, 79, 0, 96, 0, 104,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	86, 0, 0, 102, 103, 80, 110, 0, 0, 77,
	0, 0, 93, 0, 101, 0, 0, 24, 0, 0,
	0, 0, 89, 83, 0, 0, 0, 98, 94, 0,
	87, 0, 107, 108, 109, 0, 0, 0, 0, 0,
	100, 0, 82, 68, 0, 0, 0, 0, 0, 91,
	0, 0, 97, 92, 0, 0, 0, 75, 0, 90,
	0, 95, 85, 105, 0, 0, 0, 53, 0, 0,
	253, 0, 0, 0, 0, 84, 99, 0, 0, 78,
	0, 0, 88, 0, 0, 111, 112, 114, 113, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 94, 0, 87, 0,
	0, 0, 0, 0, 79, 1042, 96, 0, 104, 76,
	82, 0, 0, 0, 0, 0, 0, 91, 81, 86,
	97, 92, 102, 103, 80, 110, 0, 0, 77, 0,
	0, 93, 0, 101, 0, 0, 0, 0, 253, 0,
	1044, 89, 83, 0, 0, 0, 98, 78, 0, 0,
	0, 107, 108, 109, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 90, 0,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 99, 0, 0, 0, 0,
	0, 88, 106, 0, 111, 112, 114, 113, 115, 0,
	0, 0, 79, 0, 96, 0, 104, 76, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 86, 0, 0,
	102, 103, 80, 110, 0, 0, 77, 0, 0, 93,
	0, 101, 0, 0, 24, 0, 0, 0, 0, 89,
	83, 0, 0, 0, 98, 94, 0, 87, 0, 107,
	108, 109, 0, 0, 0, 0, 0, 100, 0, 82,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 97,
	92, 0, 0, 0, 75, 0, 90, 0, 95, 85,
	105, 0, 0, 0, 53, 0, 0, 73, 0, 0,
	0, 0, 84, 99, 0, 0, 78, 0, 0, 88,
	0, 0, 111, 112, 114, 113, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 96, 0, 104, 76, 0, 0, 0,
	94, 0, 87, 0, 0, 81, 86, 0, 0, 102,
	103, 80, 110, 0, 82, 77, 0, 0, 93, 0,
	101, 91, 0, 0, 97, 92, 0, 0, 89, 83,
	0, 0, 0, 98, 0, 0, 0, 0, 107, 108,
	109, 0, 73, 0, 0, 578, 100, 0, 579, 0,
	0, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 90, 0, 95, 85, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 99, 0, 0, 0, 0, 0, 88, 0,
	0, 111, 112, 114, 113, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 94, 0,
	87, 0, 0, 0, 0, 0, 79, 0, 96, 0,
	104, 76, 82, 426, 0, 0, 0, 0, 0, 91,
	81, 86, 97, 92, 102, 103, 80, 110, 0, 0,
	77, 0, 0, 93, 0, 101, 0, 0, 0, 0,
	73, 0, 425, 89, 83, 0, 0, 0, 98, 78,
	0, 0, 0, 107, 108, 109, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	90, 0, 95, 85, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 99, 0, 0,
	0, 0, 0, 88, 106, 0, 111, 112, 114, 113,
	115, 0, 0, 0, 79, 0, 96, 0, 104, 76,
	0, 0, 0, 94, 0, 87, 0, 0, 81, 86,
	0, 0, 102, 103, 80, 110, 0, 82, 77, 0,
	0, 93, 0, 101, 91, 0, 0, 97, 92, 0,
	0, 89, 83, 0, 0, 0, 98, 0, 0, 0,
	0, 107, 108, 109, 0, 253, 0, 1044, 0, 100,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 90, 0,
	95, 85, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 99, 0, 0, 0, 0,
	0, 88, 0, 0, 111, 112, 114, 113, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 94, 0, 87, 0, 0, 0, 0, 0, 79,
	0, 96, 0, 104, 76, 82, 0, 0, 0, 0,
	0, 0, 91, 81, 86, 97, 92, 102, 103, 80,
	110, 0, 0, 77, 0, 0, 93, 0, 101, 0,
	53, 0, 0, 253, 0, 0, 89, 83, 0, 0,
	0, 98, 78, 0, 0, 0, 107, 108, 109, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 90, 0, 95, 85, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	99, 0, 0, 0, 0, 0, 88, 106, 0, 111,
	112, 114, 113, 115, 0, 0, 0, 79, 0, 96,
	0, 104, 76, 0, 0, 0, 94, 0, 87, 0,
	0, 81, 86, 0, 0, 102, 103, 80, 110, 0,
	82, 77, 0, 0, 93, 0, 101, 91, 0, 0,
	97, 92, 0, 0, 89, 83, 0, 0, 0, 98,
	0, 0, 0, 0, 107, 108, 109, 0, 73, 0,
	865, 0, 100, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 90, 0, 95, 85, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 99, 0,
	0, 0, 0, 0, 88, 0, 0, 111, 112, 114,
	113, 115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 96, 0, 104, 76, 0, 0,
	0, 94, 0, 87, 0, 0, 81, 86, 0, 0,
	102, 103, 80, 110, 415, 82, 77, 0, 0, 93,
	0, 101, 91, 0, 0, 97, 92, 0, 0, 89,
	83, 0, 0, 0, 98, 0, 0, 0, 0, 107,
	108, 109, 0, 253, 0, 0, 0, 100, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 90, 0, 95, 85,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 99, 0, 0, 0, 0, 0, 88,
	0, 0, 111, 112, 114, 113, 115, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 94,
	0, 87, 0, 0, 0, 0, 0, 79, 0, 96,
	0, 104, 76, 82, 0, 0, 0, 0, 0, 0,
	91, 81, 86, 97, 92, 102, 103, 80, 110, 0,
	0, 77, 0, 0, 93, 0, 101, 0, 0, 0,
	0, 73, 0, 0, 89, 83, 0, 0, 0, 98,
	78, 0, 0, 0, 107, 108, 109, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 90, 0, 95, 85, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 99, 0,
	0, 0, 0, 0, 88, 106, 0, 111, 112, 114,
	113, 115, 0, 0, 0, 79, 0, 96, 0, 104,
	76, 0, 0, 0, 94, 0, 87, 0, 0, 81,
	86, 0, 0, 102, 103, 80, 110, 0, 82, 77,
	0, 0, 93, 0, 101, 91, 0, 0, 97, 92,
	0, 0, 89, 83, 0, 0, 0, 98, 0, 0,
	0, 0, 107, 108, 109, 0, 402, 0, 0, 0,
	100, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 90,
	0, 95, 85, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 99, 0, 0, 0,
	0, 0, 88, 0, 0, 111, 112, 114, 113, 115,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 94, 0, 87, 0, 0, 0, 0, 0,
	79, 0, 96, 0, 104, 76, 82, 0, 0, 0,
	0, 0, 0, 91, 81, 86, 97, 92, 102, 103,
	80, 110, 0, 0, 77, 0, 0, 93, 0, 101,
	0, 0, 0, 0, 253, 0, 0, 89, 83, 0,
	0, 0, 98, 78, 0, 0, 0, 107, 108, 109,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 90, 0, 95, 85, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 99, 0, 0, 0, 0, 0, 88, 106, 0,
	111, 112, 114, 113, 115, 0, 0, 0, 79, 0,
	96, 0, 104, 76, 0, 0, 0, 94, 0, 87,
	0, 0, 81, 86, 0, 0, 102, 103, 80, 110,
	0, 82, 77, 0, 0, 93, 0, 101, 91, 0,
	0, 97, 92, 0, 0, 89, 83, 0, 0, 0,
	98, 0, 0, 0, 0, 107, 108, 109, 0, 311,
	0, 0, 0, 100, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 90, 0, 95, 85, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 99,
	0, 0, 0, 0, 0, 88, 0, 0, 111, 112,
	114, 113, 115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 96, 0, 104, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 86, 0,
	0, 102, 103, 80, 110, 0, 0, 77, 0, 0,
	93, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	89, 83, 0, 0, 0, 98, 0, 0, 0, 0,
	107, 108, 109, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 90, 0, 95,
	85, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 99, 0, 0, 0, 0, 0,
	88, 0, 0, 111, 112, 114, 113, 115,
}
var yyPact = [...]int{

	1175, -1000, -181, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 721, 756, -1000, -1000, -1000, -1000, -1000, 542,
	5212, 14, -15, 69, 67, 1970, 66, 6695, -1000, -1000,
	20, -1000, -169, -1000, -1000, -135, -1000, -1000, -1000, -1000,
	568, -1000, -1000, -1000, -1000, -1000, 712, 718, 570, 685,
	624, -1000, 14, 6695, 740, 2203, -141, 6820, 27, 63,
	27, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 65, -1000, 10, 437,
	10, 6695, 6695, -1000, 738, -66, 736, -18, -1000, -1000,
	-73, -79, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6695, -1000, -1000, -1000, -1000, -1000, -1000, 316, -1000,
	-1000, -1000, -1000, 522, 522, -1000, 6695, -1000, -1000, -1000,
	-1000, 412, 660, 4903, 4903, 721, -1000, 568, -1000, -1000,
	-1000, 658, -1000, -1000, 277, 6354, 668, 107, 6695, 515,
	3135, -1000, -1000, -1000, 219, 5871, -1000, -1000, -1000, 667,
	-1000, -1000, -1000, -1000, -1000, -1000, 717, 716, 451, -1000,
	1186, -1000, -1000, 6695, 233, 430, 6695, 6695, 6695, 679,
	573, 6695, -1000, -1000, -1000, 6695, 734, 6695, 6695, 6695,
	-1000, -1000, 735, 734, -1000, -1000, -1000, -1000, -1000, 4903,
	-1000, -1000, 151, -1000, -1000, -1000, 752, 132, 424, -1000,
	4903, 1366, 522, 522, -1000, -1000, 89, -1000, -1000, 5104,
	5104, 5104, 5104, 5104, 5104, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 522, 103,
	-1000, 4691, 522, 522, 522, 522, 522, 522, 4903, 522,
	522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
	522, 522, -1000, -1000, 518, -1000, 465, 712, 412, 624,
	5763, 555, -1000, -1000, 536, 6695, -1000, 6587, 3834, 732,
	3135, 515, 4903, 87, -1000, -1000, -1000, -1000, -152, 522,
	-164, 1708, 545, -60, -1000, -1000, 529, -1000, 529, 529,
	529, 529, -30, -30, -30, -30, -1000, -1000, -1000, -1000,
	-1000, 561, -1000, 529, 529, 529, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 559, 559, 559, 533, 533, 670,
	677, 572, -1000, 639, 506, -1000, -1000, 6695, -1000, -1000,
	732, 6695, -1000, -1000, -1000, 712, -77, -1000, -1000, -1000,
	-1000, 447, 242, -1000, 6695, -1000, -1000, -1000, 629, 4903,
	4903, 265, 4903, 4903, 140, 5104, 267, 201, 5104, 5104,
	5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104, 5104,
	5104, 5104, 5104, 307, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 404, -1000, 568, 519, 519, 116, 116, 116,
	116, 116, 46, 4055, 3601, 412, 4691, 4267, 4267, 4903,
	4903, 4267, 687, 225, 242, 6462, -1000, 412, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4267, 4267, 4267, 4267, 4903,
	-1000, -1000, -1000, 660, -1000, 687, 720, -1000, 637, 635,
	4267, -1000, 566, 6587, 522, -1000, 5638, -1000, 546, -1000,
	215, -1000, 102, -1000, -1000, -1000, 721, 4903, -1000, 242,
	-1000, 390, 522, 6820, -1000, -56, 212, -1000, -1000, 556,
	698, 152, 381, 149, -1000, -1000, -1000, 545, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 241, 64, -1000,
	692, -1000, 691, 328, 744, -62, -1000, -1000, 315, -30,
	-30, -1000, -1000, 87, 652, 87, 87, 87, 326, -1000,
	-1000, -1000, -1000, 314, -1000, -1000, -1000, 305, -1000, -1000,
	670, -1000, 13, -1000, -1000, 6695, -1000, 166, 204, 31,
	6, 5, 3, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6695, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	325, -1000, 4903, -1000, -1000, 627, 140, 210, -1000, -1000,
	272, -1000, -1000, 242, 242, 836, -1000, -1000, -1000, -1000,
	267, 5104, 5104, 5104, 62, 836, 673, 1279, 1067, 116,
	160, 160, 115, 115, 115, 115, 115, 293, 293, -1000,
	-1000, -1000, 412, -1000, -1000, -1000, 412, 4267, 504, -1000,
	-1000, 1499, 101, 522, 99, -1000, -1000, 412, 373, 373,
	158, 411, 373, 4267, 226, -1000, 4903, 412, -1000, 373,
	412, 373, 373, -1000, -1000, 6695, -1000, -1000, -1000, -1000,
	507, -1000, 672, 496, 484, -1000, -1000, 4479, 412, 442,
	96, 721, 6587, 4903, 3601, 712, 242, -1000, 6820, 412,
	645, 194, 369, 6462, -1000, 368, -1000, -1000, 361, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -82,
	-1000, -1000, 455, 87, 87, -1000, 200, -1000, -1000, -1000,
	434, -1000, 502, 377, -1000, 183, 183, -1000, 648, 2669,
	-1000, 6695, -1000, -1000, -1000, 356, -34, 542, 353, 6820,
	-1000, -1000, -1000, -1000, 242, -1000, -1000, -1000, -1000, -1000,
	-1000, 62, 836, 257, -1000, 5104, 5104, -1000, -1000, 373,
	4267, -1000, -1000, 6229, -1000, -1000, 2902, 4267, 3368, -1000,
	-1000, -1000, 230, 307, 230, -113, 548, 221, -1000, 4903,
	247, -1000, -1000, -1000, -1000, -1000, -1000, 732, 6104, 690,
	-1000, 522, -1000, -1000, 560, 6462, 6462, 712, -1000, 242,
	-1000, -1000, 412, 2669, -151, -43, 302, -1000, 365, -1000,
	529, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	319, 287, -1000, 286, 370, -1000, 190, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 642, -1000, -1000, -1000, -1000, 5104,
	836, 836, -1000, -1000, -1000, -1000, 94, 412, -1000, 412,
	529, 529, -1000, 529, 533, -1000, 529, -12, 529, -13,
	412, 412, 522, -106, -1000, 242, 4903, 729, 497, 644,
	-1000, -1000, -1000, 682, 5371, 5479, 743, -1000, 522, -1000,
	568, 93, -1000, -1000, 2669, -1000, -1000, -1000, -1000, 150,
	-1000, -119, 6462, -1000, -1000, 454, 452, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 348, 836, 2436, -1000, -1000, -1000,
	61, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5104,
	412, 308, 242, 727, 714, 6104, 6104, 6104, 6104, -1000,
	601, 596, -1000, 589, 586, 595, 6695, -1000, 360, 5371,
	84, -1000, 5996, -1000, -1000, 6587, 484, 412, 6462, -1000,
	340, 706, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 142,
	-1000, -1000, -1000, 4903, 4903, 644, 564, 603, -1000, -1000,
	-1000, -1000, 592, -1000, 578, -1000, -1000, -1000, -1000, -1000,
	60, 58, 56, -1000, 483, -1000, -1000, -1000, 704, 412,
	52, -126, 242, 477, 4903, 4903, -1000, -1000, 522, 522,
	522, -1000, -1000, 617, -116, -132, 242, 242, 6462, 6462,
	6462, -1000, 615, -1000, 352, -1000, 352, 352, -122, -1000,
	6462, -1000, -1000, -129, -1000, -134, -1000,
}
var yyPgo = [...]int{

	0, 1010, 1006, 1005, 999, 998, 997, 995, 23, 506,
	990, 982, 981, 980, 979, 978, 977, 974, 973, 972,
	971, 970, 968, 967, 965, 67, 963, 962, 961, 53,
	960, 69, 956, 954, 953, 29, 168, 19, 33, 129,
	948, 13, 39, 5, 947, 946, 6, 945, 951, 942,
	54, 929, 927, 926, 2, 22, 925, 924, 923, 909,
	72, 10, 908, 905, 901, 895, 892, 883, 42, 1,
	9, 8, 11, 880, 28, 7, 874, 41, 873, 872,
	871, 870, 21, 865, 52, 863, 16, 51, 857, 37,
	12, 35, 56, 55, 852, 849, 844, 345, 843, 191,
	313, 842, 43, 841, 838, 49, 0, 15, 90, 27,
	837, 34, 928, 48, 4, 836, 833, 1103, 17, 25,
	829, 18, 828, 827, 826, 825, 824, 821, 820, 32,
	819, 817, 816, 20, 40, 815, 814, 813, 810, 808,
	807, 26, 806, 805, 801, 799, 70, 14, 795, 793,
	792, 791, 788, 45, 787, 50, 30, 786, 785, 784,
	3, 783, 782, 780, 47, 779, 765, 44, 764, 763,
	60, 98, 762, 152,
}
var yyR1 = [...]int{

	0, 168, 169, 169, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 120,
	120, 16, 16, 16, 16, 16, 165, 165, 166, 166,
	167, 167, 142, 142, 141, 141, 140, 140, 139, 139,
	143, 143, 143, 19, 156, 158, 136, 136, 135, 135,
	137, 137, 138, 138, 138, 157, 157, 157, 153, 111,
	111, 123, 123, 123, 162, 162, 163, 163, 164, 164,
	164, 164, 164, 164, 164, 126, 126, 124, 124, 124,
	124, 124, 124, 124, 125, 125, 125, 125, 125, 127,
	127, 127, 127, 127, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 152, 152,
	129, 129, 146, 146, 147, 147, 147, 144, 144, 145,
	145, 148, 148, 130, 130, 130, 130, 130, 131, 149,
	133, 133, 133, 134, 134, 150, 150, 151, 151, 132,
	154, 154, 159, 159, 159, 159, 159, 155, 155, 161,
	161, 160, 17, 17, 17, 17, 17, 17, 17, 17,
	18, 18, 18, 51, 51, 1, 20, 2, 3, 4,
	4, 5, 5, 5, 5, 6, 6, 6, 6, 122,
	122, 122, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 34, 34, 50, 50, 24, 22, 23, 23,
	23, 23, 172, 25, 26, 26, 27, 27, 27, 31,
	31, 31, 29, 29, 30, 30, 37, 37, 36, 36,
	38, 38, 38, 38, 110, 110, 110, 109, 109, 40,
	40, 41, 41, 42, 42, 43, 43, 43, 52, 44,
	44, 44, 44, 116, 116, 115, 115, 115, 114, 114,
	45, 45, 45, 45, 46, 46, 46, 46, 47, 47,
	49, 49, 48, 48, 53, 53, 53, 53, 54, 54,
	55, 55, 39, 39, 39, 39, 39, 39, 39, 98,
	98, 57, 57, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 67, 67, 67, 67, 67, 67, 58,
	58, 58, 58, 58, 58, 58, 35, 35, 68, 68,
	68, 74, 69, 69, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 64, 64, 173, 173, 66, 66, 66, 66,
	32, 32, 32, 32, 32, 119, 119, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	78, 78, 33, 33, 76, 76, 77, 79, 79, 75,
	75, 75, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 89, 89, 70, 70, 72, 72, 71, 73, 90,
	90, 91, 92, 92, 93, 93, 95, 95, 95, 94,
	94, 94, 96, 96, 99, 99, 100, 100, 97, 97,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	102, 102, 102, 103, 103, 104, 104, 104, 107, 107,
	108, 108, 112, 112, 113, 113, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 170, 171,
	117, 118, 118, 118,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 2, 9, 8, 5, 7, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 4, 4, 4, 0, 3, 0, 4,
	0, 3, 0, 1, 1, 1, 3, 3, 3, 1,
	1, 3, 1, 1, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 4, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 1, 2, 2, 2, 2, 2, 2, 3, 1,
	0, 3, 3, 0, 2, 2, 1, 2, 1, 2,
	4, 7, 2, 3, 2, 2, 3, 1, 1, 1,
	3, 2, 6, 7, 7, 7, 9, 7, 7, 7,
	4, 5, 4, 1, 3, 3, 3, 2, 2, 3,
	4, 2, 3, 2, 2, 4, 4, 3, 6, 1,
	1, 1, 3, 5, 6, 5, 5, 5, 3, 3,
	6, 5, 0, 3, 0, 2, 4, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 3,
	5, 5, 3, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 1, 3,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	0, 1, 0, 2, 1, 2, 4, 0, 2, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -168, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 215, 132,
	222, 225, 226, 229, 228, 233, 29, 131, 135, 136,
	-170, 7, 199, 56, -169, 238, -82, 14, -27, 5,
	-25, -172, -25, -25, -25, -25, -156, 56, 191, -104,
	121, 22, -107, 59, -106, 205, 138, 157, 68, 133,
	153, 147, 31, 171, 223, 210, 148, 19, 230, 170,
	207, 38, 42, 160, 17, 209, 135, 41, 175, 224,
	188, 162, 151, 152, 137, 211, 123, 180, 181, 182,
	154, 233, 234, 236, 235, 237, -97, 125, 121, 122,
	191, 121, 121, -122, 179, 35, 189, 114, 183, 184,
	186, 121, 59, -105, -106, 74, 26, 28, 173, 77,
	144, 109, 166, 15, 78, 155, 158, 161, 108, 200,
	51, 192, 193, 190, 191, 178, 149, 32, 9, 29,
	131, 25, 102, 116, 81, 82, 217, 134, 27, 132,
	71, 18, 54, 10, 12, 13, 126, 125, 93, 122,
	49, 7, 142, 143, 110, 30, 90, 45, 23, 47,
	91, 16, 194, 195, 34, 169, 165, 204, 168, 141,
	164, 104, 52, 39, 75, 69, 150, 72, 55, 136,
	73, 14, 50, 220, 128, 219, 146, 92, 117, 199,
	48, 6, 203, 33, 130, 140, 46, 167, 139, 163,
	80, 124, 70, 221, 5, 22, 176, 8, 53, 127,
	196, 197, 198, 37, 159, 156, 218, 208, 79, 11,
	177, 121, -112, 59, -106, -117, -117, 62, 209, -117,
	227, -117, -117, 234, 236, 235, 237, -117, -117, -117,
	-117, -8, -86, 16, 15, -11, -9, -170, 6, 24,
	25, -31, 43, 44, -26, -97, -48, -112, 10, -92,
	-120, -93, 231, 230, -108, -95, -107, -105, 161, 158,
	232, 189, 114, 35, 121, 179, 212, 216, -157, -153,
	-111, 59, -106, -100, 126, 122, -100, 121, -99, 126,
	59, -99, -48, -48, -117, 10, 179, 10, 121, 191,
	-117, -117, 185, 188, -48, -117, 62, -117, -71, -170,
	-71, -117, -48, -171, 58, -87, 18, 34, -39, -56,
	75, -61, 32, 27, -60, -57, -75, -73, -74, 109,
	98, 99, 106, 76, 110, -65, -63, -64, -66, 61,
	60, 62, 63, 64, 65, 69, 70, 71, -107, -112,
	-71, -170, 47, 48, 200, 201, 204, 202, 78, 37,
	190, 198, 197, 196, 194, 195, 192, 193, 126, 191,
	104, 199, 59, -106, -83, -84, -39, -82, -8, -25,
	39, -29, 25, 67, -49, 30, -48, 33, 111, -48,
	57, -92, 83, -94, -107, 61, 32, 33, 15, 15,
	58, 57, -123, -126, -128, -127, -124, -125, 155, 156,
	109, 159, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 133, 151, 152, 153, 154, 138, 139, 140,
	141, 142, 143, 144, 146, 147, 148, 149, 150, -112,
	75, 59, -48, -48, -51, -48, 27, 55, -112, -48,
	-50, 10, -48, -48, -48, -34, 10, -50, -117, -117,
	-117, -69, -39, -117, -102, 124, 26, 8, 93, 74,
	73, 90, 57, 17, -39, -58, 93, 75, 91, 92,
	77, 95, 94, 105, 98, 99, 100, 101, 102, 103,
	104, 96, 97, 108, 83, 84, 85, 86, 87, 88,
	89, -98, -170, -74, -170, 112, 113, -61, -61, -61,
	-61, -61, -61, -170, 111, -8, -170, -170, -170, -170,
	-170, -170, -170, -78, -39, -170, -173, -170, -173, -173,
	-173, -173, -173, -173, -173, -170, -170, -170, -170, 57,
	-85, 28, 29, -86, -171, -31, -62, -107, 62, 65,
	-30, 46, -59, 33, 37, -8, -170, -48, -90, -91,
	-75, -107, -112, -113, -112, -105, -55, 11, -93, -39,
	-134, 108, 214, -170, -158, -136, 223, -153, -154, -159,
	128, 22, -155, 19, 122, 23, -162, -163, -164, -148,
	-130, -149, -150, -151, -132, -131, 69, 75, 32, 173,
	128, 23, 22, 68, 55, -144, 176, -129, 56, -129,
	-129, -129, -129, -133, 158, -133, -133, -133, 56, -129,
	-129, -129, -146, 56, -146, -146, -147, 56, -147, -165,
	-166, -167, -142, 32, 27, 55, -101, 117, 223, 200,
	119, 116, 120, 115, 173, 158, 68, 32, 14, 211,
	59, 57, -48, -117, -55, -48, -117, -117, -117, -86,
	187, -117, 57, -171, -48, 41, -39, -39, -67, 69,
	75, 70, 71, -39, -39, -61, -68, -71, -74, 66,
	93, 91, 92, 77, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -119,
	59, 61, 59, -60, -60, -107, -37, 25, -36, -38,
	100, -39, -112, -108, -113, -105, -171, -8, -36, -36,
	-39, -39, -36, -29, -76, -77, 79, -107, -171, -36,
	-37, -36, -36, -84, -87, -96, 18, 10, 37, 37,
	-36, -89, 55, -90, -70, -72, -71, -170, -8, -88,
	-107, -55, 57, 83, 111, -82, -39, 59, -170, -111,
	-137, 173, 83, 56, 23, -155, 59, 59, -155, -164,
	69, 61, 62, 63, 69, 190, 23, 23, 61, 8,
	-145, 177, 62, -133, -133, -134, 33, -134, -134, -134,
	-152, 61, 62, 62, -167, 108, -140, 161, 158, -48,
	-117, -102, -103, 122, 23, 83, 124, 129, 129, 129,
	-48, -117, -117, 61, -39, -117, 42, 69, 70, 71,
	-68, -61, -61, -61, -35, 134, 74, -171, -171, -36,
	57, -110, -109, 26, -107, 61, 111, -170, 111, -171,
	-171, -171, 57, 127, 26, -171, -36, -79, -77, 81,
	-39, -171, -171, -171, -171, -171, -48, -40, 10, 31,
	-89, 57, -171, -171, -171, 57, 111, -82, -91, -39,
	-108, -86, -111, -171, -135, 32, 83, 59, -161, -160,
	-107, 59, 59, 190, 58, -134, -134, 59, 109, 58,
	57, 57, 58, 57, -141, 83, -141, 33, -118, -170,
	-108, -48, -117, 59, 158, -156, 59, -153, -35, 74,
	-61, -61, -171, -38, -109, 100, -113, -37, -108, -121,
	109, 155, 133, 153, 149, 170, 160, 175, 151, 176,
	-119, -121, 205, -82, 82, -39, 80, -55, -41, -42,
	-43, -44, -52, -74, -170, -48, 23, -72, 37, -8,
	-170, -107, -107, -86, -171, -118, -138, 230, 224, 161,
	62, 58, 57, -129, 61, 62, 62, -139, 59, 32,
	-143, 59, 109, 32, 33, -61, 111, -171, -171, -129,
	-129, -129, -147, -129, 143, -129, 143, -171, -171, -170,
	-33, 203, -39, -80, 12, 57, -45, -46, -47, 45,
	49, 51, 46, 47, 48, 52, -116, 26, -41, -170,
	-115, -114, 26, -112, 61, 8, -70, -8, 111, -118,
	83, 208, -160, 58, 58, 59, 100, -133, 59, -61,
	-171, 61, -81, 13, 15, -42, -43, -42, -43, 45,
	45, 45, 50, 45, 50, 45, -46, -112, -171, -53,
	53, 125, 54, -114, -90, -171, -107, 59, 20, -32,
	93, 208, -39, -69, 55, 55, 45, 45, 122, 122,
	122, 21, -171, 206, 52, 209, -39, -39, -170, -170,
	-170, 42, 207, 210, -54, -107, -54, -54, 42, -171,
	57, -171, -171, 208, -107, 209, 210,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 436, 0, 222, 222, 222, 222, 222, 0,
	505, 488, 0, 0, 0, 0, 0, 0, 680, 680,
	0, 680, 0, 680, 680, 0, 680, 680, 680, 680,
	0, 33, 34, 678, 1, 3, 444, 0, 0, 226,
	229, 224, 488, 0, 0, 0, 41, 0, 486, 0,
	486, 506, 507, 508, 509, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 0, 489, 484, 0,
	484, 0, 0, 680, 612, 557, 530, 532, 680, 680,
	0, 611, 199, 200, 201, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 531,
	533, 534, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, 545, 546, 547, 548, 549, 550, 551, 552,
	553, 554, 555, 556, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 587, 588, 589, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 0, 217, 512, 513, 187, 188, 680, 0, 191,
	680, 193, 194, 0, 0, 680, 0, 218, 219, 220,
	221, 27, 448, 0, 0, 436, 29, 0, 222, 227,
	228, 232, 230, 231, 223, 0, 0, 282, 0, 37,
	0, 472, 39, -2, 0, 0, 510, 511, -2, 527,
	478, 530, 532, 557, 611, 612, 0, 0, 0, 75,
	0, 79, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 202, 0, 214, 0, 0, 0,
	208, 209, 212, 214, 680, 189, 680, 192, 680, 0,
	680, 197, 500, 28, 679, 23, 0, 0, 445, 292,
	0, 297, 299, 0, 334, 335, 336, 337, 338, 0,
	0, 0, 0, 0, 0, 360, 361, 362, 363, 422,
	423, 424, 425, 426, 427, 428, 301, 302, 419, 0,
	468, 0, 0, 0, 0, 0, 0, 0, 410, 0,
	384, 384, 384, 384, 384, 384, 384, 384, 0, 0,
	0, 0, -2, -2, 437, 438, 441, 444, 27, 229,
	0, 234, 233, 225, 0, 0, 281, 0, 0, 290,
	0, 38, 0, 153, 479, 480, 481, 477, 0, 0,
	66, 0, 84, 137, 82, 83, 130, 96, 130, 130,
	130, 130, 150, 150, 150, 150, 122, 123, 124, 125,
	126, 0, 109, 130, 130, 130, 113, 97, 98, 99,
	100, 101, 102, 103, 132, 132, 132, 134, 134, -2,
	0, 0, 63, 0, 180, 183, 485, 0, 182, 680,
	290, 0, 680, 680, 680, 444, 0, 680, 216, 190,
	195, 0, 332, 196, 0, 501, 502, 449, 0, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 324,
	325, 298, 0, 312, 0, 0, 0, 354, 355, 356,
	357, 358, 0, 236, 0, 27, 0, 0, 0, 0,
	0, 0, 232, 0, 411, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 383, 0, 236, 0, 0, 0,
	440, 442, 443, 448, 30, 232, 0, 429, 0, 0,
	0, 235, 461, 0, 0, -2, 0, 280, 290, 469,
	0, 419, 0, 283, 514, 515, 436, 0, 473, 474,
	475, 0, 0, 0, 64, 70, 0, 76, 77, 0,
	0, 0, 0, 649, 167, 168, 78, 85, 86, 88,
	89, 90, 91, 92, 93, 94, 141, 0, 0, 149,
	0, 156, 158, 0, 0, 139, 138, 95, 0, 150,
	150, 116, 117, 153, 0, 153, 153, 153, 0, 110,
	111, 112, 104, 0, 105, 106, 107, 0, 108, 44,
	-2, 48, 0, 53, 487, 0, 680, 500, 0, 497,
	0, 495, 0, 490, 491, 492, 493, 494, 496, 498,
	499, 0, 181, 203, 680, 215, 205, 206, 207, 680,
	0, 211, 0, 467, 680, 0, 293, 294, 296, 313,
	0, 315, 317, 446, 447, 303, 304, 328, 329, 330,
	0, 0, 0, 0, 326, 308, 0, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 350, 353,
	395, 396, 0, 351, 352, 359, 0, 0, 237, 238,
	240, 244, 0, 420, 0, -2, 331, 27, 0, 0,
	0, 0, 0, 0, 417, 414, 0, 0, 385, 0,
	0, 0, 0, 439, 24, 0, 482, 483, 430, 431,
	249, 31, 0, 461, 451, 463, 465, 0, 27, 0,
	457, 436, 0, 0, 0, 444, 291, 154, 0, 0,
	68, 0, 0, 0, 162, 0, 164, 165, 0, 87,
	142, 143, 144, 145, 146, 147, 155, 157, 159, 0,
	81, 140, 0, 153, 153, 118, 0, 119, 120, 121,
	0, 128, 0, 0, 49, 54, 54, 56, 0, 681,
	172, 0, 680, 503, 504, 0, 0, 0, 0, 0,
	184, 204, 210, 213, 333, 198, 450, 314, 316, 318,
	305, 326, 309, 0, 306, 0, 0, 300, 364, 0,
	0, 241, 245, 0, 247, 248, 0, 236, 0, -2,
	367, 368, 0, 0, 0, 0, 436, 0, 415, 0,
	0, 375, 386, 387, 388, 389, 25, 290, 0, 0,
	32, 0, 466, -2, 0, 0, 0, 444, 470, 471,
	420, 36, 0, 681, 72, 0, 0, 67, 0, 169,
	130, 163, 166, 148, 131, 114, 115, 151, 152, 127,
	0, 0, 135, 0, 0, 55, 0, 57, 45, 682,
	683, 173, 174, 175, 0, 177, 178, 179, 307, 0,
	327, 310, 365, 239, 246, 242, 0, 0, 421, 0,
	130, 130, 400, 130, 134, 403, 130, 405, 130, 408,
	0, 0, 0, 412, 374, 418, 0, 432, 250, 251,
	253, 254, 255, 263, 0, 265, 0, 464, 0, -2,
	0, 459, 458, 35, 681, 43, 65, 73, 74, 0,
	71, 160, 0, 171, 129, 0, 0, 50, 58, 59,
	51, 60, 61, 62, 0, 311, 0, 366, 369, 397,
	150, 401, 402, 404, 406, 407, 409, 371, 370, 0,
	0, 0, 416, 434, 0, 0, 0, 0, 0, 270,
	0, 0, 273, 0, 0, 0, 0, 264, 0, 0,
	284, 266, 0, 268, 269, 0, 454, 27, 0, 42,
	0, 0, 170, 133, 136, 176, 243, 398, 399, 390,
	373, 413, 26, 0, 0, 252, 259, 0, 262, 271,
	272, 274, 0, 276, 0, 278, 279, 256, 257, 258,
	0, 0, 0, 267, 462, -2, 460, 69, 0, 0,
	0, 0, 435, 433, 0, 0, 275, 277, 0, 0,
	0, 161, 372, 0, 0, 0, 260, 261, 0, 0,
	0, 391, 0, 394, 0, 288, 0, 0, 392, 285,
	0, 286, 287, 0, 289, 0, 393,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 238,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:303
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:308
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:309
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:313
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:337
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:349
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:356
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:372
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:383
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:394
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:410
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:416
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:428
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:432
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:449
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:455
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = yyDollar[7].colIdent.val
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			yyVAL.statement = yyDollar[1].ddl
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:463
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = yyDollar[6].colIdent.val
			yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:471
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:479
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:485
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:499
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:505
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:512
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:520
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:525
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyVAL.str = "character set"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.str = "default"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:551
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:555
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:559
		{
			yyVAL.str = "default"
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:565
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:576
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:583
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
			yyVAL.TableOptions.Type = yyDollar[4].str
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:590
		{
			yyVAL.str = ""
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:594
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:599
		{
			yyVAL.str = ""
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:603
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:608
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:612
		{
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:616
		{
			yyVAL.str = NormalTableType
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:620
		{
			yyVAL.str = GlobalTableType
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:624
		{
			yyVAL.str = SingleTableType
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:631
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:636
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:640
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:646
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:659
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:663
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:669
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:692
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:705
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:712
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:719
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:726
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:749
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:754
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:760
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:768
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:772
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:784
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:902
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:907
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:912
		{
			yyVAL.optVal = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:916
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:921
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:933
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:937
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:943
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:951
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:955
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:960
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:964
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:971
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:981
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:985
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:989
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:993
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:997
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1003
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.str = ""
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.str = ""
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1041
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 161:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1080
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1092
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1113
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1119
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1125
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 173:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1129
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 174:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1134
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1139
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 178:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1155
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1162
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1170
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1175
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1195
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.statement = &Xa{}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &Explain{}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1229
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1233
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1265
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1269
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.str = ShowUnsupportedStr
			switch v := string(yyDollar[1].bytes); v {
			case ShowStatusStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1318
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1322
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1326
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.str = ""
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1335
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.tableName = TableName{}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &OtherRead{}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &OtherRead{}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1379
		{
			setAllowComments(yylex, true)
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.bytes2 = nil
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1393
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.str = UnionStr
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.str = UnionAllStr
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.str = UnionDistinctStr
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.str = ""
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1416
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.str = SQLCacheStr
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1425
		{
			yyVAL.str = ""
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.str = DistinctStr
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.str = StraightJoinHint
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.selectExprs = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1457
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1484
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1495
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1559
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1563
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.empty = struct{}{}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.empty = struct{}{}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = JoinStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.str = JoinStr
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = JoinStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = StraightJoinStr
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = LeftJoinStr
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = LeftJoinStr
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.str = RightJoinStr
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.str = RightJoinStr
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.str = NaturalJoinStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1634
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1654
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.indexHints = nil
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.expr = nil
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1694
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1720
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1724
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1730
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.str = IsNullStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = IsNotNullStr
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.str = IsTrueStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.str = IsNotTrueStr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.str = IsFalseStr
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.str = IsNotFalseStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = EqualStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = LessThanStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.str = GreaterThanStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.str = LessEqualStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.str = GreaterEqualStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.str = NotEqualStr
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = nil
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1959
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1963
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1971
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1979
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1997
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2001
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 366:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 372:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2065
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2069
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2101
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.str = ""
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.str = BooleanModeStr
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2151
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2155
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2159
		{
			yyVAL.str = QueryExpansionStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2187
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2221
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2230
		{
			yyVAL.expr = nil
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2234
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.str = string("")
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2249
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2253
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2264
		{
			yyVAL.expr = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2268
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2274
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2278
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2282
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2304
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2308
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2312
		{
			yyVAL.expr = &NullVal{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2318
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2336
		{
			yyVAL.exprs = nil
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2345
		{
			yyVAL.expr = nil
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2349
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.orderBy = nil
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2379
		{
			yyVAL.str = AscScr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.str = AscScr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.str = DescScr
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.limit = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2396
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2400
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.str = ForUpdateStr
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.str = ShareModeStr
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2430
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2434
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2438
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2451
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2462
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2466
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.updateExprs = nil
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2485
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2505
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2521
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2531
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2537
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2558
		{
			yyVAL.bytes = []byte("charset")
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.expr = &Default{}
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.byt = 0
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.byt = 1
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2588
		{
			yyVAL.byt = 0
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.byt = 1
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.str = ""
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.str = IgnoreStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2611
		{
			yyVAL.empty = struct{}{}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.empty = struct{}{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			yyVAL.empty = struct{}{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2620
		{
			yyVAL.empty = struct{}{}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2622
		{
			yyVAL.empty = struct{}{}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2624
		{
			yyVAL.empty = struct{}{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2637
		{
			yyVAL.empty = struct{}{}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2641
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2658
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2662
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2669
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2857
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2866
		{
			decNesting(yylex)
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2871
		{
			forceEOF(yylex)
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2876
		{
			forceEOF(yylex)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2880
		{
			forceEOF(yylex)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
