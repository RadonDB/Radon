//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:50
type yySymType struct {
	yys                   int
	empty                 struct{}
	statement             Statement
	selStmt               SelectStatement
	ddl                   *DDL
	ins                   *Insert
	byt                   byte
	bytes                 []byte
	bytes2                [][]byte
	str                   string
	strs                  []string
	selectExprs           SelectExprs
	selectExpr            SelectExpr
	columns               Columns
	colName               *ColName
	tableExprs            TableExprs
	tableExpr             TableExpr
	tableName             TableName
	tableNames            TableNames
	indexHints            *IndexHints
	expr                  Expr
	exprs                 Exprs
	boolVal               BoolVal
	colTuple              ColTuple
	values                Values
	valTuple              ValTuple
	subquery              *Subquery
	whens                 []*When
	when                  *When
	orderBy               OrderBy
	order                 *Order
	limit                 *Limit
	updateExprs           UpdateExprs
	updateExpr            *UpdateExpr
	setExprs              SetExprs
	setExpr               *SetExpr
	colIdent              ColIdent
	colIdents             []ColIdent
	tableIdent            TableIdent
	convertType           *ConvertType
	aliasedTableName      *AliasedTableExpr
	TableSpec             *TableSpec
	TableOptions          TableOptions
	columnType            ColumnType
	colPrimaryKeyOpt      ColumnPrimaryKeyOption
	colUniqueKeyOpt       ColumnUniqueKeyOption
	optVal                *SQLVal
	LengthScaleOption     LengthScaleOption
	columnDefinition      *ColumnDefinition
	indexDefinition       *IndexDefinition
	indexInfo             *IndexInfo
	indexColumn           *IndexColumn
	indexColumns          []*IndexColumn
	columnOptionListOpt   ColumnOptionListOpt
	columnOptionList      ColumnOptionList
	columnOption          *ColumnOption
	databaseOptionListOpt DatabaseOptionListOpt
	databaseOptionList    DatabaseOptionList
	databaseOption        *DatabaseOption
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const FULLTEXT = 57361
const PARSER = 57362
const NGRAM = 57363
const UNIQUE = 57364
const KEY = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const SET = 57375
const LOCK = 57376
const FULL = 57377
const CHECKSUM = 57378
const VALUES = 57379
const LAST_INSERT_ID = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const ID = 57398
const HEX = 57399
const STRING = 57400
const INTEGRAL = 57401
const FLOAT = 57402
const HEXNUM = 57403
const VALUE_ARG = 57404
const LIST_ARG = 57405
const COMMENT = 57406
const COMMENT_KEYWORD = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const MODIFY = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const USING = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SHOW = 57455
const DESCRIBE = 57456
const EXPLAIN = 57457
const DATE = 57458
const ESCAPE = 57459
const REPAIR = 57460
const OPTIMIZE = 57461
const TRUNCATE = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const TIME = 57476
const TIMESTAMP = 57477
const DATETIME = 57478
const YEAR = 57479
const CHAR = 57480
const VARCHAR = 57481
const BOOL = 57482
const CHARACTER = 57483
const VARBINARY = 57484
const NCHAR = 57485
const CHARSET = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const NULLX = 57497
const AUTO_INCREMENT = 57498
const APPROXNUM = 57499
const SIGNED = 57500
const UNSIGNED = 57501
const ZEROFILL = 57502
const DATABASES = 57503
const TABLES = 57504
const VITESS_KEYSPACES = 57505
const VITESS_SHARDS = 57506
const VSCHEMA_TABLES = 57507
const WARNINGS = 57508
const VARIABLES = 57509
const EVENTS = 57510
const BINLOG = 57511
const GTID = 57512
const STATUS = 57513
const COLUMNS = 57514
const CURRENT_TIMESTAMP = 57515
const DATABASE = 57516
const CURRENT_DATE = 57517
const CURRENT_TIME = 57518
const LOCALTIME = 57519
const LOCALTIMESTAMP = 57520
const UTC_DATE = 57521
const UTC_TIME = 57522
const UTC_TIMESTAMP = 57523
const REPLACE = 57524
const CONVERT = 57525
const CAST = 57526
const GROUP_CONCAT = 57527
const SEPARATOR = 57528
const MATCH = 57529
const AGAINST = 57530
const BOOLEAN = 57531
const LANGUAGE = 57532
const WITH = 57533
const QUERY = 57534
const EXPANSION = 57535
const UNUSED = 57536
const PARTITION = 57537
const PARTITIONS = 57538
const HASH = 57539
const XA = 57540
const DISTRIBUTED = 57541
const ENGINES = 57542
const VERSIONS = 57543
const PROCESSLIST = 57544
const QUERYZ = 57545
const TXNZ = 57546
const KILL = 57547
const ENGINE = 57548
const SINGLE = 57549
const BEGIN = 57550
const START = 57551
const TRANSACTION = 57552
const COMMIT = 57553
const ROLLBACK = 57554
const GLOBAL = 57555
const SESSION = 57556
const NAMES = 57557
const RADON = 57558
const ATTACH = 57559
const ATTACHLIST = 57560
const DETACH = 57561
const RESHARD = 57562

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FULLTEXT",
	"PARSER",
	"NGRAM",
	"UNIQUE",
	"KEY",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"FULL",
	"CHECKSUM",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"MODIFY",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"USING",
	"PRIMARY",
	"COLUMN",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"CHARSET",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"WARNINGS",
	"VARIABLES",
	"EVENTS",
	"BINLOG",
	"GTID",
	"STATUS",
	"COLUMNS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"PARTITION",
	"PARTITIONS",
	"HASH",
	"XA",
	"DISTRIBUTED",
	"ENGINES",
	"VERSIONS",
	"PROCESSLIST",
	"QUERYZ",
	"TXNZ",
	"KILL",
	"ENGINE",
	"SINGLE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"GLOBAL",
	"SESSION",
	"NAMES",
	"RADON",
	"ATTACH",
	"ATTACHLIST",
	"DETACH",
	"RESHARD",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 293,
	83, 629,
	-2, 40,
	-1, 298,
	83, 524,
	-2, 475,
	-1, 401,
	111, 511,
	-2, 507,
	-1, 402,
	111, 512,
	-2, 508,
	-1, 468,
	1, 46,
	238, 46,
	-2, 52,
	-1, 584,
	5, 27,
	-2, 451,
	-1, 659,
	1, 47,
	238, 47,
	-2, 52,
	-1, 744,
	111, 514,
	-2, 510,
	-1, 868,
	5, 28,
	-2, 330,
	-1, 892,
	5, 28,
	-2, 452,
	-1, 978,
	5, 27,
	-2, 454,
	-1, 1084,
	5, 28,
	-2, 455,
}

const yyNprod = 682
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 7874

var yyAct = [...]int{

	402, 587, 490, 1040, 357, 1026, 908, 1113, 655, 379,
	773, 927, 735, 355, 774, 743, 948, 377, 294, 350,
	740, 272, 1037, 66, 595, 544, 3, 738, 969, 923,
	342, 74, 770, 56, 968, 728, 158, 599, 254, 642,
	853, 588, 754, 861, 705, 660, 493, 617, 72, 611,
	410, 404, 651, 555, 309, 344, 353, 297, 291, 479,
	60, 289, 55, 987, 254, 260, 74, 737, 605, 986,
	281, 306, 677, 380, 50, 307, 271, 263, 265, 264,
	266, 601, 1125, 296, 1112, 257, 62, 63, 64, 65,
	676, 1124, 1104, 157, 1089, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 1122, 1050, 522,
	1111, 1103, 961, 24, 51, 26, 27, 679, 1020, 141,
	142, 800, 801, 802, 50, 326, 675, 912, 332, 803,
	689, 330, 277, 324, 631, 630, 46, 810, 635, 790,
	28, 988, 1057, 36, 627, 254, 254, 824, 933, 643,
	1015, 1013, 949, 316, 838, 837, 836, 1079, 1081, 317,
	37, 612, 312, 53, 610, 614, 871, 633, 1099, 140,
	495, 835, 614, 672, 670, 666, 951, 669, 671, 614,
	632, 625, 499, 498, 1098, 636, 1097, 626, 313, 143,
	315, 251, 953, 145, 957, 327, 952, 827, 950, 500,
	826, 310, 144, 955, 534, 535, 1047, 1005, 795, 1090,
	895, 867, 865, 954, 783, 497, 674, 543, 956, 958,
	500, 30, 31, 32, 833, 34, 417, 495, 1002, 1080,
	916, 673, 258, 600, 522, 498, 872, 35, 47, 39,
	629, 643, 48, 49, 33, 512, 712, 1049, 522, 924,
	804, 500, 254, 905, 963, 1000, 570, 571, 668, 834,
	710, 711, 709, 791, 613, 1102, 782, 254, 494, 678,
	609, 613, 421, 337, 339, 499, 498, 755, 613, 878,
	917, 667, 965, 499, 498, 628, 254, 755, 469, 254,
	799, 74, 500, 412, 347, 405, 74, 319, 311, 995,
	500, 499, 498, 407, 53, 1001, 52, 1060, 296, 406,
	1086, 994, 254, 423, 708, 254, 254, 254, 500, 989,
	254, 139, 38, 832, 254, 494, 254, 254, 254, 40,
	822, 821, 41, 42, 811, 44, 43, 338, 338, 408,
	45, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 50, 420, 522, 335, 873, 502, 532, 729, 491,
	730, 513, 514, 515, 516, 517, 518, 519, 512, 314,
	503, 522, 846, 847, 848, 993, 842, 820, 536, 537,
	538, 539, 540, 541, 285, 515, 516, 517, 518, 519,
	512, 807, 486, 522, 998, 343, 501, 1119, 343, 1024,
	343, 491, 499, 498, 1054, 698, 700, 701, 553, 310,
	74, 699, 499, 498, 935, 254, 991, 990, 254, 500,
	74, 997, 859, 343, 1053, 531, 533, 576, 572, 500,
	589, 932, 911, 592, 590, 922, 921, 296, 573, 584,
	919, 918, 598, 910, 557, 558, 559, 560, 561, 562,
	563, 542, 906, 901, 545, 546, 547, 548, 549, 550,
	551, 796, 554, 556, 556, 556, 556, 556, 556, 556,
	556, 564, 565, 566, 567, 594, 657, 254, 597, 574,
	788, 254, 644, 645, 646, 606, 786, 585, 369, 368,
	370, 371, 372, 373, 254, 894, 343, 374, 731, 691,
	343, 22, 602, 470, 683, 318, 688, 430, 429, 1052,
	707, 913, 771, 57, 781, 706, 691, 653, 654, 695,
	696, 692, 702, 703, 704, 781, 887, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 74, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 74, 859, 522, 596, 734,
	276, 296, 742, 24, 890, 1024, 491, 920, 859, 749,
	750, 746, 756, 859, 680, 745, 419, 24, 759, 568,
	24, 278, 53, 854, 772, 637, 74, 757, 656, 405,
	582, 732, 733, 775, 583, 67, 589, 792, 652, 647,
	590, 744, 752, 779, 781, 1093, 771, 50, 977, 664,
	476, 777, 780, 53, 747, 748, 580, 785, 751, 545,
	762, 1096, 1095, 638, 639, 640, 641, 53, 763, 784,
	53, 53, 758, 1069, 760, 761, 1072, 1117, 648, 649,
	650, 1073, 1028, 1031, 1032, 1033, 1029, 769, 1030, 1034,
	1070, 1074, 1094, 1032, 1033, 1071, 1068, 776, 1110, 50,
	794, 845, 797, 768, 798, 254, 938, 1028, 1031, 1032,
	1033, 1029, 694, 1030, 1034, 787, 282, 283, 812, 813,
	814, 254, 816, 817, 818, 411, 511, 510, 520, 521,
	513, 514, 515, 516, 517, 518, 519, 512, 767, 409,
	522, 345, 1003, 926, 815, 823, 426, 416, 904, 662,
	888, 663, 843, 830, 707, 475, 1036, 346, 411, 706,
	279, 280, 855, 975, 806, 805, 793, 1100, 1087, 766,
	850, 851, 852, 273, 1023, 1063, 428, 765, 427, 274,
	57, 74, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 849, 1062, 522, 596, 863, 480,
	485, 325, 856, 323, 288, 254, 857, 1044, 808, 496,
	59, 61, 54, 1, 659, 658, 879, 868, 869, 870,
	616, 615, 874, 907, 608, 603, 308, 880, 607, 881,
	882, 883, 884, 74, 819, 589, 877, 491, 622, 590,
	621, 296, 899, 898, 858, 889, 900, 891, 892, 893,
	909, 620, 618, 809, 896, 634, 866, 999, 661, 902,
	875, 825, 996, 897, 985, 789, 604, 903, 623, 74,
	624, 254, 619, 433, 434, 432, 436, 435, 431, 146,
	290, 744, 1035, 1039, 860, 69, 296, 929, 831, 665,
	914, 915, 530, 764, 295, 925, 422, 778, 569, 403,
	934, 1061, 1022, 74, 876, 552, 378, 753, 74, 356,
	697, 367, 364, 366, 939, 940, 365, 575, 581, 946,
	863, 945, 504, 296, 742, 296, 947, 942, 254, 941,
	960, 937, 972, 936, 354, 74, 74, 348, 1078, 964,
	775, 971, 928, 74, 252, 976, 943, 473, 959, 962,
	967, 966, 980, 981, 984, 413, 1027, 1025, 982, 978,
	296, 929, 970, 744, 886, 484, 1019, 1088, 579, 25,
	287, 58, 983, 284, 14, 21, 15, 13, 12, 29,
	10, 9, 8, 7, 974, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 6, 1004, 522,
	5, 973, 1011, 4, 776, 275, 23, 979, 2, 20,
	19, 18, 17, 16, 254, 254, 928, 1006, 972, 1007,
	11, 0, 0, 0, 74, 0, 1021, 775, 1045, 0,
	1016, 1017, 74, 0, 0, 1048, 0, 0, 1051, 0,
	0, 296, 929, 0, 0, 1046, 74, 0, 286, 909,
	0, 287, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 296, 947, 254, 254, 254, 254, 972,
	972, 972, 972, 0, 0, 1018, 254, 0, 1058, 254,
	1075, 0, 254, 972, 0, 1082, 1083, 1038, 74, 1056,
	1059, 776, 0, 50, 1065, 0, 1067, 928, 589, 1064,
	0, 1066, 590, 0, 746, 1085, 1092, 0, 1077, 0,
	0, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 1091, 491, 0, 0, 0, 0, 320,
	321, 0, 0, 0, 0, 992, 0, 0, 973, 973,
	973, 973, 0, 0, 0, 0, 0, 0, 74, 74,
	74, 0, 1038, 0, 1105, 1106, 1115, 1116, 287, 1101,
	74, 0, 0, 0, 0, 1114, 1114, 1114, 0, 0,
	0, 0, 0, 287, 0, 1008, 1009, 1123, 1010, 0,
	0, 1012, 0, 1014, 1118, 0, 1120, 1121, 0, 0,
	0, 0, 287, 0, 0, 287, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 1108, 1109, 0, 0, 0, 0, 468, 0,
	0, 287, 287, 287, 0, 0, 477, 0, 0, 0,
	287, 0, 287, 287, 287, 0, 333, 0, 256, 0,
	259, 0, 261, 262, 0, 267, 268, 269, 270, 0,
	0, 341, 510, 520, 521, 513, 514, 515, 516, 517,
	518, 519, 512, 0, 0, 522, 0, 0, 0, 0,
	415, 0, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 474, 0, 0, 0, 0, 0, 0, 478, 0,
	481, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 591, 593, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 0, 0,
	328, 329, 0, 331, 0, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 456, 457, 458, 459, 460, 461,
	462, 0, 463, 464, 465, 466, 467, 452, 453, 454,
	455, 437, 438, 287, 0, 440, 0, 287, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 0, 586,
	287, 506, 0, 509, 0, 0, 0, 0, 0, 523,
	524, 525, 526, 527, 528, 529, 0, 507, 508, 505,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 0, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	593, 0, 0, 741, 741, 0, 334, 741, 0, 336,
	0, 681, 0, 0, 340, 684, 0, 0, 0, 0,
	0, 741, 741, 741, 741, 0, 0, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 487, 0, 488, 0, 489, 0, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 682, 0, 0,
	685, 686, 687, 0, 0, 690, 0, 0, 591, 0,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 91, 0, 0, 0, 0,
	0, 0, 862, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 112, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 864, 0, 885,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 499,
	498, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	0, 0, 593, 741, 0, 0, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 930, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 829, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	287, 1042, 840, 0, 0, 0, 0, 841, 0, 0,
	0, 75, 844, 96, 131, 109, 89, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	115, 0, 0, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138, 0, 0, 0, 0, 0, 0,
	0, 287, 287, 287, 287, 0, 0, 0, 0, 0,
	0, 0, 1076, 0, 0, 287, 0, 0, 1042, 0,
	0, 591, 239, 230, 201, 241, 178, 193, 250, 194,
	195, 222, 165, 209, 106, 191, 91, 0, 0, 240,
	206, 0, 181, 160, 188, 161, 179, 203, 86, 177,
	232, 212, 148, 0, 247, 97, 216, 0, 112, 103,
	0, 0, 205, 234, 207, 229, 200, 223, 171, 215,
	242, 192, 220, 0, 0, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 218, 237, 190, 219,
	221, 159, 217, 0, 163, 166, 249, 235, 184, 185,
	931, 0, 0, 0, 0, 0, 0, 204, 208, 226,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 182,
	0, 214, 0, 0, 0, 169, 164, 202, 0, 0,
	0, 150, 0, 183, 227, 0, 0, 0, 155, 199,
	127, 236, 197, 196, 243, 108, 0, 233, 180, 189,
	82, 187, 111, 107, 122, 77, 120, 114, 101, 93,
	94, 76, 0, 110, 85, 90, 84, 105, 117, 118,
	83, 132, 80, 126, 79, 167, 125, 104, 168, 116,
	121, 102, 99, 78, 119, 100, 98, 95, 87, 0,
	162, 0, 113, 123, 133, 176, 147, 128, 129, 130,
	151, 152, 0, 153, 0, 154, 149, 174, 175, 172,
	173, 210, 211, 244, 245, 246, 228, 170, 0, 0,
	231, 213, 75, 0, 96, 131, 109, 89, 124, 0,
	0, 0, 0, 0, 186, 248, 225, 224, 238, 0,
	88, 115, 0, 0, 0, 0, 0, 92, 0, 0,
	134, 135, 137, 136, 138, 239, 230, 201, 241, 178,
	193, 250, 194, 195, 222, 165, 209, 106, 191, 91,
	0, 0, 240, 206, 0, 181, 160, 188, 161, 179,
	203, 86, 177, 232, 212, 303, 0, 247, 97, 216,
	0, 112, 103, 0, 0, 205, 234, 207, 229, 200,
	223, 171, 215, 242, 192, 220, 0, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 218,
	237, 190, 219, 221, 159, 217, 0, 163, 166, 249,
	235, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	204, 208, 226, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 182, 0, 214, 0, 0, 0, 169, 164,
	202, 0, 0, 0, 302, 0, 183, 227, 0, 0,
	0, 304, 199, 127, 236, 197, 196, 243, 108, 0,
	233, 180, 189, 82, 187, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 299, 125,
	104, 298, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 162, 0, 113, 123, 133, 176, 305,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 301,
	174, 175, 172, 173, 210, 211, 244, 245, 246, 228,
	170, 0, 0, 231, 213, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 0, 0, 186, 248, 225,
	224, 238, 0, 88, 115, 0, 0, 0, 0, 0,
	293, 292, 300, 134, 135, 137, 136, 138, 239, 230,
	201, 241, 178, 193, 250, 194, 195, 222, 165, 209,
	106, 191, 91, 0, 0, 240, 206, 0, 181, 160,
	188, 161, 179, 203, 86, 177, 232, 212, 303, 0,
	247, 97, 216, 0, 112, 103, 0, 0, 205, 234,
	207, 229, 200, 223, 171, 215, 242, 192, 220, 0,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 218, 237, 190, 219, 221, 159, 217, 0,
	163, 166, 249, 235, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 204, 208, 226, 198, 0, 0, 0,
	0, 0, 0, 1055, 0, 182, 0, 214, 0, 0,
	0, 169, 164, 202, 0, 0, 0, 302, 0, 183,
	227, 0, 0, 0, 304, 199, 127, 236, 197, 196,
	243, 108, 0, 233, 180, 189, 82, 187, 111, 107,
	122, 77, 120, 114, 101, 93, 94, 76, 0, 110,
	85, 90, 84, 105, 117, 118, 83, 132, 80, 126,
	79, 167, 125, 104, 168, 116, 121, 102, 99, 78,
	119, 100, 98, 95, 87, 0, 162, 0, 113, 123,
	133, 176, 305, 128, 129, 130, 0, 0, 0, 0,
	0, 0, 301, 174, 175, 172, 173, 210, 211, 244,
	245, 246, 228, 170, 0, 0, 231, 213, 75, 0,
	96, 131, 109, 89, 124, 0, 0, 0, 0, 0,
	186, 248, 225, 224, 238, 0, 88, 115, 0, 0,
	0, 0, 0, 92, 0, 0, 134, 135, 137, 136,
	138, 239, 230, 201, 241, 178, 193, 250, 194, 195,
	222, 165, 209, 106, 191, 91, 0, 0, 240, 206,
	0, 181, 160, 188, 161, 179, 203, 86, 177, 232,
	212, 303, 0, 247, 97, 216, 0, 112, 103, 0,
	0, 205, 234, 207, 229, 200, 223, 171, 215, 242,
	192, 220, 53, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 218, 237, 190, 219, 221,
	159, 217, 0, 163, 166, 249, 235, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 204, 208, 226, 198,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 0,
	214, 0, 0, 0, 169, 164, 202, 0, 0, 0,
	302, 0, 183, 227, 0, 0, 0, 304, 199, 127,
	236, 197, 196, 243, 108, 0, 233, 180, 189, 82,
	187, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 167, 125, 104, 168, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 162,
	0, 113, 123, 133, 176, 305, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 301, 174, 175, 172, 173,
	210, 211, 244, 245, 246, 228, 170, 0, 0, 231,
	213, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 0, 0, 186, 248, 225, 224, 238, 0, 88,
	115, 0, 0, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138, 239, 230, 201, 241, 178, 193,
	250, 194, 195, 222, 165, 209, 106, 191, 91, 0,
	0, 240, 206, 0, 181, 160, 188, 161, 179, 203,
	86, 177, 232, 212, 303, 0, 247, 97, 216, 0,
	112, 103, 0, 0, 205, 234, 207, 229, 200, 223,
	171, 215, 242, 192, 220, 0, 0, 0, 401, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 218, 237,
	190, 219, 221, 159, 217, 0, 163, 166, 249, 235,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 204,
	208, 226, 198, 0, 0, 0, 0, 0, 0, 944,
	0, 182, 0, 214, 0, 0, 0, 169, 164, 202,
	0, 0, 0, 302, 0, 183, 227, 0, 0, 0,
	304, 199, 127, 236, 197, 196, 243, 108, 0, 233,
	180, 189, 82, 187, 111, 107, 122, 77, 120, 114,
	101, 93, 94, 76, 0, 110, 85, 90, 84, 105,
	117, 118, 83, 132, 80, 126, 79, 167, 125, 104,
	168, 116, 121, 102, 99, 78, 119, 100, 98, 95,
	87, 0, 162, 0, 113, 123, 133, 176, 305, 128,
	129, 130, 0, 0, 0, 0, 0, 0, 301, 174,
	175, 172, 173, 210, 211, 244, 245, 246, 228, 170,
	0, 0, 231, 213, 75, 0, 96, 131, 109, 89,
	124, 0, 0, 0, 0, 0, 186, 248, 225, 224,
	238, 0, 88, 115, 0, 0, 0, 0, 0, 92,
	0, 0, 134, 135, 137, 136, 138, 239, 230, 201,
	241, 178, 193, 250, 194, 195, 222, 165, 209, 106,
	191, 91, 0, 0, 240, 206, 0, 181, 160, 188,
	161, 179, 203, 86, 177, 232, 212, 303, 0, 247,
	97, 216, 0, 112, 103, 0, 0, 205, 234, 207,
	229, 200, 223, 171, 215, 242, 192, 220, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 218, 237, 190, 219, 221, 159, 217, 0, 163,
	166, 249, 235, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 204, 208, 226, 198, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 0, 214, 0, 0, 0,
	169, 164, 202, 0, 0, 0, 302, 0, 183, 227,
	0, 0, 0, 304, 199, 127, 236, 197, 196, 243,
	108, 0, 233, 180, 189, 82, 187, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	299, 125, 104, 298, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 162, 0, 113, 123, 133,
	176, 305, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 301, 174, 175, 172, 173, 210, 211, 244, 245,
	246, 228, 170, 0, 0, 231, 213, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 0, 186,
	248, 225, 224, 238, 0, 88, 115, 0, 0, 0,
	0, 0, 92, 0, 300, 134, 135, 137, 136, 138,
	239, 230, 201, 241, 178, 193, 250, 194, 195, 222,
	165, 209, 106, 191, 91, 0, 0, 240, 206, 0,
	181, 160, 188, 161, 179, 203, 86, 177, 232, 212,
	303, 0, 247, 97, 216, 0, 112, 103, 0, 0,
	205, 234, 207, 229, 200, 223, 171, 215, 242, 192,
	220, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 218, 237, 190, 219, 221, 159,
	217, 0, 163, 166, 249, 235, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 204, 208, 226, 198, 0,
	0, 0, 0, 0, 0, 0, 0, 182, 0, 214,
	0, 0, 0, 169, 164, 202, 0, 0, 0, 302,
	0, 183, 227, 0, 0, 0, 304, 199, 127, 236,
	197, 196, 243, 108, 0, 233, 180, 189, 82, 187,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 167, 125, 104, 168, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 162, 0,
	113, 123, 133, 176, 305, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 301, 174, 175, 172, 173, 210,
	211, 244, 245, 246, 228, 170, 0, 0, 231, 213,
	75, 0, 96, 131, 109, 89, 124, 0, 0, 0,
	0, 0, 186, 248, 225, 224, 238, 0, 88, 115,
	0, 0, 0, 0, 0, 92, 0, 0, 134, 135,
	137, 136, 138, 239, 230, 201, 241, 178, 193, 250,
	194, 195, 222, 165, 209, 106, 191, 91, 0, 0,
	240, 206, 0, 181, 160, 188, 161, 179, 203, 86,
	177, 232, 212, 303, 0, 247, 97, 216, 0, 112,
	103, 0, 0, 205, 234, 207, 229, 200, 223, 171,
	215, 242, 192, 220, 0, 0, 0, 401, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 218, 237, 190,
	219, 221, 159, 217, 0, 163, 166, 249, 235, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 204, 208,
	226, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 214, 0, 0, 0, 169, 164, 202, 0,
	0, 0, 302, 0, 183, 227, 0, 0, 0, 304,
	199, 127, 236, 197, 196, 243, 108, 0, 233, 180,
	189, 82, 187, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 167, 125, 104, 168,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 162, 0, 113, 123, 133, 176, 305, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 301, 174, 175,
	172, 173, 210, 211, 244, 245, 246, 228, 170, 0,
	0, 231, 213, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 0, 0, 186, 248, 225, 224, 238,
	0, 88, 115, 0, 0, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 138, 239, 230, 201, 241,
	178, 193, 250, 194, 195, 222, 165, 209, 106, 191,
	91, 0, 0, 240, 206, 0, 181, 160, 188, 161,
	179, 203, 86, 177, 232, 212, 303, 0, 247, 97,
	216, 0, 112, 103, 0, 0, 205, 234, 207, 229,
	200, 223, 171, 215, 242, 192, 220, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	218, 237, 190, 219, 221, 159, 217, 0, 163, 166,
	249, 235, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 204, 208, 226, 198, 0, 0, 0, 0, 0,
	0, 0, 0, 182, 0, 214, 0, 0, 0, 169,
	164, 202, 0, 0, 0, 302, 0, 183, 227, 0,
	0, 0, 304, 199, 127, 236, 197, 196, 243, 108,
	0, 233, 180, 189, 82, 187, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 167,
	125, 104, 168, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 162, 0, 113, 123, 133, 176,
	305, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	301, 174, 175, 172, 173, 210, 211, 244, 245, 246,
	228, 170, 0, 0, 231, 213, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 186, 248,
	225, 224, 238, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 106,
	0, 91, 0, 0, 0, 0, 0, 736, 0, 352,
	0, 0, 0, 86, 351, 0, 0, 0, 0, 388,
	97, 0, 0, 112, 103, 0, 0, 0, 0, 381,
	382, 0, 0, 0, 0, 0, 0, 0, 53, 0,
	0, 401, 369, 368, 370, 371, 372, 373, 0, 0,
	81, 374, 375, 376, 0, 0, 0, 349, 362, 0,
	387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	359, 360, 739, 0, 0, 0, 399, 0, 361, 0,
	0, 358, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 397, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 389, 398, 395, 396, 393, 394, 392, 391,
	390, 400, 383, 384, 386, 0, 385, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 115, 0, 0, 0,
	0, 106, 92, 91, 0, 134, 135, 137, 136, 138,
	0, 352, 0, 0, 0, 86, 351, 0, 0, 0,
	0, 388, 97, 0, 0, 112, 103, 0, 0, 0,
	0, 381, 382, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 401, 369, 368, 370, 371, 372, 373,
	0, 0, 81, 374, 375, 376, 0, 0, 0, 349,
	362, 0, 387, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 359, 360, 739, 0, 0, 0, 399, 0,
	361, 0, 0, 358, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	397, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 389, 398, 395, 396, 393, 394,
	392, 391, 390, 400, 383, 384, 386, 0, 385, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 115, 0,
	0, 0, 0, 106, 92, 91, 0, 134, 135, 137,
	136, 138, 0, 352, 0, 0, 0, 86, 351, 0,
	0, 0, 0, 388, 97, 0, 0, 112, 103, 0,
	0, 0, 0, 381, 382, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 343, 401, 369, 368, 370, 371,
	372, 373, 0, 0, 81, 374, 375, 376, 0, 0,
	0, 349, 362, 0, 387, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 359, 360, 0, 0, 0, 0,
	399, 0, 361, 0, 0, 358, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 397, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 389, 398, 395, 396,
	393, 394, 392, 391, 390, 400, 383, 384, 386, 0,
	385, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 0, 0, 0, 24, 0, 0, 0, 0, 88,
	115, 0, 0, 0, 0, 106, 92, 91, 0, 134,
	135, 137, 136, 138, 0, 352, 0, 0, 0, 86,
	351, 0, 0, 0, 0, 388, 97, 0, 0, 112,
	103, 0, 0, 0, 0, 381, 382, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 401, 369, 368,
	370, 371, 372, 373, 0, 0, 81, 374, 375, 376,
	0, 0, 0, 349, 362, 0, 387, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 359, 360, 0, 0,
	0, 0, 399, 0, 361, 0, 0, 358, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 397, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 389, 398,
	395, 396, 393, 394, 392, 391, 390, 400, 383, 384,
	386, 0, 385, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 115, 0, 0, 0, 0, 106, 92, 91,
	0, 134, 135, 137, 136, 138, 0, 352, 0, 0,
	0, 86, 351, 0, 0, 0, 0, 388, 97, 0,
	0, 112, 103, 0, 0, 0, 0, 381, 382, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 401,
	369, 368, 370, 371, 372, 373, 0, 0, 81, 374,
	375, 376, 0, 0, 0, 349, 362, 0, 387, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 359, 360,
	0, 0, 0, 0, 399, 0, 361, 0, 0, 358,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 397, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	389, 398, 395, 396, 393, 394, 392, 391, 390, 400,
	383, 384, 386, 0, 385, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 0, 0, 0, 106, 0,
	91, 0, 0, 88, 115, 0, 0, 0, 0, 0,
	92, 0, 86, 134, 135, 137, 136, 138, 388, 97,
	0, 0, 112, 103, 0, 0, 0, 0, 381, 382,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	401, 369, 368, 370, 371, 372, 373, 0, 0, 81,
	374, 375, 376, 0, 0, 0, 0, 362, 0, 387,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 359,
	360, 0, 0, 0, 0, 399, 0, 361, 0, 0,
	358, 363, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 397, 0, 108,
	0, 0, 0, 0, 82, 0, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 0,
	125, 104, 0, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 0, 0, 113, 123, 133, 0,
	0, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	0, 389, 398, 395, 396, 393, 394, 392, 391, 390,
	400, 383, 384, 386, 0, 385, 75, 0, 96, 131,
	109, 89, 124, 0, 0, 0, 0, 0, 106, 0,
	91, 0, 0, 0, 88, 115, 0, 0, 0, 0,
	0, 92, 86, 0, 134, 135, 137, 136, 138, 97,
	0, 0, 112, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 511, 510, 520, 521, 513,
	514, 515, 516, 517, 518, 519, 512, 0, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 82, 0, 111, 107, 122, 77,
	120, 114, 101, 93, 94, 76, 0, 110, 85, 90,
	84, 105, 117, 118, 83, 132, 80, 126, 79, 0,
	125, 104, 0, 116, 121, 102, 99, 78, 119, 100,
	98, 95, 87, 0, 0, 0, 113, 123, 133, 0,
	0, 128, 129, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 91, 0, 75, 71, 96, 131,
	109, 89, 124, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 97, 88, 115, 112, 103, 0, 0,
	0, 92, 0, 0, 134, 135, 137, 136, 138, 0,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 0, 127, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 82, 0,
	111, 107, 122, 77, 120, 114, 101, 93, 94, 76,
	0, 110, 85, 90, 84, 105, 117, 118, 83, 132,
	80, 126, 79, 0, 125, 104, 0, 116, 121, 102,
	99, 78, 119, 100, 98, 95, 87, 0, 0, 0,
	113, 123, 133, 0, 0, 128, 129, 130, 0, 0,
	0, 0, 0, 0, 0, 24, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 91, 0,
	75, 0, 96, 131, 109, 89, 124, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 97, 88, 115,
	112, 103, 0, 0, 0, 92, 0, 0, 134, 135,
	137, 136, 138, 0, 0, 53, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 82, 0, 111, 107, 122, 77, 120, 114,
	101, 93, 94, 76, 0, 110, 85, 90, 84, 105,
	117, 118, 83, 132, 80, 126, 79, 0, 125, 104,
	0, 116, 121, 102, 99, 78, 119, 100, 98, 95,
	87, 0, 0, 0, 113, 123, 133, 0, 0, 128,
	129, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 75, 91, 96, 131, 109, 89,
	124, 0, 1041, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 88, 115, 97, 0, 0, 112, 103, 92,
	0, 0, 134, 135, 137, 136, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 253, 0, 1043, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 91,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 97, 88,
	115, 112, 103, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138, 0, 0, 53, 0, 0, 73,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 91, 0, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 97, 88, 115, 112, 103, 0, 0, 0,
	92, 0, 0, 134, 135, 137, 136, 138, 0, 0,
	0, 0, 0, 73, 0, 0, 577, 0, 0, 578,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 91, 0, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 86,
	425, 0, 0, 0, 0, 0, 97, 88, 115, 112,
	103, 0, 0, 0, 92, 0, 0, 134, 135, 137,
	136, 138, 0, 0, 0, 0, 0, 73, 0, 424,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 91, 0, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	97, 88, 115, 112, 103, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 138, 0, 0, 0, 0,
	0, 253, 0, 1043, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 91, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 97, 88, 115, 112, 103, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
	0, 0, 53, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 91,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 97, 88,
	115, 112, 103, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138, 0, 0, 0, 0, 0, 73,
	0, 864, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 82, 0, 111, 107, 122, 77, 120,
	114, 101, 93, 94, 76, 0, 110, 85, 90, 84,
	105, 117, 118, 83, 132, 80, 126, 79, 0, 125,
	104, 0, 116, 121, 102, 99, 78, 119, 100, 98,
	95, 87, 0, 0, 0, 113, 123, 133, 0, 0,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 91, 0, 75, 0, 96, 131, 109,
	89, 124, 0, 0, 414, 86, 0, 0, 0, 0,
	0, 0, 97, 88, 115, 112, 103, 0, 0, 0,
	92, 0, 0, 134, 135, 137, 136, 138, 0, 0,
	0, 0, 0, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 82, 0, 111,
	107, 122, 77, 120, 114, 101, 93, 94, 76, 0,
	110, 85, 90, 84, 105, 117, 118, 83, 132, 80,
	126, 79, 0, 125, 104, 0, 116, 121, 102, 99,
	78, 119, 100, 98, 95, 87, 0, 0, 0, 113,
	123, 133, 0, 0, 128, 129, 130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 91, 0, 75,
	0, 96, 131, 109, 89, 124, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 97, 88, 115, 112,
	103, 0, 0, 0, 92, 0, 0, 134, 135, 137,
	136, 138, 0, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 82, 0, 111, 107, 122, 77, 120, 114, 101,
	93, 94, 76, 0, 110, 85, 90, 84, 105, 117,
	118, 83, 132, 80, 126, 79, 0, 125, 104, 0,
	116, 121, 102, 99, 78, 119, 100, 98, 95, 87,
	0, 0, 0, 113, 123, 133, 0, 0, 128, 129,
	130, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 91, 0, 75, 0, 96, 131, 109, 89, 124,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	97, 88, 115, 112, 103, 0, 0, 0, 92, 0,
	0, 134, 135, 137, 136, 138, 0, 0, 0, 0,
	0, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 82, 0, 111, 107, 122,
	77, 120, 114, 101, 93, 94, 76, 0, 110, 85,
	90, 84, 105, 117, 118, 83, 132, 80, 126, 79,
	0, 125, 104, 0, 116, 121, 102, 99, 78, 119,
	100, 98, 95, 87, 0, 0, 0, 113, 123, 133,
	0, 0, 128, 129, 130, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 91, 0, 75, 0, 96,
	131, 109, 89, 124, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 97, 88, 115, 112, 103, 0,
	0, 0, 92, 0, 0, 134, 135, 137, 136, 138,
	0, 0, 0, 0, 0, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 82,
	0, 111, 107, 122, 77, 120, 114, 101, 93, 94,
	76, 0, 110, 85, 90, 84, 105, 117, 118, 83,
	132, 80, 126, 79, 0, 125, 104, 0, 116, 121,
	102, 99, 78, 119, 100, 98, 95, 87, 0, 0,
	0, 113, 123, 133, 0, 0, 128, 129, 130, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 96, 131, 109, 89, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	115, 0, 0, 0, 0, 0, 92, 0, 0, 134,
	135, 137, 136, 138,
}
var yyPact = [...]int{

	107, -1000, -176, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 726, 765, -1000, -1000, -1000, -1000, -1000, 539,
	5425, 44, -2, 81, 72, 1907, 70, 7636, -1000, -1000,
	23, -1000, -162, -1000, -1000, -157, -1000, -1000, -1000, -1000,
	574, -1000, -1000, -1000, -1000, -1000, 717, 724, 575, 696,
	633, -1000, 44, 7636, 754, 2140, -141, 350, 36, 66,
	36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 69,
	-1000, 33, 446, 33, 7636, 7636, -1000, 753, -46, 751,
	4, -1000, -1000, -54, -1000, -60, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7636, -1000, -1000, -1000, -1000, -1000, -1000, 292, -1000,
	-1000, -1000, -1000, 526, 526, -1000, 7636, -1000, -1000, -1000,
	-1000, 337, 683, 4840, 4840, 726, -1000, 574, -1000, -1000,
	-1000, 660, -1000, -1000, 226, 7084, 674, 115, 7636, 519,
	3072, -1000, -1000, -1000, 189, 6348, -1000, -1000, -1000, 673,
	-1000, -1000, -1000, -1000, -1000, -1000, 723, 721, 450, -1000,
	1186, 7636, 213, 444, 7636, 7636, 7636, 688, 555, 7636,
	-1000, -1000, -1000, 7636, 749, 7636, 7636, 7636, -1000, -1000,
	750, -1000, 749, -1000, -1000, -1000, -1000, -1000, 4840, -1000,
	-1000, 144, -1000, -1000, -1000, 761, 122, 339, -1000, 4840,
	1286, 526, 526, -1000, -1000, 92, -1000, -1000, 5041, 5041,
	5041, 5041, 5041, 5041, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 526, 106, -1000,
	4628, 526, 526, 526, 526, 526, 526, 4840, 526, 526,
	526, 526, 526, 526, 526, 526, 526, 526, 526, 526,
	526, -1000, -1000, 522, -1000, 228, 717, 337, 633, 6164,
	570, -1000, -1000, 557, 7636, -1000, 7452, 3771, 746, 3072,
	519, 4840, 125, -1000, -1000, -1000, -1000, -133, 526, -155,
	142, 112, -38, -1000, -1000, 529, -1000, 529, 529, 529,
	529, -9, -9, -9, -9, -1000, -1000, -1000, -1000, -1000,
	543, -1000, 529, 529, 529, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 542, 542, 542, 532, 532, 677, 684,
	554, -1000, 58, 517, -1000, -1000, 7636, -1000, -1000, 746,
	7636, -1000, -1000, -1000, 717, -57, -1000, -1000, -1000, -1000,
	442, 210, -1000, 7636, -1000, -1000, -1000, 631, 4840, 4840,
	336, 4840, 4840, 130, 5041, 248, 169, 5041, 5041, 5041,
	5041, 5041, 5041, 5041, 5041, 5041, 5041, 5041, 5041, 5041,
	5041, 5041, 299, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 439, -1000, 574, 428, 428, 126, 126, 126, 126,
	126, 5241, 3992, 3538, 337, 4628, 4204, 4204, 4840, 4840,
	4204, 693, 208, 210, 7268, -1000, 337, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4204, 4204, 4204, 4204, 4840, -1000,
	-1000, -1000, 683, -1000, 693, 719, -1000, 661, 626, 4204,
	-1000, 551, 7452, 526, -1000, 5980, -1000, 547, -1000, 183,
	-1000, 103, -1000, -1000, -1000, 726, 4840, -1000, 210, -1000,
	427, 526, 421, -1000, -34, 180, -1000, -1000, 541, 703,
	149, 402, 156, -1000, -1000, -1000, 112, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 221, 60, -1000, 702,
	-1000, 701, 330, 760, -40, -1000, -1000, 272, -9, -9,
	-1000, -1000, 125, 671, 125, 125, 125, 316, -1000, -1000,
	-1000, -1000, 269, -1000, -1000, -1000, 268, -1000, -1000, 677,
	-1000, 39, -1000, -1000, 7636, -1000, 201, 176, 47, 27,
	26, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7636, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 315,
	-1000, 4840, -1000, -1000, 619, 130, 161, -1000, -1000, 303,
	-1000, -1000, 210, 210, 851, -1000, -1000, -1000, -1000, 248,
	5041, 5041, 5041, 449, 851, 648, 245, 1117, 126, 285,
	285, 140, 140, 140, 140, 140, 263, 263, -1000, -1000,
	-1000, 337, -1000, -1000, -1000, 337, 4204, 511, -1000, -1000,
	1646, 101, 526, 100, -1000, -1000, 337, 365, 365, 109,
	329, 365, 4204, 198, -1000, 4840, 337, -1000, 365, 337,
	365, 365, -1000, -1000, 7636, -1000, -1000, -1000, -1000, 516,
	-1000, 679, 457, 507, -1000, -1000, 4416, 337, 438, 99,
	726, 7452, 4840, 3538, 717, 210, -1000, 394, 337, 676,
	170, 393, 7268, -1000, 384, -1000, -1000, 373, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -63, -1000,
	-1000, 453, 125, 125, -1000, 171, -1000, -1000, -1000, 383,
	-1000, 510, 378, -1000, 166, 166, -1000, 670, 2606, -1000,
	7636, -1000, -1000, -1000, 372, -10, 539, 355, 350, -1000,
	-1000, -1000, -1000, 210, -1000, -1000, -1000, -1000, -1000, -1000,
	449, 851, 592, -1000, 5041, 5041, -1000, -1000, 365, 4204,
	-1000, -1000, 6900, -1000, -1000, 2839, 4204, 3305, -1000, -1000,
	-1000, 43, 299, 43, -93, 499, 172, -1000, 4840, 202,
	-1000, -1000, -1000, -1000, -1000, -1000, 746, 6716, 700, -1000,
	526, -1000, -1000, 571, 7268, 7268, 717, -1000, 210, -1000,
	-1000, 337, 2606, -161, -20, 257, -1000, 359, -1000, 529,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 314,
	249, -1000, 237, 362, -1000, 196, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 669, -1000, -1000, -1000, -1000, 5041, 851,
	851, -1000, -1000, -1000, -1000, 96, 337, -1000, 337, 529,
	529, -1000, 529, 532, -1000, 529, 8, 529, 7, 337,
	337, 526, -85, -1000, 210, 4840, 722, 508, 622, -1000,
	-1000, -1000, 690, 5609, 5796, 759, -1000, 526, -1000, 574,
	95, -1000, -1000, 2606, -1000, -1000, -1000, -1000, 164, -1000,
	-100, 7268, -1000, -1000, 451, 366, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 345, 851, 2373, -1000, -1000, -1000, 83,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5041, 337,
	246, 210, 742, 720, 6716, 6716, 6716, 6716, -1000, 611,
	588, -1000, 605, 591, 606, 7636, -1000, 342, 5609, 104,
	-1000, 6532, -1000, -1000, 7452, 507, 337, 7268, -1000, 251,
	708, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1, -1000,
	-1000, -1000, 4840, 4840, 622, 550, 597, -1000, -1000, -1000,
	-1000, 577, -1000, 576, -1000, -1000, -1000, -1000, -1000, 64,
	62, 46, -1000, 468, -1000, -1000, -1000, 706, 337, 59,
	-117, 210, 459, 4840, 4840, -1000, -1000, 526, 526, 526,
	-1000, -1000, 616, -97, -126, 210, 210, 7268, 7268, 7268,
	-1000, 595, -1000, 340, -1000, 340, 340, -101, -1000, 7268,
	-1000, -1000, -118, -1000, -128, -1000,
}
var yyPgo = [...]int{

	0, 980, 973, 972, 971, 970, 969, 968, 25, 501,
	966, 965, 963, 960, 957, 943, 942, 941, 940, 939,
	938, 937, 936, 935, 934, 60, 933, 931, 929, 50,
	928, 70, 927, 926, 925, 40, 67, 12, 27, 20,
	924, 22, 34, 28, 922, 917, 5, 916, 944, 915,
	59, 907, 901, 898, 7, 24, 897, 894, 882, 878,
	56, 19, 877, 876, 873, 872, 871, 870, 44, 2,
	10, 9, 14, 869, 4, 13, 867, 42, 865, 864,
	862, 861, 33, 859, 51, 858, 21, 55, 857, 32,
	1, 41, 61, 58, 856, 854, 853, 321, 852, 153,
	298, 849, 46, 848, 845, 57, 0, 17, 18, 43,
	844, 866, 15, 3, 843, 842, 1158, 11, 35, 840,
	16, 839, 838, 837, 836, 835, 834, 833, 185, 832,
	830, 828, 39, 37, 827, 826, 825, 824, 822, 821,
	29, 818, 817, 815, 813, 52, 8, 812, 811, 800,
	798, 794, 54, 788, 49, 23, 786, 785, 784, 6,
	783, 781, 780, 47, 775, 774, 45, 773, 772, 73,
	30, 771, 53,
}
var yyR1 = [...]int{

	0, 167, 168, 168, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 8, 8, 8, 9, 10, 10, 11,
	11, 12, 12, 28, 28, 13, 14, 15, 15, 119,
	119, 16, 16, 16, 16, 16, 164, 164, 165, 165,
	166, 166, 141, 141, 140, 140, 139, 139, 138, 138,
	142, 142, 142, 19, 155, 157, 135, 135, 134, 134,
	136, 136, 137, 137, 137, 156, 156, 156, 152, 122,
	122, 122, 161, 161, 162, 162, 163, 163, 163, 163,
	163, 163, 163, 125, 125, 123, 123, 123, 123, 123,
	123, 123, 124, 124, 124, 124, 124, 126, 126, 126,
	126, 126, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 151, 151, 128, 128,
	145, 145, 146, 146, 146, 143, 143, 144, 144, 147,
	147, 129, 129, 129, 129, 129, 130, 148, 132, 132,
	132, 133, 133, 149, 149, 150, 150, 131, 153, 153,
	158, 158, 158, 158, 158, 154, 154, 160, 160, 159,
	17, 17, 17, 17, 17, 17, 17, 17, 18, 18,
	18, 51, 51, 1, 20, 2, 3, 4, 4, 5,
	5, 5, 5, 6, 6, 6, 6, 121, 121, 121,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 34, 34, 50, 50, 24, 22, 23, 23, 23,
	23, 171, 25, 26, 26, 27, 27, 27, 31, 31,
	31, 29, 29, 30, 30, 37, 37, 36, 36, 38,
	38, 38, 38, 110, 110, 110, 109, 109, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 52, 44, 44,
	44, 44, 115, 115, 114, 114, 114, 113, 113, 45,
	45, 45, 45, 46, 46, 46, 46, 47, 47, 49,
	49, 48, 48, 53, 53, 53, 53, 54, 54, 55,
	55, 39, 39, 39, 39, 39, 39, 39, 98, 98,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 35, 35, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 172, 172, 66, 66, 66, 66, 32,
	32, 32, 32, 32, 118, 118, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 78,
	78, 33, 33, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	89, 89, 70, 70, 72, 72, 71, 73, 90, 90,
	91, 92, 92, 93, 93, 95, 95, 95, 94, 94,
	94, 96, 96, 99, 99, 100, 100, 97, 97, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 102,
	102, 102, 103, 103, 104, 104, 104, 107, 107, 108,
	108, 111, 111, 112, 112, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 169, 170, 116, 117,
	117, 117,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 7, 10, 1, 3, 1,
	3, 6, 7, 1, 1, 8, 7, 3, 4, 1,
	1, 2, 9, 8, 5, 7, 0, 1, 1, 2,
	4, 4, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 4, 4, 4, 0, 3, 0, 4,
	0, 3, 0, 1, 1, 1, 3, 3, 3, 3,
	1, 1, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 1, 4, 4, 2, 2, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 4, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 1,
	2, 2, 2, 2, 2, 2, 3, 1, 0, 3,
	3, 0, 2, 2, 1, 2, 1, 2, 4, 7,
	2, 3, 2, 2, 3, 1, 1, 1, 3, 2,
	6, 7, 7, 7, 9, 7, 7, 7, 4, 5,
	4, 1, 3, 3, 3, 2, 2, 3, 4, 2,
	3, 2, 2, 4, 4, 3, 6, 1, 1, 1,
	3, 5, 6, 5, 5, 5, 3, 3, 6, 3,
	5, 0, 3, 0, 2, 4, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 5,
	5, 3, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 1, 3, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -167, -7, -8, -12, -13, -14, -15, -16, -17,
	-18, -1, -20, -21, -24, -22, -2, -3, -4, -5,
	-6, -23, -9, -10, 6, -28, 8, 9, 33, -19,
	114, 115, 116, 137, 118, 130, 36, 53, 215, 132,
	222, 225, 226, 229, 228, 233, 29, 131, 135, 136,
	-169, 7, 199, 56, -168, 238, -82, 14, -27, 5,
	-25, -171, -25, -25, -25, -25, -155, 56, 191, -104,
	121, 22, -107, 59, -106, 205, 144, 138, 166, 157,
	155, 68, 133, 153, 149, 147, 31, 171, 223, 210,
	148, 19, 230, 142, 143, 170, 207, 38, 169, 165,
	168, 141, 164, 42, 160, 150, 17, 136, 128, 209,
	146, 135, 41, 175, 140, 224, 162, 151, 152, 167,
	139, 163, 137, 176, 211, 159, 156, 123, 180, 181,
	182, 208, 154, 177, 233, 234, 236, 235, 237, -97,
	125, 121, 122, 191, 121, 121, -121, 179, 35, 189,
	114, 183, 184, 186, 188, 121, 59, -105, -106, 74,
	26, 28, 173, 77, 109, 15, 78, 158, 161, 108,
	200, 51, 192, 193, 190, 191, 178, 32, 9, 29,
	131, 25, 102, 116, 81, 82, 217, 134, 27, 132,
	71, 18, 54, 10, 12, 13, 126, 125, 93, 122,
	49, 7, 110, 30, 90, 45, 23, 47, 91, 16,
	194, 195, 34, 204, 104, 52, 39, 75, 69, 72,
	55, 73, 14, 50, 220, 219, 92, 117, 199, 48,
	6, 203, 33, 130, 46, 80, 124, 70, 221, 5,
	22, 8, 53, 127, 196, 197, 198, 37, 218, 79,
	11, 121, -111, 59, -106, -116, -116, 62, 209, -116,
	227, -116, -116, 234, 236, 235, 237, -116, -116, -116,
	-116, -8, -86, 16, 15, -11, -9, -169, 6, 24,
	25, -31, 43, 44, -26, -97, -48, -111, 10, -92,
	-119, -93, 231, 230, -108, -95, -107, -105, 161, 158,
	232, 189, 114, 35, 121, 179, 212, 216, -156, -152,
	59, -100, 126, 122, -100, 121, -99, 126, 59, -99,
	-48, -48, -116, 10, 179, 10, 121, 191, -116, -116,
	185, -116, 188, -48, -116, 62, -116, -71, -169, -71,
	-116, -48, -170, 58, -87, 18, 34, -39, -56, 75,
	-61, 32, 27, -60, -57, -75, -73, -74, 109, 98,
	99, 106, 76, 110, -65, -63, -64, -66, 61, 60,
	62, 63, 64, 65, 69, 70, 71, -107, -111, -71,
	-169, 47, 48, 200, 201, 204, 202, 78, 37, 190,
	198, 197, 196, 194, 195, 192, 193, 126, 191, 104,
	199, 59, -106, -83, -84, -39, -82, -8, -25, 39,
	-29, 25, 67, -49, 30, -48, 33, 111, -48, 57,
	-92, 83, -94, -107, 61, 32, 33, 15, 15, 58,
	57, -122, -125, -127, -126, -123, -124, 155, 156, 109,
	159, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 133, 151, 152, 153, 154, 138, 139, 140, 141,
	142, 143, 144, 146, 147, 148, 149, 150, -111, 75,
	59, -48, -48, -51, -48, 27, 55, -111, -48, -50,
	10, -48, -48, -48, -34, 10, -50, -116, -116, -116,
	-69, -39, -116, -102, 124, 26, 8, 93, 74, 73,
	90, 57, 17, -39, -58, 93, 75, 91, 92, 77,
	95, 94, 105, 98, 99, 100, 101, 102, 103, 104,
	96, 97, 108, 83, 84, 85, 86, 87, 88, 89,
	-98, -169, -74, -169, 112, 113, -61, -61, -61, -61,
	-61, -61, -169, 111, -8, -169, -169, -169, -169, -169,
	-169, -169, -78, -39, -169, -172, -169, -172, -172, -172,
	-172, -172, -172, -172, -169, -169, -169, -169, 57, -85,
	28, 29, -86, -170, -31, -62, -107, 62, 65, -30,
	46, -59, 33, 37, -8, -169, -48, -90, -91, -75,
	-107, -111, -112, -111, -105, -55, 11, -93, -39, -133,
	108, 214, -169, -157, -135, 223, -152, -153, -158, 128,
	22, -154, 19, 122, 23, -161, -162, -163, -147, -129,
	-148, -149, -150, -131, -130, 69, 75, 32, 173, 128,
	23, 22, 68, 55, -143, 176, -128, 56, -128, -128,
	-128, -128, -132, 158, -132, -132, -132, 56, -128, -128,
	-128, -145, 56, -145, -145, -146, 56, -146, -164, -165,
	-166, -141, 32, 27, 55, -101, 117, 223, 200, 119,
	116, 120, 115, 173, 158, 68, 32, 14, 211, 59,
	57, -48, -116, -55, -48, -116, -116, -116, -86, 187,
	-116, 57, -170, -48, 41, -39, -39, -67, 69, 75,
	70, 71, -39, -39, -61, -68, -71, -74, 66, 93,
	91, 92, 77, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -118, 59,
	61, 59, -60, -60, -107, -37, 25, -36, -38, 100,
	-39, -111, -108, -112, -105, -170, -8, -36, -36, -39,
	-39, -36, -29, -76, -77, 79, -107, -170, -36, -37,
	-36, -36, -84, -87, -96, 18, 10, 37, 37, -36,
	-89, 55, -90, -70, -72, -71, -169, -8, -88, -107,
	-55, 57, 83, 111, -82, -39, 59, -169, 59, -136,
	173, 83, 56, 23, -154, 59, 59, -154, -163, 69,
	61, 62, 63, 69, 190, 23, 23, 61, 8, -144,
	177, 62, -132, -132, -133, 33, -133, -133, -133, -151,
	61, 62, 62, -166, 108, -139, 161, 158, -48, -116,
	-102, -103, 122, 23, 83, 124, 129, 129, 129, -48,
	-116, -116, 61, -39, -116, 42, 69, 70, 71, -68,
	-61, -61, -61, -35, 134, 74, -170, -170, -36, 57,
	-110, -109, 26, -107, 61, 111, -169, 111, -170, -170,
	-170, 57, 127, 26, -170, -36, -79, -77, 81, -39,
	-170, -170, -170, -170, -170, -48, -40, 10, 31, -89,
	57, -170, -170, -170, 57, 111, -82, -91, -39, -108,
	-86, 59, -170, -134, 32, 83, 59, -160, -159, -107,
	59, 59, 190, 58, -133, -133, 59, 109, 58, 57,
	57, 58, 57, -140, 83, -140, 33, -117, -169, -108,
	-48, -116, 59, 158, -155, 59, -152, -35, 74, -61,
	-61, -170, -38, -109, 100, -112, -37, -108, -120, 109,
	155, 133, 153, 149, 170, 160, 175, 151, 176, -118,
	-120, 205, -82, 82, -39, 80, -55, -41, -42, -43,
	-44, -52, -74, -169, -48, 23, -72, 37, -8, -169,
	-107, -107, -86, -170, -117, -137, 230, 224, 161, 62,
	58, 57, -128, 61, 62, 62, -138, 59, 32, -142,
	59, 109, 32, 33, -61, 111, -170, -170, -128, -128,
	-128, -146, -128, 143, -128, 143, -170, -170, -169, -33,
	203, -39, -80, 12, 57, -45, -46, -47, 45, 49,
	51, 46, 47, 48, 52, -115, 26, -41, -169, -114,
	-113, 26, -111, 61, 8, -70, -8, 111, -117, 83,
	208, -159, 58, 58, 59, 100, -132, 59, -61, -170,
	61, -81, 13, 15, -42, -43, -42, -43, 45, 45,
	45, 50, 45, 50, 45, -46, -111, -170, -53, 53,
	125, 54, -113, -90, -170, -107, 59, 20, -32, 93,
	208, -39, -69, 55, 55, 45, 45, 122, 122, 122,
	21, -170, 206, 52, 209, -39, -39, -169, -169, -169,
	42, 207, 210, -54, -107, -54, -54, 42, -170, 57,
	-170, -170, 208, -107, 209, 210,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 435, 0, 221, 221, 221, 221, 221, 0,
	504, 487, 0, 0, 0, 0, 0, 0, 678, 678,
	0, 678, 0, 678, 678, 0, 678, 678, 678, 678,
	0, 33, 34, 676, 1, 3, 443, 0, 0, 225,
	228, 223, 487, 0, 0, 0, 41, 0, 485, 0,
	485, 505, 506, 507, 508, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 640, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 0,
	488, 483, 0, 483, 0, 0, 678, 595, 552, 526,
	528, 678, 678, 0, 678, 594, 197, 198, 199, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 525,
	527, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 540, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 593, 596, 597, 598, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 0, 216, 511, 512, 185, 186, 678, 0, 189,
	678, 191, 192, 0, 0, 678, 0, 217, 218, 219,
	220, 27, 447, 0, 0, 435, 29, 0, 221, 226,
	227, 231, 229, 230, 222, 0, 0, 281, 0, 37,
	0, 471, 39, -2, 0, 0, 509, 510, -2, 523,
	477, 526, 528, 552, 594, 595, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 184, 200, 0, 213, 0, 0, 0, 206, 207,
	211, 209, 213, 678, 187, 678, 190, 678, 0, 678,
	195, 499, 28, 677, 23, 0, 0, 444, 291, 0,
	296, 298, 0, 333, 334, 335, 336, 337, 0, 0,
	0, 0, 0, 0, 359, 360, 361, 362, 421, 422,
	423, 424, 425, 426, 427, 300, 301, 418, 0, 467,
	0, 0, 0, 0, 0, 0, 0, 409, 0, 383,
	383, 383, 383, 383, 383, 383, 383, 0, 0, 0,
	0, -2, -2, 436, 437, 440, 443, 27, 228, 0,
	233, 232, 224, 0, 0, 280, 0, 0, 289, 0,
	38, 0, 151, 478, 479, 480, 476, 0, 0, 66,
	0, 82, 135, 80, 81, 128, 94, 128, 128, 128,
	128, 148, 148, 148, 148, 120, 121, 122, 123, 124,
	0, 107, 128, 128, 128, 111, 95, 96, 97, 98,
	99, 100, 101, 130, 130, 130, 132, 132, -2, 0,
	0, 63, 0, 178, 181, 484, 0, 180, 678, 289,
	0, 678, 678, 678, 443, 0, 678, 215, 188, 193,
	0, 331, 194, 0, 500, 501, 448, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 318, 319, 320, 321, 322, 323, 324,
	297, 0, 311, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 235, 0, 27, 0, 0, 0, 0, 0,
	0, 231, 0, 410, 0, 375, 0, 376, 377, 378,
	379, 380, 381, 382, 0, 235, 0, 0, 0, 439,
	441, 442, 447, 30, 231, 0, 428, 0, 0, 0,
	234, 460, 0, 0, -2, 0, 279, 289, 468, 0,
	418, 0, 282, 513, 514, 435, 0, 472, 473, 474,
	0, 0, 0, 64, 70, 0, 76, 77, 0, 0,
	0, 0, 0, 165, 166, 78, 83, 84, 86, 87,
	88, 89, 90, 91, 92, 139, 0, 0, 147, 0,
	154, 156, 0, 0, 137, 136, 93, 0, 148, 148,
	114, 115, 151, 0, 151, 151, 151, 0, 108, 109,
	110, 102, 0, 103, 104, 105, 0, 106, 44, -2,
	48, 0, 53, 486, 0, 678, 499, 0, 496, 0,
	494, 0, 489, 490, 491, 492, 493, 495, 497, 498,
	0, 179, 201, 678, 214, 203, 204, 205, 678, 0,
	210, 0, 466, 678, 0, 292, 293, 295, 312, 0,
	314, 316, 445, 446, 302, 303, 327, 328, 329, 0,
	0, 0, 0, 325, 307, 0, 338, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 348, 349, 352, 394,
	395, 0, 350, 351, 358, 0, 0, 236, 237, 239,
	243, 0, 419, 0, -2, 330, 27, 0, 0, 0,
	0, 0, 0, 416, 413, 0, 0, 384, 0, 0,
	0, 0, 438, 24, 0, 481, 482, 429, 430, 248,
	31, 0, 460, 450, 462, 464, 0, 27, 0, 456,
	435, 0, 0, 0, 443, 290, 152, 0, 0, 68,
	0, 0, 0, 160, 0, 162, 163, 0, 85, 140,
	141, 142, 143, 144, 145, 153, 155, 157, 0, 79,
	138, 0, 151, 151, 116, 0, 117, 118, 119, 0,
	126, 0, 0, 49, 54, 54, 56, 0, 679, 170,
	0, 678, 502, 503, 0, 0, 0, 0, 0, 182,
	202, 208, 212, 332, 196, 449, 313, 315, 317, 304,
	325, 308, 0, 305, 0, 0, 299, 363, 0, 0,
	240, 244, 0, 246, 247, 0, 235, 0, -2, 366,
	367, 0, 0, 0, 0, 435, 0, 414, 0, 0,
	374, 385, 386, 387, 388, 25, 289, 0, 0, 32,
	0, 465, -2, 0, 0, 0, 443, 469, 470, 419,
	36, 0, 679, 72, 0, 0, 67, 0, 167, 128,
	161, 164, 146, 129, 112, 113, 149, 150, 125, 0,
	0, 133, 0, 0, 55, 0, 57, 45, 680, 681,
	171, 172, 173, 0, 175, 176, 177, 306, 0, 326,
	309, 364, 238, 245, 241, 0, 0, 420, 0, 128,
	128, 399, 128, 132, 402, 128, 404, 128, 407, 0,
	0, 0, 411, 373, 417, 0, 431, 249, 250, 252,
	253, 254, 262, 0, 264, 0, 463, 0, -2, 0,
	458, 457, 35, 679, 43, 65, 73, 74, 0, 71,
	158, 0, 169, 127, 0, 0, 50, 58, 59, 51,
	60, 61, 62, 0, 310, 0, 365, 368, 396, 148,
	400, 401, 403, 405, 406, 408, 370, 369, 0, 0,
	0, 415, 433, 0, 0, 0, 0, 0, 269, 0,
	0, 272, 0, 0, 0, 0, 263, 0, 0, 283,
	265, 0, 267, 268, 0, 453, 27, 0, 42, 0,
	0, 168, 131, 134, 174, 242, 397, 398, 389, 372,
	412, 26, 0, 0, 251, 258, 0, 261, 270, 271,
	273, 0, 275, 0, 277, 278, 255, 256, 257, 0,
	0, 0, 266, 461, -2, 459, 69, 0, 0, 0,
	0, 434, 432, 0, 0, 274, 276, 0, 0, 0,
	159, 371, 0, 0, 0, 259, 260, 0, 0, 0,
	390, 0, 393, 0, 287, 0, 0, 391, 284, 0,
	285, 286, 0, 288, 0, 392,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	56, 58, 100, 98, 57, 99, 111, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 238,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:303
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:308
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:309
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:313
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:337
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:345
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:349
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:356
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:372
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:383
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:394
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:406
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:410
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:416
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:428
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:432
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:438
		{
			yyVAL.str = SessionStr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:442
		{
			yyVAL.str = GlobalStr
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:449
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:455
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.PartitionName = string(yyDollar[7].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = PartitionTableHash
			yyVAL.statement = yyDollar[1].ddl
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:463
		{
			yyDollar[1].ddl.Action = CreateTableStr
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyDollar[1].ddl.BackendName = string(yyDollar[6].bytes)
			yyDollar[1].ddl.TableSpec.Options.Type = SingleTableType
			yyVAL.statement = yyDollar[1].ddl
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:471
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.statement = &DDL{Action: CreateDBStr, IfNotExists: ifnotexists, Database: yyDollar[4].tableIdent, DatabaseOptions: yyDollar[5].databaseOptionListOpt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:479
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: CreateIndexStr, IndexName: string(yyDollar[4].bytes), Table: yyDollar[6].tableName, NewName: yyDollar[6].tableName}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:485
		{
			yyVAL.databaseOptionListOpt.DBOptList = []*DatabaseOption{}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:489
		{
			yyVAL.databaseOptionListOpt.DBOptList = yyDollar[1].databaseOptionList
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:495
		{
			yyVAL.databaseOptionList = append(yyVAL.databaseOptionList, yyDollar[1].databaseOption)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:499
		{
			yyVAL.databaseOptionList = append(yyDollar[1].databaseOptionList, yyDollar[2].databaseOption)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:505
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].bytes),
				Value:            yyDollar[4].str,
			}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:512
		{
			yyVAL.databaseOption = &DatabaseOption{
				CharsetOrCollate: string(yyDollar[2].str),
				Value:            yyDollar[4].str,
			}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:520
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:522
		{
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:525
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:527
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:531
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:535
		{
			yyVAL.str = "character set"
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:541
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:545
		{
			yyVAL.str = "default"
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:551
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:555
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:559
		{
			yyVAL.str = "default"
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:565
		{
			var ifnotexists bool
			if yyDollar[3].byt != 0 {
				ifnotexists = true
			}
			yyVAL.ddl = &DDL{Action: CreateTableStr, IfNotExists: ifnotexists, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:576
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].TableOptions
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:583
		{
			yyVAL.TableOptions.Engine = yyDollar[1].str
			yyVAL.TableOptions.Charset = yyDollar[3].str
			yyVAL.TableOptions.Type = yyDollar[4].str
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:590
		{
			yyVAL.str = ""
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:594
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:599
		{
			yyVAL.str = ""
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:603
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:608
		{
			yyVAL.str = ""
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:612
		{
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:616
		{
			yyVAL.str = NormalTableType
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:620
		{
			yyVAL.str = GlobalTableType
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:624
		{
			yyVAL.str = SingleTableType
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:631
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:636
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:640
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:646
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionNotNull).NotNull
			yyDollar[2].columnType.Autoincrement = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionAutoincrement).Autoincrement
			yyDollar[2].columnType.Default = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionDefault).Default
			yyDollar[2].columnType.Comment = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionComment).Comment
			yyDollar[2].columnType.OnUpdate = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionOnUpdate).OnUpdate
			yyDollar[2].columnType.PrimaryKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyPrimaryOpt).PrimaryKeyOpt
			yyDollar[2].columnType.UniqueKeyOpt = yyDollar[3].columnOptionListOpt.GetColumnOption(ColumnOptionKeyUniqueOpt).UniqueKeyOpt
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:659
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnOptionListOpt.ColOptList = []*ColumnOption{}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:672
		{
			yyVAL.columnOptionListOpt.ColOptList = yyDollar[1].columnOptionList
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnOptionList = append(yyVAL.columnOptionList, yyDollar[1].columnOption)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnOptionList = append(yyDollar[1].columnOptionList, yyDollar[2].columnOption)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:688
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionNotNull,
				NotNull: yyDollar[1].boolVal,
			}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:695
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionDefault,
				Default: yyDollar[1].optVal,
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:702
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionAutoincrement,
				Autoincrement: yyDollar[1].boolVal,
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnOption = &ColumnOption{
				typ:           ColumnOptionKeyPrimaryOpt,
				PrimaryKeyOpt: yyDollar[1].colPrimaryKeyOpt,
			}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnOption = &ColumnOption{
				typ:          ColumnOptionKeyUniqueOpt,
				UniqueKeyOpt: yyDollar[1].colUniqueKeyOpt,
			}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:723
		{
			yyVAL.columnOption = &ColumnOption{
				typ:     ColumnOptionComment,
				Comment: yyDollar[1].optVal,
			}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:730
		{
			yyVAL.columnOption = &ColumnOption{
				typ:      ColumnOptionOnUpdate,
				OnUpdate: yyDollar[1].optVal,
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:780
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:892
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:897
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:902
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:906
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:911
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:915
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:923
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:927
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:933
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:941
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:945
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:950
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:961
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:965
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:971
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:983
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:993
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:999
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.str = ""
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.str = ""
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1031
		{
			// KEY is normally a synonym for INDEX. The key attribute PRIMARY KEY
			// can also be specified as just KEY when given in a column definition.
			// See http://dev.mysql.com/doc/refman/5.7/en/create-table.html
			yyVAL.colPrimaryKeyOpt = ColKeyPrimary
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.colUniqueKeyOpt = ColKeyUniqueKey
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1070
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: true}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1074
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: true}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Primary: false, Unique: false}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Primary: false, Unique: false, Fulltext: true}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1099
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1103
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1109
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1115
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 171:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1119
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1124
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 173:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.statement = &DDL{Action: AlterEngineStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Engine: string(yyDollar[7].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.statement = &DDL{Action: AlterCharsetStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, Charset: string(yyDollar[9].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.statement = &DDL{Action: AlterAddColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, TableSpec: yyDollar[7].TableSpec}
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1141
		{
			yyVAL.statement = &DDL{Action: AlterDropColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, DropColumnName: string(yyDollar[7].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.statement = &DDL{Action: AlterModifyColumnStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName, ModifyColumnDef: yyDollar[7].columnDefinition}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1152
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropTableStr, Tables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1160
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: DropIndexStr, IndexName: string(yyDollar[3].bytes), Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1165
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropDBStr, Database: yyDollar[4].tableIdent, IfExists: exists}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1175
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1179
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1185
		{
			yyVAL.statement = &DDL{Action: TruncateTableStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.statement = &Xa{}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.statement = &Explain{}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1209
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[2].bytes)}}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.statement = &Kill{QueryID: &NumVal{raw: string(yyDollar[3].bytes)}}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.statement = &Transaction{Action: BeginTxnStr}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.statement = &Transaction{Action: StartTxnStr}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.statement = &Transaction{Action: RollbackTxnStr}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.statement = &Transaction{Action: CommitTxnStr}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1237
		{
			yyVAL.statement = &Radon{Action: AttachStr, Row: yyDollar[3].valTuple}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1241
		{
			yyVAL.statement = &Radon{Action: DetachStr, Row: yyDollar[3].valTuple}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1245
		{
			yyVAL.statement = &Radon{Action: AttachListStr}
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1249
		{
			yyVAL.statement = &Radon{Action: ReshardStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1255
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr, ShowEnginesStr, ShowVersionsStr, ShowProcesslistStr, ShowQueryzStr, ShowTxnzStr, ShowColumnsStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.statement = &Show{Type: ShowTablesStr, Database: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.statement = &Show{Type: ShowFullTablesStr, Database: yyDollar[4].tableName, Where: NewWhere(WhereStr, yyDollar[5].expr)}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1286
		{
			yyVAL.statement = &Show{Type: ShowColumnsStr, Table: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.statement = &Show{Type: ShowCreateTableStr, Table: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.statement = &Show{Type: ShowCreateDatabaseStr, Database: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.statement = &Show{Type: ShowWarningsStr}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1302
		{
			yyVAL.statement = &Show{Type: ShowVariablesStr}
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1306
		{
			yyVAL.statement = &Show{Type: ShowBinlogEventsStr, From: yyDollar[4].str, Limit: yyDollar[5].limit}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.statement = &Show{Type: ShowStatusStr}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1314
		{
			yyVAL.statement = &Show{Type: ShowTableStatusStr, Database: yyDollar[4].tableName}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1319
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.tableName = TableName{}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &Checksum{Table: yyDollar[3].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.statement = &OtherRead{}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.statement = &OtherRead{}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1367
		{
			setAllowComments(yylex, true)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1371
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.bytes2 = nil
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.str = UnionStr
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.str = UnionAllStr
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.str = UnionDistinctStr
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.str = ""
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.str = SQLCacheStr
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1413
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.str = DistinctStr
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.str = ""
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.str = StraightJoinHint
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1431
		{
			yyVAL.selectExprs = nil
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1435
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1472
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1488
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1492
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1512
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1516
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1520
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1539
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1543
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1547
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].expr}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.empty = struct{}{}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.empty = struct{}{}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1565
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = JoinStr
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = JoinStr
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.str = JoinStr
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1594
		{
			yyVAL.str = StraightJoinStr
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.str = LeftJoinStr
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.str = LeftJoinStr
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.str = RightJoinStr
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = RightJoinStr
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = NaturalJoinStr
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.indexHints = nil
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.expr = nil
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1688
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1704
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1728
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1758
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1762
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1766
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1780
		{
			yyVAL.str = IsNullStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1784
		{
			yyVAL.str = IsNotNullStr
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1788
		{
			yyVAL.str = IsTrueStr
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1792
		{
			yyVAL.str = IsNotTrueStr
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1796
		{
			yyVAL.str = IsFalseStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1800
		{
			yyVAL.str = IsNotFalseStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1806
		{
			yyVAL.str = EqualStr
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.str = LessThanStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.str = GreaterThanStr
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1818
		{
			yyVAL.str = LessEqualStr
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.str = GreaterEqualStr
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.str = NotEqualStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = nil
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1849
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1853
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1887
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1935
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1951
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1955
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1959
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1967
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1981
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1985
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1989
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 365:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2025
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2029
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 368:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2033
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 370:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 371:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 372:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2089
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2099
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2121
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2125
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2135
		{
			yyVAL.str = BooleanModeStr
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2139
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2143
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2147
		{
			yyVAL.str = QueryExpansionStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2163
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2171
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2175
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2218
		{
			yyVAL.expr = nil
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2222
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.str = string("")
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2237
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2241
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.expr = nil
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2256
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2262
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2266
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2270
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2284
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2288
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2292
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2296
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2300
		{
			yyVAL.expr = &NullVal{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2306
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.exprs = nil
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2328
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.expr = nil
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.orderBy = nil
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2362
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.str = AscScr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.str = AscScr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.str = DescScr
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.limit = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2384
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2392
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.str = ForUpdateStr
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.str = ShareModeStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2418
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2422
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2426
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2431
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2435
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2439
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2450
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2454
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2458
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2463
		{
			yyVAL.updateExprs = nil
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2467
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2473
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2477
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2499
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2509
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2525
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2535
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2546
		{
			yyVAL.bytes = []byte("charset")
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2553
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2557
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2561
		{
			yyVAL.expr = &Default{}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2571
		{
			yyVAL.byt = 0
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.byt = 1
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2576
		{
			yyVAL.byt = 0
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.byt = 1
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2583
		{
			yyVAL.str = IgnoreStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2587
		{
			yyVAL.empty = struct{}{}
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.empty = struct{}{}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2591
		{
			yyVAL.empty = struct{}{}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2595
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2597
		{
			yyVAL.empty = struct{}{}
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			yyVAL.empty = struct{}{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			yyVAL.empty = struct{}{}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.empty = struct{}{}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.empty = struct{}{}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.empty = struct{}{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2610
		{
			yyVAL.empty = struct{}{}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.empty = struct{}{}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2616
		{
			yyVAL.empty = struct{}{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.empty = struct{}{}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2625
		{
			yyVAL.empty = struct{}{}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2629
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2633
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2640
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2650
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2844
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2853
		{
			decNesting(yylex)
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2858
		{
			forceEOF(yylex)
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2863
		{
			forceEOF(yylex)
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2867
		{
			forceEOF(yylex)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2871
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
